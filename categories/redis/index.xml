<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Redis on 太阳可以是蓝色</title>
    <link>https://blog.mletter.cn/categories/redis/</link>
    <description>Recent content in Redis on 太阳可以是蓝色</description>
    <image>
      <title>太阳可以是蓝色</title>
      <url>https://blog.mletter.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.mletter.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 19 Feb 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mletter.cn/categories/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis集群搭建</title>
      <link>https://blog.mletter.cn/tech/redis/install-redis-cluster/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/redis/install-redis-cluster/</guid>
      <description>Redis集群搭建方案</description>
      <content:encoded><![CDATA[<h2 id="redis-clusterredis集群简介">Redis Cluster（Redis集群）简介</h2>
<ul>
<li>redis是一个开源的key value存储系统，受到了广大互联网公司的青睐。redis3.0版本之前只支持单例模式，在3.0版本及以后才支持集群，我这里用的是redis3.0.0版本；</li>
<li>redis集群采用P2P模式，是完全去中心化的，不存在中心节点或者代理节点；</li>
<li>redis集群是没有统一的入口的，客户端（client）连接集群的时候连接集群中的任意节点（node）即可，集群内部的节点是相互通信的（PING-PONG机制），每个节点都是一个redis实例；</li>
<li>为了实现集群的高可用，即判断节点是否健康（能否正常使用），redis-cluster有这么一个投票容错机制：如果集群中超过半数的节点投票认为某个节点挂了，那么这个节点就挂了（fail）。这是判断节点是否挂了的方法；</li>
<li>那么如何判断集群是否挂了呢? -&gt; 如果集群中任意一个节点挂了，而且该节点没有从节点（备份节点），那么这个集群就挂了。这是判断集群是否挂了的方法；</li>
<li>那么为什么任意一个节点挂了（没有从节点）这个集群就挂了呢？ -&gt; 因为集群内置了16384个slot（哈希槽），并且把所有的物理节点映射到了这16384[0-16383]个slot上，或者说把这些slot均等的分配给了各个节点。当需要在Redis集群存放一个数据（key-value）时，redis会先对这个key进行crc16算法，然后得到一个结果。再把这个结果对16384进行求余，这个余数会对应[0-16383]其中一个槽，进而决定key-value存储到哪个节点中。所以一旦某个节点挂了，该节点对应的slot就无法使用，那么就会导致集群无法正常工作。</li>
<li>综上所述，每个Redis集群理论上最多可以有16384个节点。</li>
</ul>
<p>Redis集群至少需要3个节点，因为投票容错机制要求超过半数节点认为某个节点挂了该节点才是挂了，所以2个节点无法构成集群。
要保证集群的高可用，需要每个节点都有从节点，也就是备份节点，所以Redis集群至少需要6台服务器。因为我没有那么多服务器，也启动不了那么多虚拟机，所在这里搭建的是伪分布式集群，即一台服务器虚拟运行6个redis实例，修改端口号为（7001-7006）<code>1+1+1+1+1+1 = 6</code></p>
<h2 id="搭建集群">搭建集群</h2>
<ul>
<li>Redis版本<code>6.0.8</code></li>
<li>Gcc7x.x.x</li>
</ul>
<h3 id="创建目录">创建目录</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir /usr/local/redis-cluster
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /usr/local/redis-cluster
</span></span><span class="line"><span class="cl">wget http://download.redis.io/releases/redis-6.0.8.tar.gz
</span></span><span class="line"><span class="cl">mkdir <span class="o">{</span>7001..7006<span class="o">}</span>
</span></span></code></pre></div><h3 id="复制配置文件">复制配置文件</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tar -zxf redis-6.0.8.tar.gz
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> redis-6.0.8/ <span class="o">&amp;&amp;</span> make install 
</span></span><span class="line"><span class="cl">cp -a redis-6.0.8/redis.conf 7001/ <span class="c1"># 以此类推</span>
</span></span><span class="line"><span class="cl">cp -a redis-6.0.8/redis.conf 7002/
</span></span></code></pre></div><ul>
<li>如果你不想编译安装的话,你可以把redis中的/bin目录的命令移动到每个node节点文件夹中，这样以方便你使用<code>redis-server</code>命令</li>
</ul>
<h3 id="编辑配置文件">编辑配置文件</h3>
<blockquote>
<p>此文件内容为集群模式最小配置文件内容.</p></blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim 7001/redis.conf <span class="c1"># 以此类推,记得更改端口号和日志文件</span>
</span></span><span class="line"><span class="cl"><span class="nb">bind</span> 127.0.0.1 <span class="c1"># IP可更换为内网IP</span>
</span></span><span class="line"><span class="cl">port <span class="m">7001</span>
</span></span><span class="line"><span class="cl">cluster-enabled yes
</span></span><span class="line"><span class="cl">cluster-config-file nodes7001.conf
</span></span><span class="line"><span class="cl">cluster-node-timeout <span class="m">5000</span>
</span></span><span class="line"><span class="cl">appendonly yes
</span></span><span class="line"><span class="cl">daemonize yes
</span></span><span class="line"><span class="cl">logfile /usr/local/redis-cluster/7001/redis-7001.log
</span></span><span class="line"><span class="cl">maxmemory 4GB
</span></span><span class="line"><span class="cl">requirepass *******
</span></span><span class="line"><span class="cl">dir /usr/local/redis-cluster/7001
</span></span><span class="line"><span class="cl">masterauth ****
</span></span></code></pre></div><ul>
<li><code>port 7001</code> Redis运行端口</li>
<li><code>cluster-enabled yes</code>启用集群模式</li>
<li><code>cluster-config-file nodes.conf</code>集群模式配置文件</li>
<li><code>cluster-node-timeout 5000</code>节点的超时时限</li>
<li><code>appendonly yes</code>开启AOF持久化</li>
<li><code>daemonize yes</code>开启后台运行</li>
<li><code>maxmemory 4GB</code>Redis最大可用内存</li>
<li><code>requirepass</code>连接Redis客户端密码</li>
<li><code>masterauth</code> Slave连接master需要的认证</li>
</ul>
<h3 id="启动集群">启动集群</h3>
<blockquote>
<p>自己建一个启动脚本,要不然手动启动太麻烦了</p></blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>redis-server /usr/local/redis-cluster/7001/redis.conf
</span></span><span class="line"><span class="cl">redis-server /usr/local/redis-cluster/7002/redis.conf
</span></span><span class="line"><span class="cl">redis-server /usr/local/redis-cluster/7003/redis.conf
</span></span><span class="line"><span class="cl">redis-server /usr/local/redis-cluster/7004/redis.conf
</span></span><span class="line"><span class="cl">redis-server /usr/local/redis-cluster/7005/redis.conf
</span></span><span class="line"><span class="cl">redis-server /usr/local/redis-cluster/7006/redis.conf
</span></span><span class="line"><span class="cl">chmod +x start.sh
</span></span><span class="line"><span class="cl">sh start.sh
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@bogon redis-cluster<span class="o">]</span><span class="c1"># ps -aux | grep redis</span>
</span></span><span class="line"><span class="cl">root       <span class="m">65558</span>  0.0  0.0  <span class="m">64864</span>  <span class="m">6256</span> ?        Ssl  09:54   0:00 redis-server *:7001 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root       <span class="m">65564</span>  0.0  0.0  <span class="m">61792</span>  <span class="m">4760</span> ?        Ssl  09:54   0:00 redis-server *:7002 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root       <span class="m">65566</span>  0.0  0.0  <span class="m">61792</span>  <span class="m">4736</span> ?        Ssl  09:54   0:00 redis-server *:7003 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root       <span class="m">65572</span>  0.0  0.0  <span class="m">61792</span>  <span class="m">4712</span> ?        Ssl  09:54   0:00 redis-server *:7004 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root       <span class="m">65578</span>  0.0  0.0  <span class="m">61792</span>  <span class="m">4704</span> ?        Ssl  09:54   0:00 redis-server *:7005 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root       <span class="m">65580</span>  0.0  0.0  <span class="m">61792</span>  <span class="m">4780</span> ?        Ssl  09:54   0:00 redis-server *:7006 <span class="o">[</span>cluster<span class="o">]</span>
</span></span></code></pre></div><h3 id="加入集群">加入集群</h3>
<p>现在我们有许多实例正在运行，我们需要通过向节点写入一些有意义的配置来创建集群。</p>
<p>如果您使用的是<code>Redis 5</code>或更高版本，这很容易完成，因为嵌入到中的Redis Cluster命令行实用程序为我们提供了帮助，该实用程序<code>redis-cli</code>可用于创建新集群，检查或重新分片现有集群等。</p>
<p>对于Redis版本3或4，有一个称为的旧工具<code>redis-trib.rb</code>，它非常相似。您可以<code>src</code>在Redis源代码分发的目录中找到它。您需要安装<code>redis</code>gem才能运行<code>redis-trib</code>。</p>
<blockquote>
<p>如果你是用的是Redis3.x或者4.x 请前往官网链接 <a class="link" href="https://redis.io/topics/cluster-tutorial"  target="_blank" rel="noopener"
    >点我进入</a></p></blockquote>
<ul>
<li>此方法为<code>Redis5</code>或者更高版本</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--cluster-replicas <span class="m">1</span>
</span></span><span class="line"><span class="cl">Can I <span class="nb">set</span> the above configuration? <span class="o">(</span><span class="nb">type</span> <span class="s1">&#39;yes&#39;</span> to accept<span class="o">)</span>: yes
</span></span></code></pre></div><ul>
<li><code>--cluster-replicas 1</code>给Master只分配一个slave</li>
</ul>
<h3 id="连接集群">连接集群</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">redis-cli -c -p <span class="m">7001</span> -a *** 
</span></span><span class="line"><span class="cl">127.0.0.1:7001&gt; info 
</span></span><span class="line"><span class="cl"><span class="c1"># Replication</span>
</span></span><span class="line"><span class="cl">role:master
</span></span><span class="line"><span class="cl">connected_slaves:1
</span></span><span class="line"><span class="cl">127.0.0.1:7001&gt; <span class="nb">set</span> Host Linux7
</span></span><span class="line"><span class="cl">-&gt; Redirected to slot <span class="o">[</span>16156<span class="o">]</span> located at 127.0.0.1:7003
</span></span><span class="line"><span class="cl">OK
</span></span></code></pre></div><ul>
<li><code>-a</code>是你设置的requirepass密码</li>
</ul>
<p>注意：出现connected_slaves:1 表示连接到了一个从服务器 如果为0 请查看服务器错误日志</p>
<h3 id="故障切换">故障切换</h3>
<p>连接到7003的从服务器7005 查看数据是否同步</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">redis-cli -c -p <span class="m">7005</span> -a ***
</span></span><span class="line"><span class="cl">master_host:127.0.0.1
</span></span><span class="line"><span class="cl">master_port:7003
</span></span><span class="line"><span class="cl">127.0.0.1:7005&gt; get Host
</span></span><span class="line"><span class="cl"><span class="s2">&#34;Linux7&#34;</span>
</span></span></code></pre></div><p>宕机7003服务器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@bogon redis-cluster<span class="o">]</span><span class="c1"># ps -aux | grep 7003</span>
</span></span><span class="line"><span class="cl">root       <span class="m">70467</span>  0.2  0.0  <span class="m">64352</span>  <span class="m">5120</span> ?        Ssl  11:20   0:01 redis-server *:7003 <span class="o">[</span>cluster<span class="o">]</span>
</span></span><span class="line"><span class="cl">root       <span class="m">70871</span>  0.0  0.0  <span class="m">12112</span>  <span class="m">1052</span> pts/0    S+   11:29   0:00 grep --color<span class="o">=</span>auto <span class="m">7003</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@bogon redis-cluster<span class="o">]</span><span class="c1"># kill -15 70467</span>
</span></span></code></pre></div><p>通过<code>info</code>发现7005已经成为主服务器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">127.0.0.1:7005&gt; info
</span></span><span class="line"><span class="cl"><span class="c1"># Replication</span>
</span></span><span class="line"><span class="cl">role:master
</span></span><span class="line"><span class="cl">connected_slaves:0
</span></span></code></pre></div><p>再次启动7003发现已经更改为从服务器，并且已经被7005连接到</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">127.0.0.1:7005&gt; 
</span></span><span class="line"><span class="cl"><span class="c1"># Replication</span>
</span></span><span class="line"><span class="cl">role:master
</span></span><span class="line"><span class="cl">connected_slaves:1
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>首先 先说结论：redis集群无法保证强一致性</p>
<p>既然无法保证强一致性，也就是说有可能出现写数据丢失的情况，比如一个客户端发一个写请求给master，master再同步到slave之前就给client一个回执。这个时候会存在一个时间窗口，master 和 slave之间的数据是不一致的。但是redis的最终一致性会使master和slave的数据是最终一致。</p>
<p>另外还有一个可能，在客户端收到了master的一个写请求回执之后，此时master准备把数据同步到slave，同步之前突然挂了，那么这个数据真的就是会丢失了。</p>
<p>如果为了保证强一致，比如我们每秒刷盘进行持久化，那么牺牲了这个吞吐量，就特别类似我们常说的同步复制了。但是redis集群是没有实现强一致的。</p>
<p>1、redis保证最终一致性</p>
<p>2、用最终一致性换取了高吞吐量</p>
<p>3、主节点挂了的时候，如果数据没有同步到备节点，是会出现数据丢失的情况</p>
<p>4、发生网络分区的时候也可能会丢数据，这个时候有个node timeout时间概念</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
