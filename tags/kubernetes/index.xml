<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kubernetes on 太阳可以是蓝色</title>
    <link>https://blog.mletter.cn/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on 太阳可以是蓝色</description>
    <image>
      <title>太阳可以是蓝色</title>
      <url>https://blog.mletter.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.mletter.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.138.0</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 15 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mletter.cn/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于SealOS部署高可用的kubernetes集群</title>
      <link>https://blog.mletter.cn/tech/kubernetes/sealos/</link>
      <pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/sealos/</guid>
      <description>基于SealOS来部署高可用的kubernetes集群</description>
      <content:encoded><![CDATA[<p>配套Bilibili视频已经更新：<a class="link" href="https://www.bilibili.com/video/BV1Pr421V7PT/?share_source=copy_web&amp;vd_source=2cac9fa5f0a3fb896b7f6b1468993554"  target="_blank" rel="noopener"
    >点我观看</a></p>
<h2 id="准备sealos">准备SealOS</h2>
<p>机器信息如下：</p>
<table>
  <thead>
      <tr>
          <th>服务器名称</th>
          <th>IP</th>
          <th>Role</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>ready-kubernetes-master1</td>
          <td>10.1.11.100</td>
          <td>Control-Plane</td>
      </tr>
      <tr>
          <td>ready-kubernetes-master2</td>
          <td>10.1.11.101</td>
          <td>Control-Plane</td>
      </tr>
      <tr>
          <td>ready-kubernetes-master3</td>
          <td>10.1.11.102</td>
          <td>Control-Plane</td>
      </tr>
      <tr>
          <td>ready-kubernetes-node1</td>
          <td>10.1.11.103</td>
          <td>Node</td>
      </tr>
      <tr>
          <td>ready-kubernetes-node2</td>
          <td>10.1.11.104</td>
          <td>Node</td>
      </tr>
      <tr>
          <td>ready-kubernetes-node3</td>
          <td>10.1.11.105</td>
          <td>Node</td>
      </tr>
  </tbody>
</table>
<h3 id="通过sealos部署的前提条件">通过SealOS部署的前提条件</h3>
<ul>
<li>
<p><a class="link" href="https://sealos.io/zh-Hans/docs/self-hosting/lifecycle-management/quick-start/deploy-kubernetes"  target="_blank" rel="noopener"
    >SealOS For Kubernetes</a></p>
</li>
<li>
<p>每个集群节点应该有不同的主机名。主机名不要带下划线。</p>
</li>
<li>
<p>所有节点的时间需要同步。</p>
</li>
<li>
<p>需要在 K8s 集群的第一个 master 节点上运行 sealos run 命令，目前集群外的节点不支持集群安装。</p>
</li>
<li>
<p>建议使用干净的操作系统来创建集群。不要自己装 <code>Docker</code>！</p>
</li>
<li>
<p>支持大多数 Linux 发行版，例如：Ubuntu、CentOS、Rocky linux。</p>
</li>
<li>
<p>支持 Docker Hub 中的所有 Kubernetes 版本。</p>
</li>
<li>
<p>支持使用 Containerd 作为容器运行时。</p>
</li>
<li>
<p>在公有云上安装请使用私有 IP。</p>
</li>
</ul>
<ol>
<li>获取当前稳定版本的<code>SealOS</code>列表</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 获取非beta版本</span>
</span></span><span class="line"><span class="cl">curl --silent <span class="s2">&#34;https://api.github.com/repos/labring/sealos/releases&#34;</span> <span class="p">|</span> jq -r <span class="s1">&#39;map(select(.tag_name | test(&#34;beta&#34;; &#34;i&#34;) | not)) | .[].tag_name&#39;</span>
</span></span></code></pre></div><ol start="2">
<li>下载最新稳定版本的<code>SealOS</code>，版本号为<code>v4.3.7</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 在一台主机上执行就行了</span>
</span></span><span class="line"><span class="cl"><span class="nv">VERSION</span><span class="o">=</span>v4.3.7
</span></span><span class="line"><span class="cl">wget https://mirror.ghproxy.com/https://github.com/labring/sealos/releases/download/<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>/sealos_<span class="si">${</span><span class="nv">VERSION</span><span class="p">#v</span><span class="si">}</span>_linux_amd64.tar.gz <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> tar zxvf sealos_<span class="si">${</span><span class="nv">VERSION</span><span class="p">#v</span><span class="si">}</span>_linux_amd64.tar.gz sealos <span class="o">&amp;&amp;</span> chmod +x sealos <span class="o">&amp;&amp;</span> mv sealos /usr/bin
</span></span></code></pre></div><ol start="3">
<li>验证<code>SealOS</code>是否安装完成</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># sealos version</span>
</span></span><span class="line"><span class="cl">SealosVersion:
</span></span><span class="line"><span class="cl">  buildDate: <span class="s2">&#34;2023-10-30T16:19:05Z&#34;</span>
</span></span><span class="line"><span class="cl">  compiler: gc
</span></span><span class="line"><span class="cl">  gitCommit: f39b2339
</span></span><span class="line"><span class="cl">  gitVersion: 4.3.7
</span></span><span class="line"><span class="cl">  goVersion: go1.20.10
</span></span><span class="line"><span class="cl">  platform: linux/amd64
</span></span></code></pre></div><blockquote>
<p>正常能显示出来版本号信息就表示安装正常。</p>
</blockquote>
<h2 id="快速部署高可用集群">快速部署高可用集群</h2>
<ul>
<li>默认使用的容器运行时为<code>Containerd</code></li>
</ul>
<ol>
<li>开始使用<code>sealOS</code>来部署多节点集群</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sealos run registry.cn-shanghai.aliyuncs.com/labring/kubernetes:v1.27.7 registry.cn-shanghai.aliyuncs.com/labring/helm:v3.9.4 registry.cn-shanghai.aliyuncs.com/labring/cilium:v1.13.4 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     --masters 10.1.11.100,10.1.11.101,10.1.11.102 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     --nodes 10.1.11.103,10.1.11.104,10.1.11.105  -p 123..com
</span></span></code></pre></div><ul>
<li><code>--masters</code>: kubernetes-master的节点地址列表</li>
<li><code>--nodes</code>:  kubernetes-node的节点地址列表</li>
<li><code>-p</code>: 远程主机的SSH登录密码</li>
</ul>
<p>注意部署的时候注意服务器的<code>HostName</code>必须唯一不冲突</p>
<ol start="2">
<li>检查是否安装成功 出现如下内容表示安装成功</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2024-04-11T15:20:01 info Executing pipeline RunGuest in CreateProcessor.
</span></span><span class="line"><span class="cl">ℹ️  Using Cilium version 1.13.4
</span></span><span class="line"><span class="cl">🔮 Auto-detected cluster name: kubernetes
</span></span><span class="line"><span class="cl">🔮 Auto-detected datapath mode: tunnel
</span></span><span class="line"><span class="cl">🔮 Auto-detected kube-proxy has been installed
</span></span><span class="line"><span class="cl">2024-04-11T15:20:03 info succeeded in creating a new cluster, enjoy it!
</span></span><span class="line"><span class="cl">2024-04-11T15:20:03 info 
</span></span><span class="line"><span class="cl">      ___           ___           ___           ___       ___           ___
</span></span><span class="line"><span class="cl">     /<span class="se">\ </span> <span class="se">\ </span>        /<span class="se">\ </span> <span class="se">\ </span>        /<span class="se">\ </span> <span class="se">\ </span>        /<span class="se">\_</span>_<span class="se">\ </span>    /<span class="se">\ </span> <span class="se">\ </span>        /<span class="se">\ </span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    /::<span class="se">\ </span> <span class="se">\ </span>      /::<span class="se">\ </span> <span class="se">\ </span>      /::<span class="se">\ </span> <span class="se">\ </span>      /:/  /    /::<span class="se">\ </span> <span class="se">\ </span>      /::<span class="se">\ </span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   /:/<span class="se">\ \ </span> <span class="se">\ </span>    /:/<span class="se">\:\ </span> <span class="se">\ </span>    /:/<span class="se">\:\ </span> <span class="se">\ </span>    /:/  /    /:/<span class="se">\:\ </span> <span class="se">\ </span>    /:/<span class="se">\ \ </span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  _<span class="se">\:\~\ \ </span> <span class="se">\ </span>  /::<span class="se">\~\:\ </span> <span class="se">\ </span>  /::<span class="se">\~\:\ </span> <span class="se">\ </span>  /:/  /    /:/  <span class="se">\:\ </span> <span class="se">\ </span>  _<span class="se">\:\~\ \ </span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> /<span class="se">\ \:\ \ \_</span>_<span class="se">\ </span>/:/<span class="se">\:\ \:\_</span>_<span class="se">\ </span>/:/<span class="se">\:\ \:\_</span>_<span class="se">\ </span>/:/__/    /:/__/ <span class="se">\:\_</span>_<span class="se">\ </span>/<span class="se">\ \:\ \ \_</span>_<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> <span class="se">\:\ \:\ \/</span>__/ <span class="se">\:\~\:\ \/</span>__/ <span class="se">\/</span>__<span class="se">\:\/</span>:/  / <span class="se">\:\ </span> <span class="se">\ </span>   <span class="se">\:\ </span> <span class="se">\ </span>/:/  / <span class="se">\:\ \:\ \/</span>__/
</span></span><span class="line"><span class="cl">  <span class="se">\:\ \:\_</span>_<span class="se">\ </span>   <span class="se">\:\ \:\_</span>_<span class="se">\ </span>       <span class="se">\:</span>:/  /   <span class="se">\:\ </span> <span class="se">\ </span>   <span class="se">\:\ </span> /:/  /   <span class="se">\:\ \:\_</span>_<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   <span class="se">\:\/</span>:/  /     <span class="se">\:\ \/</span>__/        /:/  /     <span class="se">\:\ </span> <span class="se">\ </span>   <span class="se">\:\/</span>:/  /     <span class="se">\:\/</span>:/  /
</span></span><span class="line"><span class="cl">    <span class="se">\:</span>:/  /       <span class="se">\:\_</span>_<span class="se">\ </span>        /:/  /       <span class="se">\:\_</span>_<span class="se">\ </span>   <span class="se">\:</span>:/  /       <span class="se">\:</span>:/  /
</span></span><span class="line"><span class="cl">     <span class="se">\/</span>__/         <span class="se">\/</span>__/         <span class="se">\/</span>__/         <span class="se">\/</span>__/     <span class="se">\/</span>__/         <span class="se">\/</span>__/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                  Website: https://www.sealos.io/
</span></span><span class="line"><span class="cl">                  Address: github.com/labring/sealos
</span></span><span class="line"><span class="cl">                  Version: 4.3.7-f39b2339
</span></span></code></pre></div><ol start="3">
<li>简单的验证一下<code>kubernetes</code>工作是否正常</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@ready-kubernetes-master1 ~<span class="o">]</span><span class="c1"># kubectl get nodes</span>
</span></span><span class="line"><span class="cl">NAME                       STATUS   ROLES           AGE     VERSION
</span></span><span class="line"><span class="cl">ready-kubernetes-master1   Ready    control-plane   5m26s   v1.27.7
</span></span><span class="line"><span class="cl">ready-kubernetes-master2   Ready    control-plane   4m50s   v1.27.7
</span></span><span class="line"><span class="cl">ready-kubernetes-master3   Ready    control-plane   4m      v1.27.7
</span></span><span class="line"><span class="cl">ready-kubernetes-node1     Ready    &lt;none&gt;          3m48s   v1.27.7
</span></span><span class="line"><span class="cl">ready-kubernetes-node2     Ready    &lt;none&gt;          3m47s   v1.27.7
</span></span><span class="line"><span class="cl">ready-kubernetes-node3     Ready    &lt;none&gt;          3m49s   v1.27.7
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>kubernetes基于EFK的日志落地实现</title>
      <link>https://blog.mletter.cn/tech/kubernetes/install-efk/</link>
      <pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/install-efk/</guid>
      <description>&lt;p&gt;Kubernetes 中比较流行的日志收集解决方案是 &lt;code&gt;Elasticsearch&lt;/code&gt;、&lt;code&gt;Fluentd&lt;/code&gt; 和 &lt;code&gt;Kibana&lt;/code&gt;（EFK）技术栈，也是官方现在比较推荐的一种方案。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Elasticsearch&lt;/code&gt; 是一个实时的、分布式的可扩展的搜索引擎，允许进行全文、结构化搜索，它通常用于索引和搜索大量日志数据，也可用于搜索许多不同类型的文档。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Elasticsearch&lt;/code&gt; 通常与 &lt;code&gt;Kibana&lt;/code&gt; 一起部署，&lt;code&gt;Kibana&lt;/code&gt; 是 &lt;code&gt;Elasticsearch&lt;/code&gt; 的一个功能强大的数据可视化 Dashboard，&lt;code&gt;Kibana&lt;/code&gt; 允许你通过 web 界面来浏览&lt;code&gt;Elasticsearch&lt;/code&gt; 日志数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Fluentd&lt;/code&gt;是一个流行的开源数据收集器，我们将在 Kubernetes 集群节点上安装 &lt;code&gt;Fluentd&lt;/code&gt;，通过获取容器日志文件、过滤和转换日志数据，然后将数据传递到 Elasticsearch 集群，在该集群中对其进行索引和存储。&lt;/p&gt;
&lt;p&gt;我们先来配置启动一个可扩展的 Elasticsearch 集群，然后在 Kubernetes 集群中创建一个 Kibana 应用，最后通过 DaemonSet 来运行 Fluentd，以便它在每个 Kubernetes 工作节点上都可以运行一个 Pod。&lt;/p&gt;
&lt;h2 id=&#34;安装-elasticsearch-集群&#34;&gt;安装 Elasticsearch 集群&lt;/h2&gt;
&lt;p&gt;先创建一个命名空间，我们将在其中安装所有日志相关的资源对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create ns kube-logging
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;环境准备&#34;&gt;环境准备&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ElasticSearch&lt;/code&gt; 安装有最低安装要求，如果安装后 Pod 无法正常启动，请检查是否符合最低要求的配置，要求如下：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;节点&lt;/th&gt;
          &lt;th&gt;CPU最低要求&lt;/th&gt;
          &lt;th&gt;内存最低要求&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;elasticsearch-master&lt;/td&gt;
          &lt;td&gt;核心数&amp;gt;2&lt;/td&gt;
          &lt;td&gt;内存&amp;gt;2G&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;elasticsearch-data&lt;/td&gt;
          &lt;td&gt;核心数&amp;gt;1&lt;/td&gt;
          &lt;td&gt;内存&amp;gt;2G&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;elasticsearch-client&lt;/td&gt;
          &lt;td&gt;核心数&amp;gt;1&lt;/td&gt;
          &lt;td&gt;内存&amp;gt;2G&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;集群节点信息&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;集群&lt;/th&gt;
          &lt;th&gt;节点类型&lt;/th&gt;
          &lt;th&gt;副本数目&lt;/th&gt;
          &lt;th&gt;存储大小&lt;/th&gt;
          &lt;th&gt;网络模式&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;elasticsearch&lt;/td&gt;
          &lt;td&gt;master&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;5Gi&lt;/td&gt;
          &lt;td&gt;ClusterIP&lt;/td&gt;
          &lt;td&gt;主节点&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;elasticsearch-data&lt;/td&gt;
          &lt;td&gt;data&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;50Gi&lt;/td&gt;
          &lt;td&gt;ClusterIP&lt;/td&gt;
          &lt;td&gt;数据节点&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;elasticsearch-client&lt;/td&gt;
          &lt;td&gt;client&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;无&lt;/td&gt;
          &lt;td&gt;NodePort&lt;/td&gt;
          &lt;td&gt;负责处理用户请求&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;建议使用 &lt;code&gt;StorageClass&lt;/code&gt; 来做持久化存储，当然如果你是线上环境建议使用 Local PV 或者 Ceph RBD 之类的存储来持久化 Elasticsearch 的数据。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Kubernetes 中比较流行的日志收集解决方案是 <code>Elasticsearch</code>、<code>Fluentd</code> 和 <code>Kibana</code>（EFK）技术栈，也是官方现在比较推荐的一种方案。</p>
<p><code>Elasticsearch</code> 是一个实时的、分布式的可扩展的搜索引擎，允许进行全文、结构化搜索，它通常用于索引和搜索大量日志数据，也可用于搜索许多不同类型的文档。</p>
<p><code>Elasticsearch</code> 通常与 <code>Kibana</code> 一起部署，<code>Kibana</code> 是 <code>Elasticsearch</code> 的一个功能强大的数据可视化 Dashboard，<code>Kibana</code> 允许你通过 web 界面来浏览<code>Elasticsearch</code> 日志数据。</p>
<p><code>Fluentd</code>是一个流行的开源数据收集器，我们将在 Kubernetes 集群节点上安装 <code>Fluentd</code>，通过获取容器日志文件、过滤和转换日志数据，然后将数据传递到 Elasticsearch 集群，在该集群中对其进行索引和存储。</p>
<p>我们先来配置启动一个可扩展的 Elasticsearch 集群，然后在 Kubernetes 集群中创建一个 Kibana 应用，最后通过 DaemonSet 来运行 Fluentd，以便它在每个 Kubernetes 工作节点上都可以运行一个 Pod。</p>
<h2 id="安装-elasticsearch-集群">安装 Elasticsearch 集群</h2>
<p>先创建一个命名空间，我们将在其中安装所有日志相关的资源对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create ns kube-logging
</span></span></code></pre></div><h3 id="环境准备">环境准备</h3>
<p><code>ElasticSearch</code> 安装有最低安装要求，如果安装后 Pod 无法正常启动，请检查是否符合最低要求的配置，要求如下：</p>
<table>
  <thead>
      <tr>
          <th>节点</th>
          <th>CPU最低要求</th>
          <th>内存最低要求</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>elasticsearch-master</td>
          <td>核心数&gt;2</td>
          <td>内存&gt;2G</td>
      </tr>
      <tr>
          <td>elasticsearch-data</td>
          <td>核心数&gt;1</td>
          <td>内存&gt;2G</td>
      </tr>
      <tr>
          <td>elasticsearch-client</td>
          <td>核心数&gt;1</td>
          <td>内存&gt;2G</td>
      </tr>
  </tbody>
</table>
<p>集群节点信息</p>
<table>
  <thead>
      <tr>
          <th>集群</th>
          <th>节点类型</th>
          <th>副本数目</th>
          <th>存储大小</th>
          <th>网络模式</th>
          <th>描述</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>elasticsearch</td>
          <td>master</td>
          <td>3</td>
          <td>5Gi</td>
          <td>ClusterIP</td>
          <td>主节点</td>
      </tr>
      <tr>
          <td>elasticsearch-data</td>
          <td>data</td>
          <td>3</td>
          <td>50Gi</td>
          <td>ClusterIP</td>
          <td>数据节点</td>
      </tr>
      <tr>
          <td>elasticsearch-client</td>
          <td>client</td>
          <td>2</td>
          <td>无</td>
          <td>NodePort</td>
          <td>负责处理用户请求</td>
      </tr>
  </tbody>
</table>
<blockquote>
<p>建议使用 <code>StorageClass</code> 来做持久化存储，当然如果你是线上环境建议使用 Local PV 或者 Ceph RBD 之类的存储来持久化 Elasticsearch 的数据。</p>
</blockquote>
<p>由于 ElasticSearch 7.x 版本默认安装了 X-Pack 插件，并且部分功能免费，需要我们配置一些安全证书文件。</p>
<h3 id="准备生成证书文件">准备生成证书文件</h3>
<blockquote>
<p>注意：由于我们采用的是<code>containerd</code>所以使用<code>nerdctl</code>来运行一个容器</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p elastic-certs
</span></span><span class="line"><span class="cl">nerdctl run --name elastic-certs -v elastic-certs:/app -it -w /app elasticsearch:7.17.3 /bin/sh -c  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="s2">&#34;elasticsearch-certutil ca --out /app/elastic-stack-ca.p12 --pass &#39;&#39; &amp;&amp; \
</span></span></span><span class="line"><span class="cl"><span class="s2">    elasticsearch-certutil cert --name security-master --dns \
</span></span></span><span class="line"><span class="cl"><span class="s2">    security-master --ca /app/elastic-stack-ca.p12 --pass &#39;&#39; --ca-pass &#39;&#39; --out /app/elastic-certificates.p12&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 找到nerdctl挂载的目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /var/lib/nerdctl/1935db59/volumes/default/elastic-certs/_data/ <span class="c1"># 这个每个人是不一样的 可以自己搜索一下</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mv * /root/elastic-certs/
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /root/elastic-certs/ <span class="o">&amp;&amp;</span> openssl pkcs12 -nodes -passin pass:<span class="s1">&#39;&#39;</span> -in elastic-certificates.p12 -out elastic-certificate.pem
</span></span></code></pre></div><ol start="2">
<li>添加证书到<code>kubernetes</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create secret -n kube-logging generic elastic-certs --from-file<span class="o">=</span>elastic-certificates.p12
</span></span><span class="line"><span class="cl"><span class="c1"># 设置集群用户名和密码</span>
</span></span><span class="line"><span class="cl">kubectl create secret -n kube-logging generic elastic-auth --from-literal<span class="o">=</span><span class="nv">username</span><span class="o">=</span>elastic --from-literal<span class="o">=</span><span class="nv">password</span><span class="o">=</span>elastic-master
</span></span></code></pre></div><h3 id="准备安装elastic集群">准备安装Elastic集群</h3>
<ol>
<li>采用<code>Helm</code>的方式来添加<code>elasticsearch</code>仓库</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">helm repo add elastic https://helm.elastic.co
</span></span><span class="line"><span class="cl">helm repo update
</span></span></code></pre></div><p>ElaticSearch 安装需要安装三次，分别安装 Master、Data、Client 节点，Master 节点负责集群间的管理工作；Data 节点负责存储数据；Client 节点负责代理 ElasticSearch Cluster 集群，负载均衡。
2. 拉取elasticsearch</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">helm pull elastic/elasticsearch --untar --version 7.17.3
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> elasticsearch/
</span></span></code></pre></div><p>在Chart目录下创建对应节点节点的<code>values</code>文件
以下是<code>master-value.yaml</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 设置集群名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clusterName</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;elasticsearch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置节点名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodeGroup</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;master&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置角色</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">master</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingest</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">data</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 镜像</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;docker.elastic.co/elasticsearch/elasticsearch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">imageTag</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;7.17.3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;IfNotPresent&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 副本数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ---资源配置---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esJavaOpts</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;-Xmx1g -Xms1g&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2000m&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2Gi&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2000m&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2Gi&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 数据持久卷配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">persistence</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 存储数据大小配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumeClaimTemplate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">managed-nfs-storage</span><span class="w"> </span><span class="c"># 定义你自己的存储类</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;ReadWriteOnce&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">5Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ---安全设置---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置协议，可配置为 http、https</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 证书挂载配置，这里我们挂入上面创建的证书</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">secretMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/usr/share/elasticsearch/config/certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">defaultMode</span><span class="p">:</span><span class="w"> </span><span class="m">0755</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 允许您在/usr/share/elasticsearch/config/中添加任何自定义配置文件,例如 elasticsearch.yml、log4j2.properties</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ElasticSearch 7.x 默认安装了 x-pack 插件，部分功能免费，这里我们配置下</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 下面注掉的部分为配置 https 证书，配置此部分还需要配置 helm 参数 protocol 值改为 https</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">elasticsearch.yml</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.enabled: true
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.enabled: true
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.verification_mode: certificate
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
</span></span></span><span class="line"><span class="cl"><span class="sd">    # xpack.security.http.ssl.enabled: true
</span></span></span><span class="line"><span class="cl"><span class="sd">    # xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
</span></span></span><span class="line"><span class="cl"><span class="sd">    # xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 环境变量配置，这里引入上面设置的用户名、密码 secret 文件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">extraEnvs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ELASTIC_USERNAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">username</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ELASTIC_PASSWORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ---调度设置---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置调度策略</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># - hard：只有当有足够的节点时 Pod 才会被调度，并且它们永远不会出现在同一个节点上</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># - soft：尽最大努力调度</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">antiAffinity</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;soft&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tolerations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span>- <span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Exists&#34;</span><span class="w"> </span><span class="c"># 容忍全部污点</span><span class="w">
</span></span></span></code></pre></div><p>以下是<code>data-value.yaml</code>的内容</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 设置集群名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clusterName</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;elasticsearch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置节点名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodeGroup</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;data&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置角色</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">master</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingest</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">data</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 镜像</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;docker.elastic.co/elasticsearch/elasticsearch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">imageTag</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;7.17.3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;IfNotPresent&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 副本数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ---资源配置---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esJavaOpts</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;-Xmx1g -Xms1g&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000m&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2Gi&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000m&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2Gi&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 数据持久卷配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">persistence</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 存储数据大小配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumeClaimTemplate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">managed-nfs-storage</span><span class="w"> </span><span class="c"># 定义你自己的存储类</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;ReadWriteOnce&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">20Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ---安全设置---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置协议，可配置为 http、https</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 证书挂载配置，这里我们挂入上面创建的证书</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">secretMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/usr/share/elasticsearch/config/certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">defaultMode</span><span class="p">:</span><span class="w"> </span><span class="m">0755</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 允许您在/usr/share/elasticsearch/config/中添加任何自定义配置文件,例如 elasticsearch.yml、log4j2.properties</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ElasticSearch 7.x 默认安装了 x-pack 插件，部分功能免费，这里我们配置下</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 下面注掉的部分为配置 https 证书，配置此部分还需要配置 helm 参数 protocol 值改为 https</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">elasticsearch.yml</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.enabled: true
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.enabled: true
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.verification_mode: certificate
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
</span></span></span><span class="line"><span class="cl"><span class="sd">    # xpack.security.http.ssl.enabled: true
</span></span></span><span class="line"><span class="cl"><span class="sd">    # xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
</span></span></span><span class="line"><span class="cl"><span class="sd">    # xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 环境变量配置，这里引入上面设置的用户名、密码 secret 文件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">extraEnvs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ELASTIC_USERNAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">username</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ELASTIC_PASSWORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">password</span><span class="w">
</span></span></span></code></pre></div><p>以下是<code>client-value.yaml</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 设置集群名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clusterName</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;elasticsearch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置节点名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodeGroup</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;client&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置角色</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">master</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingest</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">data</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 镜像</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;docker.elastic.co/elasticsearch/elasticsearch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">imageTag</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;7.17.3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;IfNotPresent&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 副本数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ---资源配置---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esJavaOpts</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;-Xmx1g -Xms1g&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000m&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2Gi&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000m&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2Gi&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 数据持久卷配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">persistence</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ---安全设置---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 设置协议，可配置为 http、https</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 证书挂载配置，这里我们挂入上面创建的证书</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">secretMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/usr/share/elasticsearch/config/certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">defaultMode</span><span class="p">:</span><span class="w"> </span><span class="m">0755</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 允许您在/usr/share/elasticsearch/config/中添加任何自定义配置文件,例如 elasticsearch.yml、log4j2.properties</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ElasticSearch 7.x 默认安装了 x-pack 插件，部分功能免费，这里我们配置下</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 下面注掉的部分为配置 https 证书，配置此部分还需要配置 helm 参数 protocol 值改为 https</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">elasticsearch.yml</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.enabled: true
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.enabled: true
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.verification_mode: certificate
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
</span></span></span><span class="line"><span class="cl"><span class="sd">    xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
</span></span></span><span class="line"><span class="cl"><span class="sd">    # xpack.security.http.ssl.enabled: true
</span></span></span><span class="line"><span class="cl"><span class="sd">    # xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
</span></span></span><span class="line"><span class="cl"><span class="sd">    # xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 环境变量配置，这里引入上面设置的用户名、密码 secret 文件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">extraEnvs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ELASTIC_USERNAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">username</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ELASTIC_PASSWORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ----服务设置----</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;30200&#39;</span><span class="w">
</span></span></span></code></pre></div><ol start="3">
<li>开始部署相关节点</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">helm upgrade --install elasticsearch-master -f master-values.yaml --namespace kube-logging ./ <span class="c1"># 部署master</span>
</span></span><span class="line"><span class="cl">helm upgrade --install elasticsearch-data -f data-values.yaml --namespace kube-logging ./ <span class="c1"># 部署data</span>
</span></span><span class="line"><span class="cl">helm upgrade --install elasticsearch-client -f client-values.yaml --namespace kube-logging ./  <span class="c1"># 部署 client</span>
</span></span></code></pre></div><p>正常情况下看到所有节点都处于<code>running</code>状态即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 elasticsearch<span class="o">]</span><span class="c1"># kubectl get pods -n kube-logging</span>
</span></span><span class="line"><span class="cl">NAME                     READY   STATUS    RESTARTS   AGE
</span></span><span class="line"><span class="cl">elasticsearch-client-0   1/1     Running   <span class="m">0</span>          13m
</span></span><span class="line"><span class="cl">elasticsearch-data-0     1/1     Running   <span class="m">0</span>          17m
</span></span><span class="line"><span class="cl">elasticsearch-data-1     1/1     Running   <span class="m">0</span>          17m
</span></span><span class="line"><span class="cl">elasticsearch-data-2     1/1     Running   <span class="m">0</span>          17m
</span></span><span class="line"><span class="cl">elasticsearch-master-0   1/1     Running   <span class="m">0</span>          43m
</span></span><span class="line"><span class="cl">elasticsearch-master-1   1/1     Running   <span class="m">0</span>          43m
</span></span><span class="line"><span class="cl">elasticsearch-master-2   1/1     Running   <span class="m">0</span>          43m
</span></span></code></pre></div><h2 id="安装kibana">安装Kibana</h2>
<p>依旧使用<code>helm</code>的方式进行部署</p>
<ol>
<li>使用<code>helm pull</code>拉取<code>Kibana</code>包来进行解压</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">helm pull elastic/kibana --untar --version 7.17.3
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> kibana
</span></span></code></pre></div><ol start="2">
<li>定义一个名字为<code>custom-value.yaml</code>的文件</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 指定镜像与镜像版本</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;kibana&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">imageTag</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;7.17.3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 配置 ElasticSearch 地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">elasticsearchHosts</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;http://elasticsearch-client:9200&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 环境变量配置，这里引入上面设置的用户名、密码 secret 文件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">extraEnvs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ELASTICSEARCH_USERNAME&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">username</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ELASTICSEARCH_PASSWORD&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elastic-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;500m&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;1Gi&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;500m&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;1Gi&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># kibana 配置中添加语言配置，设置 kibana 为中文</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kibanaConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kibana.yml</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    i18n.locale: &#34;zh-CN&#34;</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;30601&#39;</span><span class="w">
</span></span></span></code></pre></div><ol start="3">
<li>部署<code>kibana</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">helm install kibana -f custom-value.yaml --namespace kube-logging .
</span></span></code></pre></div><h2 id="部署fluentd">部署Fluentd</h2>
<p>Fluentd 是一个高效的日志聚合器，是用 Ruby 编写的，并且可以很好地扩展。对于大部分企业来说，Fluentd 足够高效并且消耗的资源相对较少，另外一个工具 <code>Fluent-bit</code> 更轻量级，占用资源更少，但是插件相对 Fluentd 来说不够丰富，所以整体来说，Fluentd 更加成熟，使用更加广泛，所以这里我们使用 Fluentd 来作为日志收集工具。</p>
<h3 id="工作原理">工作原理</h3>
<p>Fluentd 通过一组给定的数据源抓取日志数据，处理后（转换成结构化的数据格式）将它们转发给其他服务，比如 Elasticsearch、对象存储等等。Fluentd 支持超过 300 个日志存储和分析服务，所以在这方面是非常灵活的。主要运行步骤如下：</p>
<ul>
<li>首先 Fluentd 从多个日志源获取数据</li>
<li>结构化并且标记这些数据</li>
<li>然后根据匹配的标签将数据发送到多个目标服务去</li>
<li><a class="link" href="https://docs.fluentd.org/quickstart"  target="_blank" rel="noopener"
    >官方文档</a></li>
</ul>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="image.png" loading="lazy" src="https://img14.360buyimg.com/ddimg/jfs/t1/177175/31/35833/30306/64cb08eeF5ba90f46/1da6311bbbec8921.jpg"></p>
<h3 id="日志源配置">日志源配置</h3>
<p>比如我们这里为了收集 Kubernetes 节点上的所有容器日志，就需要做如下的日志源配置：</p>
<ul>
<li>id：表示引用该日志源的唯一标识符，该标识可用于进一步过滤和路由结构化日志数据</li>
<li>type：Fluentd 内置的指令，tail 表示 Fluentd 从上次读取的位置通过 tail 不断获取数据，另外一个是 http 表示通过一个 GET 请求来收集数据。</li>
<li>path：<code>tail</code> 类型下的特定参数，告诉 Fluentd 采集 /var/log/containers 目录下的所有日志，这是 docker 在 Kubernetes 节点上用来存储运行容器 stdout 输出日志数据的目录。</li>
<li>pos_file：检查点，如果 Fluentd 程序重新启动了，它将使用此文件中的位置来恢复日志数据收集。</li>
<li>tag：用来将日志源与目标或者过滤器匹配的自定义字符串，Fluentd 匹配源/目标标签来路由日志数据。</li>
</ul>
<pre tabindex="0"><code>&lt;source&gt;
  @id fluentd-containers.log
  @type tail                             # Fluentd 内置的输入方式，其原理是不停地从源文件中获取新的日志,类似于tail命令
  path /var/log/containers/*.log         # 挂载的宿主机容器日志地址
  pos_file /var/log/es-containers.log.pos
  tag raw.kubernetes.*                   # 设置日志标签
  read_from_head true
  &lt;parse&gt;                                # 多行格式化成JSON
    @type multi_format                   # 使用 multi-format-parser 解析器插件
    &lt;pattern&gt;
      format json                        # JSON 解析器
      time_key time                      # 指定事件时间的时间字段
      time_format %Y-%m-%dT%H:%M:%S.%NZ  # 时间格式
    &lt;/pattern&gt;
    &lt;pattern&gt;
      format /^(?&lt;time&gt;.+) (?&lt;stream&gt;stdout|stderr) [^ ]* (?&lt;log&gt;.*)$/
      time_format %Y-%m-%dT%H:%M:%S.%N%:z
    &lt;/pattern&gt;
  &lt;/parse&gt;
&lt;/source&gt;
</code></pre><h3 id="过滤">过滤</h3>
<p>由于 Kubernetes 集群中应用太多，也还有很多历史数据，所以我们可以只将某些应用的日志进行收集，比如我们只采集具有<code> discovery-log=true</code> 这个 Label 标签的 Pod 日志，这个时候就需要使用 filter。</p>
<pre tabindex="0"><code># 删除无用的属性
&lt;filter kubernetes.**&gt;
  @type record_transformer
  remove_keys $.docker.container_id,$.kubernetes.container_image_id,$.kubernetes.pod_id,$.kubernetes.namespace_id,$.kubernetes.master_url,$.kubernetes.labels.pod-template-hash
&lt;/filter&gt;
# 只保留具有discovery-log=true标签的Pod日志
&lt;filter kubernetes.**&gt;
  @id filter_log
  @type grep
  &lt;regexp&gt;
    key $.kubernetes.labels.discovery-log
    pattern ^true$
  &lt;/regexp&gt;
&lt;/filter&gt;
</code></pre><h3 id="路由设置">路由设置</h3>
<pre tabindex="0"><code>&lt;match **&gt;
  @id elasticsearch
  @type elasticsearch
  @log_level info
  include_tag_key true
  type_name fluentd
  host &#34;#{ENV[&#39;OUTPUT_HOST&#39;]}&#34;
  port &#34;#{ENV[&#39;OUTPUT_PORT&#39;]}&#34;
  logstash_format true
  &lt;buffer&gt;
    @type file
    path /var/log/fluentd-buffers/kubernetes.system.buffer
    flush_mode interval
    retry_type exponential_backoff
    flush_thread_count 2
    flush_interval 5s
    retry_forever
    retry_max_interval 30
    chunk_limit_size &#34;#{ENV[&#39;OUTPUT_BUFFER_CHUNK_LIMIT&#39;]}&#34;
    queue_limit_length &#34;#{ENV[&#39;OUTPUT_BUFFER_QUEUE_LIMIT&#39;]}&#34;
    overflow_action block
  &lt;/buffer&gt;
&lt;/match&gt;
</code></pre><ul>
<li>match：标识一个目标标签，后面是一个匹配日志源的正则表达式，我们这里想要捕获所有的日志并将它们发送给 Elasticsearch，所以需要配置成**。</li>
<li>id：目标的一个唯一标识符。</li>
<li>type：支持的输出插件标识符，我们这里要输出到 Elasticsearch，所以配置成 elasticsearch，这是 Fluentd 的一个内置插件。</li>
<li>log_level：指定要捕获的日志级别，我们这里配置成 info，表示任何该级别或者该级别以上（INFO、WARNING、ERROR）的日志都将被路由到 Elsasticsearch。</li>
<li>host/port：定义 Elasticsearch 的地址，也可以配置认证信息，我们的 Elasticsearch 不需要认证，所以这里直接指定 host 和 port 即可。</li>
<li>logstash_format：Elasticsearch 服务对日志数据构建反向索引进行搜索，将 logstash_format 设置为 true，Fluentd 将会以 logstash 格式来转发结构化的日志数据。</li>
<li>Buffer： Fluentd 允许在目标不可用时进行缓存，比如，如果网络出现故障或者 Elasticsearch 不可用的时候。缓冲区配置也有助于降低磁盘的 IO。</li>
</ul>
<h3 id="开始部署fluentd">开始部署Fluentd</h3>
<p>要收集 Kubernetes 集群的日志，直接用<code>DasemonSet</code> 控制器来部署 Fluentd 应用，这样，它就可以从 Kubernetes 节点上采集日志，确保在集群中的每个节点上始终运行一个 Fluentd 容器。当然可以直接使用 Helm 来进行一键安装，为了能够了解更多实现细节，我们这里还是采用手动方法来进行安装。</p>
<ul>
<li><a class="link" href="https://docs.fluentd.org/container-deployment/kubernetes"  target="_blank" rel="noopener"
    >安装文档</a></li>
</ul>
<ol>
<li>首先创建<code>fluentd</code>的<code>configmap</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># fluentd-configmap.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd-conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># containerd的容器日志</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containerd.input.conf</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;source&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">      @id containerd-fluentd-beta.log         # 唯一Id：运行时+收集插件+环境
</span></span></span><span class="line"><span class="cl"><span class="sd">      @type tail                              # Fluentd 内置的输入方式，其原理是不停地从源文件中获取新的日志
</span></span></span><span class="line"><span class="cl"><span class="sd">      path /var/log/containers/*.log          # Docker 容器日志路径
</span></span></span><span class="line"><span class="cl"><span class="sd">      pos_file /var/log/es-containers.log.pos  # 记录读取的位置
</span></span></span><span class="line"><span class="cl"><span class="sd">      tag raw.kubernetes.*                    # 设置日志标签
</span></span></span><span class="line"><span class="cl"><span class="sd">      read_from_head true                     # 从头读取
</span></span></span><span class="line"><span class="cl"><span class="sd">      &lt;parse&gt;                                 # 多行格式化成JSON
</span></span></span><span class="line"><span class="cl"><span class="sd">        # 可以使用我们介绍过的 multiline 插件实现多行日志
</span></span></span><span class="line"><span class="cl"><span class="sd">        @type multi_format                    # 使用 multi-format-parser 解析器插件
</span></span></span><span class="line"><span class="cl"><span class="sd">        &lt;pattern&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">          format json                         # JSON解析器
</span></span></span><span class="line"><span class="cl"><span class="sd">          time_key time                       # 指定事件时间的时间字段
</span></span></span><span class="line"><span class="cl"><span class="sd">          time_format %Y-%m-%dT%H:%M:%S.%NZ   # 时间格式
</span></span></span><span class="line"><span class="cl"><span class="sd">        &lt;/pattern&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">        &lt;pattern&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">          format /^(?&lt;time&gt;.+) (?&lt;stream&gt;stdout|stderr) [^ ]* (?&lt;log&gt;.*)$/
</span></span></span><span class="line"><span class="cl"><span class="sd">          time_format %Y-%m-%dT%H:%M:%S.%N%:z
</span></span></span><span class="line"><span class="cl"><span class="sd">        &lt;/pattern&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">      &lt;/parse&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;/source&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    # 在日志输出中检测异常(多行日志)，并将其作为一条日志转发
</span></span></span><span class="line"><span class="cl"><span class="sd">    # https://github.com/GoogleCloudPlatform/fluent-plugin-detect-exceptions
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;match raw.kubernetes.**&gt;           # 匹配tag为raw.kubernetes.**日志信息
</span></span></span><span class="line"><span class="cl"><span class="sd">      @id raw.kubernetes
</span></span></span><span class="line"><span class="cl"><span class="sd">      @type detect_exceptions           # 使用detect-exceptions插件处理异常栈信息
</span></span></span><span class="line"><span class="cl"><span class="sd">      remove_tag_prefix raw             # 移除 raw 前缀
</span></span></span><span class="line"><span class="cl"><span class="sd">      message log
</span></span></span><span class="line"><span class="cl"><span class="sd">      multiline_flush_interval 5
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;/match&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;filter **&gt;  # 拼接日志
</span></span></span><span class="line"><span class="cl"><span class="sd">      @id filter_concat
</span></span></span><span class="line"><span class="cl"><span class="sd">      @type concat                # Fluentd Filter 插件，用于连接多个日志中分隔的多行日志
</span></span></span><span class="line"><span class="cl"><span class="sd">      key message
</span></span></span><span class="line"><span class="cl"><span class="sd">      multiline_end_regexp /\n$/  # 以换行符“\n”拼接
</span></span></span><span class="line"><span class="cl"><span class="sd">      separator &#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;/filter&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    # 添加 Kubernetes metadata 数据
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;filter kubernetes.**&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">      @id filter_kubernetes_metadata
</span></span></span><span class="line"><span class="cl"><span class="sd">      @type kubernetes_metadata
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;/filter&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    # 修复 ES 中的 JSON 字段
</span></span></span><span class="line"><span class="cl"><span class="sd">    # 插件地址：https://github.com/repeatedly/fluent-plugin-multi-format-parser
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;filter kubernetes.**&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">      @id filter_parser
</span></span></span><span class="line"><span class="cl"><span class="sd">      @type parser                # multi-format-parser多格式解析器插件
</span></span></span><span class="line"><span class="cl"><span class="sd">      key_name log                # 在要解析的日志中指定字段名称
</span></span></span><span class="line"><span class="cl"><span class="sd">      reserve_data true           # 在解析结果中保留原始键值对
</span></span></span><span class="line"><span class="cl"><span class="sd">      remove_key_name_field true  # key_name 解析成功后删除字段
</span></span></span><span class="line"><span class="cl"><span class="sd">      &lt;parse&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">        @type multi_format
</span></span></span><span class="line"><span class="cl"><span class="sd">        &lt;pattern&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">          format json
</span></span></span><span class="line"><span class="cl"><span class="sd">        &lt;/pattern&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">        &lt;pattern&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">          format none
</span></span></span><span class="line"><span class="cl"><span class="sd">        &lt;/pattern&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">      &lt;/parse&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;/filter&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    # 删除一些多余的属性
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;filter kubernetes.**&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">      @type record_transformer
</span></span></span><span class="line"><span class="cl"><span class="sd">      remove_keys $.docker.container_id,$.kubernetes.container_image_id,$.kubernetes.pod_id,$.kubernetes.namespace_id,$.kubernetes.master_url,$.kubernetes.labels.pod-template-hash
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;/filter&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    # 只保留具有kubernetes.log.kubernetes.log/fluentd标签的Pod日志
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;filter kubernetes.**&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">      @id filter_log
</span></span></span><span class="line"><span class="cl"><span class="sd">      @type grep
</span></span></span><span class="line"><span class="cl"><span class="sd">      &lt;regexp&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">        key $.kubernetes.labels.kubernetes.log/fluentd
</span></span></span><span class="line"><span class="cl"><span class="sd">        pattern ^true$
</span></span></span><span class="line"><span class="cl"><span class="sd">      &lt;/regexp&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;/filter&gt;</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">###### 监听配置，一般用于日志聚合用 ######</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">forward.input.conf</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    # 监听通过TCP发送的消息
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;source&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">      @id forward
</span></span></span><span class="line"><span class="cl"><span class="sd">      @type forward
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;/source&gt;</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">output.conf</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;match **&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">      @id elasticsearch
</span></span></span><span class="line"><span class="cl"><span class="sd">      @type elasticsearch
</span></span></span><span class="line"><span class="cl"><span class="sd">      @log_level info
</span></span></span><span class="line"><span class="cl"><span class="sd">      include_tag_key true
</span></span></span><span class="line"><span class="cl"><span class="sd">      host elasticsearch-client
</span></span></span><span class="line"><span class="cl"><span class="sd">      port 9200
</span></span></span><span class="line"><span class="cl"><span class="sd">      user elastic # FLUENT_ELASTICSEARCH_USER | FLUENT_ELASTICSEARCH_PASSWORD
</span></span></span><span class="line"><span class="cl"><span class="sd">      password elastic-master
</span></span></span><span class="line"><span class="cl"><span class="sd">      logstash_format true
</span></span></span><span class="line"><span class="cl"><span class="sd">      logstash_prefix kubernetes-cluster
</span></span></span><span class="line"><span class="cl"><span class="sd">      request_timeout 30s
</span></span></span><span class="line"><span class="cl"><span class="sd">      &lt;buffer&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">        @type file
</span></span></span><span class="line"><span class="cl"><span class="sd">        path /var/log/fluentd-buffers/kubernetes.system.buffer
</span></span></span><span class="line"><span class="cl"><span class="sd">        flush_mode interval
</span></span></span><span class="line"><span class="cl"><span class="sd">        retry_type exponential_backoff
</span></span></span><span class="line"><span class="cl"><span class="sd">        flush_thread_count 2
</span></span></span><span class="line"><span class="cl"><span class="sd">        flush_interval 5s
</span></span></span><span class="line"><span class="cl"><span class="sd">        retry_forever
</span></span></span><span class="line"><span class="cl"><span class="sd">        retry_max_interval 30
</span></span></span><span class="line"><span class="cl"><span class="sd">        chunk_limit_size 2M
</span></span></span><span class="line"><span class="cl"><span class="sd">        queue_limit_length 8
</span></span></span><span class="line"><span class="cl"><span class="sd">        overflow_action block
</span></span></span><span class="line"><span class="cl"><span class="sd">      &lt;/buffer&gt;
</span></span></span><span class="line"><span class="cl"><span class="sd">    &lt;/match&gt;</span><span class="w">    
</span></span></span></code></pre></div><ol start="2">
<li>创建相关的Rbac权限</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">namespaces</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">verbs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">get</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">watch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-logging</span><span class="w">
</span></span></span></code></pre></div><ol start="3">
<li>创建<code>fluentd</code>的<code>daemonset</code></li>
</ol>
<blockquote>
<p>这个是最新的版本还在研究中,用下面的版本。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">DaemonSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd-logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd-logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd-logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceAccount</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceAccountName</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tolerations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">node-role.kubernetes.io/control-plane</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">effect</span><span class="p">:</span><span class="w"> </span><span class="l">NoSchedule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">node-role.kubernetes.io/master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">effect</span><span class="p">:</span><span class="w"> </span><span class="l">NoSchedule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">fluent/fluentd-kubernetes-daemonset:v1-debian-elasticsearch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">K8S_NODE_NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">spec.nodeName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w">  </span><span class="l">FLUENT_ELASTICSEARCH_HOST</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;elasticsearch-client-headless.kube-logging.svc.cluster.local&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w">  </span><span class="l">FLUENT_ELASTICSEARCH_PORT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;9200&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">FLUENT_ELASTICSEARCH_SCHEME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;http&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># Option to configure elasticsearch plugin with self signed certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># ================================================================</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">FLUENT_ELASTICSEARCH_SSL_VERIFY</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># Option to configure elasticsearch plugin with tls</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># ================================================================</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">FLUENT_ELASTICSEARCH_SSL_VERSION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;TLSv1_2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># X-Pack Authentication</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># =====================</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">FLUENT_ELASTICSEARCH_USER</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;elastic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">FLUENT_ELASTICSEARCH_PASSWORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;elastic-master&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">FLUENT_ELASTICSEARCH_LOGSTASH_PREFIX</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		    </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;kubernetes-cluster&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">200Mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">100m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">200Mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">varlog</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/log</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentconfig</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/fluentd/etc/custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">dockercontainerlogdirectory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/log/pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">terminationGracePeriodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">varlog</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/var/log</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentconfig</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd-conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">dockercontainerlogdirectory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/var/log/pods</span><span class="w">
</span></span></span></code></pre></div><p>麻烦用下面的进行部署</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">DaemonSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kubernetes.io/cluster-service</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">kubernetes.io/cluster-service</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tolerations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">node-role.kubernetes.io/master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">effect</span><span class="p">:</span><span class="w"> </span><span class="l">NoSchedule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceAccountName</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">quay.io/fluentd_elasticsearch/fluentd:v3.4.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentconfig</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/fluent/config.d</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">varlog</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/var/log</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentconfig</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">fluentd-conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">varlog</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/var/log</span><span class="w">
</span></span></span></code></pre></div><h2 id="关于保留指定标签的问题">关于保留指定标签的问题</h2>
<p>部署完成以后我发现一直有一个小问题，就是无论我如何设置<code>label</code>都无法让<code>elasticsearch</code>获取到正常的数据。</p>
<p>根据这个问题，我进行了更细致的排查。现在得出了如下的结论。</p>
<ol>
<li>
<p>可能是由于我对知识的缺乏，我定义的是<code>Deployment</code>当中的<code>label</code>标签，但是这个<code>label</code>标识只作用于<code>Deployment</code>本身，通常用作<code>kubernete</code>集群中的选择器匹配，例如我们的<code>Service</code>要去匹配某个<code>Deployment</code>。</p>
</li>
<li>
<p>关于<code>spec.template.metadata.labels</code>，我发现这个才是我们正确要匹配的<code>label</code>标签选项，因为这些标签用于标识<code>Deployment</code>所创建的<code>Pod</code></p>
</li>
<li>
<p>所以最后总结出来的问题就是，我们上面的<code>fluentd</code>中写的过滤插件<code> key $.kubernetes.labels.kubernetes.log/fluentd</code>中所匹配的<code>label</code>标签应当是<code>spec.template.metadata.labels</code>的<code>label</code></p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">canary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">creationTimestamp</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">canary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">kubernetes.log/fluentd</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Kubernetes的架构设计和对象属性基本理解</title>
      <link>https://blog.mletter.cn/tech/kubernetes/architectural-design/</link>
      <pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/architectural-design/</guid>
      <description>主要讲解kubernetes的组成和组件的具体作用</description>
      <content:encoded><![CDATA[<h2 id="为什么需要kubernetes">为什么需要kubernetes？</h2>
<ul>
<li>大规模多节点容器调度</li>
<li>快速扩缩容</li>
<li>故障自愈</li>
<li>弹性伸缩</li>
<li>技术趋势</li>
<li>一致性、不锁定
早期型多的一些服务都属于单体服务、单节点、单进程的一种单体服务架构，后续随着技术的发展衍生出了容器技术。容器技术其实也不能满足我们的多节点、分布式的应用架构体系，从而衍生出了<code>kubernetes</code>容器编排引擎。</li>
</ul>
<p>那么我们来看一下早期单体容器架构</p>
<blockquote>
<p>其实对于容器化技术带来了那些优势呢?</p>
</blockquote>
<ol>
<li>其实我觉得容器化带来的最大的优势就是交付和部署的优势</li>
</ol>
<p><!doctype html>
<html lang="en">
    <head>
        <meta
            name="viewport"
            content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"
        />
        <script src="https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/jquery/3.6.0/jquery.min.js"></script>
        <link
            href="https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/nanogallery2/3.0.5/css/nanogallery2.min.css"
            rel="stylesheet"
        />
        <script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/nanogallery2/3.0.5/jquery.nanogallery2.min.js"></script>
    </head>
    <body>
        <div
            data-nanogallery2='{
    "itemsBaseURL":               "https://nanogallery2.nanostudio.org/samples",
    "thumbnailDisplayTransition":          "slideUp2",
	"thumbnailHeight":    200,
    "thumbnailWidth":     200,
    "thumbnailAlignment": "fillWidth",
    "thumbnailOpenInLightox": true,
    "breadcrumbOnlyCurrentLevel": true,
    "thumbnailLabel":     { "valign": "bottom", "position": "overImage", "hideIcons": true },
    "galleryMosaic" :   [
      { "c": 1, "r": 1, "w": 2, "h": 2 },
      { "c": 3, "r": 1, "w": 1, "h": 1 },
      { "c": 3, "r": 2, "w": 1, "h": 1 },
      { "c": 4, "r": 1, "w": 1, "h": 1 },
      { "c": 4, "r": 2, "w": 1, "h": 1 }
    ],
    "galleryLastRowFull" : true,
     "thumbnailDisplayTransitionDuration":  500,
     "thumbnailDisplayInterval":            30,
     "galleryDisplayTransition":            "rotateX",
     "galleryDisplayTransitionDuration":    500,
     "galleryDisplayMode": "rows",
     "thumbnailDisplayOutsideScreen": "true",
     "eventsDebounceDelay": 10,
     "thumbnailL1BorderHorizontal": 0,
     "thumbnailL1BorderVertical": 0,
     "thumbnailLabel": {
        "titleFontSize": "0.6em"
     },
     "thumbnailHoverEffect2": "image_scale_1.00_1.10|label_backgroundColor_rgba(0,0,0,0)_rgba(255,255,255,0)",
     "galleryTheme": {
        "thumbnail": {
            "borderRadius": "8px"
        }
     },
     "thumbnailToolbarImage": {
        "topLeft": "",
        "topRight": "",
        "bottomLeft": "",
        "bottomRight": ""
     },
     "viewerToolbar":   {
        "display": true,
        "standard": "label"
     },
     "viewerTools":     {
        "topLeft":    "pageCounter, playPauseButton",
        "topRight":   "downloadButton, rotateLeft, zoomButton, fullscreenButton, closeButton"
     },
     "viewerGalleryTWidth": 40,
     "viewerGalleryTHeight": 40
}'
        >
            

<a href="https://img13.360buyimg.com/ddimg/jfs/t1/164078/6/34165/22231/654ba81fFe1bf21d7/9d02bd791b795b3b.jpg" data-ngThumb="https://img13.360buyimg.com/ddimg/jfs/t1/164078/6/34165/22231/654ba81fFe1bf21d7/9d02bd791b795b3b.jpg">容器单点架构流程图</a>



        </div>
    </body>
</html>

那么随之而来带来的问题是:</p>
<blockquote>
<p>那么由于Docker的容器镜像可以在A、B、C任意一台机器上运行,那么是否可以当A机器所运行的镜像挂掉以后自动的帮我在B机器上进行重启呢?</p>
</blockquote>
<p>okey 带着这个问题 一起往下进行。</p>
<h2 id="kubernes组件">kubernes组件</h2>
<p>先看一张官方给出的kubernetes的架构图
图中列出了kubernetes的组成以及相对应的组件</p>
<ul>
<li>ControlPlane: 控制平面节点</li>
<li>Node: 工作节点</li>
<li>Kubelet: 用于控制<code>staticPod</code>,其主要就是用来控制静态Pod，因为静态Pod不受<code>ApiServer</code>的影响。
<img style="max-width: 100%; height: auto;" loading="lazy" loading="lazy" src="https://kubernetes.io/images/docs/components-of-kubernetes.svg"></li>
</ul>
<p>Oh 不插一句嘴 学到了一个新的命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># jq命令是一个用于处理json的命令</span>
</span></span><span class="line"><span class="cl">kubectl get deploy wecho-canary -o json <span class="p">|</span> jq .spec
</span></span></code></pre></div><p>okey 继续&hellip;
我们时长谈起到的<code>control-plane</code>实际上并不是一台机器他只是一个抽象出来的概念,实际上我们是在说所谓的<code>control-plane</code>层面的组件。也就是说这些组件可以运行在控制面的机器上同时也可以运行在Node机器上</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="Pasted image 20231108213644.png" loading="lazy" src="https://img14.360buyimg.com/ddimg/jfs/t1/231911/36/2404/28759/654ba847Fc032ef5e/32d3a1f4a8f2b4c4.jpg"></p>
<h2 id="kubernetes核心概念">kubernetes核心概念</h2>
<ul>
<li><code>ResourceObject</code>: 是我认为相对而言kubernetes集群当中比较核心的资源对象,其实也就是我们所说的<code>Pod</code>、<code>Deployment</code>、<code>Daemonset</code>等kubernetes的资源类型
对于一个Pod而言,kubernetes对其定义的键值无非以下的几种</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span><span class="err">root@Online-Beijing-master</span><span class="mi">1</span> <span class="err">~</span><span class="p">]</span><span class="err">#</span> <span class="err">kubectl</span> <span class="err">get</span> <span class="err">deploy</span> <span class="err">wecho-canary</span> <span class="err">-o</span> <span class="err">json</span> <span class="err">|</span> <span class="err">jq</span> <span class="err">keys</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;apiVersion&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;kind&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;metadata&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;spec&#34;</span><span class="p">,</span>   <span class="c1">// spec描述的是Pod预期的状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="s2">&#34;status&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>你可以通过<code>kubectl api-resource</code>来获取kubernetes相对应的资源类型。</p>
<h3 id="kubernets的资源提交">kubernets的资源提交</h3>
<p>我们平时使用的<code>kubectl run nginx-$RANDOM --image=&quot;nginx:alpine&quot;</code>究竟是执行了什么样的内容？</p>
<p>正常来说<code>Api-Server</code>本身就是服务,那么当我把请求发送给<code>Api-Server</code>的时候,我是以什么样的请求内容进行了提交?那<code>Api-Server</code>接收了我的请求内容又对我的请求内容做出了什么样的处理呢?</p>
<p>首先我们来看实际作为客户端,也就是<code>client</code>端提交的请求</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 可以通过--dry-run=client来模拟客户端提交的请求内容</span>
</span></span><span class="line"><span class="cl">kubectl run nginx-<span class="nv">$RANDOM</span> --image<span class="o">=</span><span class="s2">&#34;nginx:alpine&#34;</span> --dry-run<span class="o">=</span>client -ojson -v6
</span></span></code></pre></div><p>正常的返回响应应该如下,这是一个我们正常通过kubelet创建一个Pod所发送的请求体内容,但作为clinet只会在我们本地进行处理,所以你也可以看到返回的结构内容中带有<code>I1108 21:54:49.922270 1219589 loader.go:374] Config loaded from file:  /root/.kube/config</code>,也就证明了它并没有像Api-Server发送任何请求,只是读取了相关的配置信息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;kind&#34;</span><span class="p">:</span> <span class="s2">&#34;Pod&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s2">&#34;v1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;metadata&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;nginx-27147&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;creationTimestamp&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;labels&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;run&#34;</span><span class="p">:</span> <span class="s2">&#34;nginx-27147&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;spec&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;containers&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;nginx-27147&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;image&#34;</span><span class="p">:</span> <span class="s2">&#34;nginx:alpine&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;resources&#34;</span><span class="p">:</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;restartPolicy&#34;</span><span class="p">:</span> <span class="s2">&#34;Always&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;dnsPolicy&#34;</span><span class="p">:</span> <span class="s2">&#34;ClusterFirst&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>很好上面我们模拟了一个<code>client</code>端所生产的内容,那么下面我们看看当实际发送给<code>Api-Server</code>的时候产生了哪些内容</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl run nginx-<span class="nv">$RANDOM</span> --image<span class="o">=</span><span class="s2">&#34;nginx:alpine&#34;</span> --dry-run<span class="o">=</span>server -ojson -v6
</span></span></code></pre></div><p>我们可以清晰地看到日志的输出</p>
<ol>
<li>首先第一步加载了kubernetes相关的配置文件信息。</li>
<li>发送了相关请求(盲猜应该是验证api-server是否正常)</li>
<li>向<code>https://resk8s.api.beijing.io:8443/api/v1/namespaces/default/pods?dryRun=All&amp;fieldManager=kubectl-run</code>发送了POST请求用于创建Pod</li>
</ol>
<pre tabindex="0"><code class="language-log" data-lang="log">I1108 21:58:14.866131 1221713 loader.go:374] Config loaded from file:  /root/.kube/config
I1108 21:58:14.884329 1221713 round_trippers.go:553] GET https://resk8s.api.beijing.io:8443/openapi/v2?timeout=32s 200 OK in 15 milliseconds
I1108 21:58:14.946553 1221713 round_trippers.go:553] POST https://resk8s.api.beijing.io:8443/api/v1/namespaces/default/pods?dryRun=All&amp;fieldManager=kubectl-run 201 Created in 15 milliseconds
</code></pre><p>事实上我们由此可见发送到<code>Api-Server</code>的请求内容多了很多东西</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;kind&#34;</span><span class="p">:</span> <span class="s2">&#34;Pod&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s2">&#34;v1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;metadata&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;nginx-14483&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;namespace&#34;</span><span class="p">:</span> <span class="s2">&#34;default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;uid&#34;</span><span class="p">:</span> <span class="s2">&#34;d27e1836-8bac-40d4-805b-420f4bca4ee1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;creationTimestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2023-11-08T14:05:36Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;labels&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;run&#34;</span><span class="p">:</span> <span class="s2">&#34;nginx-14483&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;annotations&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;kubernetes.customized/fabric-networks&#34;</span><span class="p">:</span> <span class="s2">&#34;default&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;spec&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;volumes&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;kube-api-access-vwtvp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;projected&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&#34;sources&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&#34;serviceAccountToken&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                <span class="nt">&#34;expirationSeconds&#34;</span><span class="p">:</span> <span class="mi">3607</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;token&#34;</span>
</span></span><span class="line"><span class="cl">                            <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&#34;configMap&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;kube-root-ca.crt&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="nt">&#34;items&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                        <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;ca.crt&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;ca.crt&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                <span class="p">]</span>
</span></span><span class="line"><span class="cl">                            <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="nt">&#34;downwardAPI&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                <span class="nt">&#34;items&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                        <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;namespace&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="nt">&#34;fieldRef&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                            <span class="nt">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s2">&#34;v1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                            <span class="nt">&#34;fieldPath&#34;</span><span class="p">:</span> <span class="s2">&#34;metadata.namespace&#34;</span>
</span></span><span class="line"><span class="cl">                                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                <span class="p">]</span>
</span></span><span class="line"><span class="cl">                            <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="p">],</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&#34;defaultMode&#34;</span><span class="p">:</span> <span class="mi">420</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;containers&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;nginx-14483&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;image&#34;</span><span class="p">:</span> <span class="s2">&#34;nginx:alpine&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;resources&#34;</span><span class="p">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;volumeMounts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;kube-api-access-vwtvp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;readOnly&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;mountPath&#34;</span><span class="p">:</span> <span class="s2">&#34;/var/run/secrets/kubernetes.io/serviceaccount&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;terminationMessagePath&#34;</span><span class="p">:</span> <span class="s2">&#34;/dev/termination-log&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;terminationMessagePolicy&#34;</span><span class="p">:</span> <span class="s2">&#34;File&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;imagePullPolicy&#34;</span><span class="p">:</span> <span class="s2">&#34;IfNotPresent&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;restartPolicy&#34;</span><span class="p">:</span> <span class="s2">&#34;Always&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;terminationGracePeriodSeconds&#34;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;dnsPolicy&#34;</span><span class="p">:</span> <span class="s2">&#34;ClusterFirst&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;serviceAccountName&#34;</span><span class="p">:</span> <span class="s2">&#34;default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;serviceAccount&#34;</span><span class="p">:</span> <span class="s2">&#34;default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;securityContext&#34;</span><span class="p">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;schedulerName&#34;</span><span class="p">:</span> <span class="s2">&#34;default-scheduler&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;tolerations&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;node.kubernetes.io/not-ready&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;Exists&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;effect&#34;</span><span class="p">:</span> <span class="s2">&#34;NoExecute&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;tolerationSeconds&#34;</span><span class="p">:</span> <span class="mi">300</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;node.kubernetes.io/unreachable&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;Exists&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;effect&#34;</span><span class="p">:</span> <span class="s2">&#34;NoExecute&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;tolerationSeconds&#34;</span><span class="p">:</span> <span class="mi">300</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;priority&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;dnsConfig&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;options&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;single-request-reopen&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;enableServiceLinks&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;preemptionPolicy&#34;</span><span class="p">:</span> <span class="s2">&#34;PreemptLowerPriority&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;phase&#34;</span><span class="p">:</span> <span class="s2">&#34;Pending&#34;</span><span class="p">,</span> <span class="c1">// 可以看到当前处于Pending阶段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nt">&#34;qosClass&#34;</span><span class="p">:</span> <span class="s2">&#34;BestEffort&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p>另外: 当你需要创建资源类型的时候,我并不建议你从头开始去编写相关文件,可以灵活的应用<code>kubectl run</code>来进行填充相关的字段信息。</p>
</blockquote>
<h2 id="kubernetes设计理念">kubernetes设计理念</h2>
<ul>
<li>声明式：典型就是在资源文件中进行声明</li>
<li>无侵入性</li>
<li>可移植: 所有符合kubernetes标准的kubernetes平台都可以进行迁移</li>
<li>显示接口：所有的操作都是开放性的,不会存在私有接口,无论是<code>Api-Server</code>或者<code>Clinet-go</code>所操作的接口都是一模一样的。</li>
</ul>
<h2 id="创建资源的工作流程">创建资源的工作流程</h2>
<ol>
<li>首先当用户的请求进入到<code>Api-Server</code>后会进入到<code>Authorization</code>认证授权的处理接口实际上就是加载我们的<code>config</code>配置文件,其具体代码在<code>loader.go:372</code>进行实现
<!doctype html>
<html lang="en">
    <head>
        <meta
            name="viewport"
            content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"
        />
        <script src="https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/jquery/3.6.0/jquery.min.js"></script>
        <link
            href="https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/nanogallery2/3.0.5/css/nanogallery2.min.css"
            rel="stylesheet"
        />
        <script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/nanogallery2/3.0.5/jquery.nanogallery2.min.js"></script>
    </head>
    <body>
        <div
            data-nanogallery2='{
    "itemsBaseURL":               "https://nanogallery2.nanostudio.org/samples",
    "thumbnailDisplayTransition":          "slideUp2",
	"thumbnailHeight":    200,
    "thumbnailWidth":     200,
    "thumbnailAlignment": "fillWidth",
    "thumbnailOpenInLightox": true,
    "breadcrumbOnlyCurrentLevel": true,
    "thumbnailLabel":     { "valign": "bottom", "position": "overImage", "hideIcons": true },
    "galleryMosaic" :   [
      { "c": 1, "r": 1, "w": 2, "h": 2 },
      { "c": 3, "r": 1, "w": 1, "h": 1 },
      { "c": 3, "r": 2, "w": 1, "h": 1 },
      { "c": 4, "r": 1, "w": 1, "h": 1 },
      { "c": 4, "r": 2, "w": 1, "h": 1 }
    ],
    "galleryLastRowFull" : true,
     "thumbnailDisplayTransitionDuration":  500,
     "thumbnailDisplayInterval":            30,
     "galleryDisplayTransition":            "rotateX",
     "galleryDisplayTransitionDuration":    500,
     "galleryDisplayMode": "rows",
     "thumbnailDisplayOutsideScreen": "true",
     "eventsDebounceDelay": 10,
     "thumbnailL1BorderHorizontal": 0,
     "thumbnailL1BorderVertical": 0,
     "thumbnailLabel": {
        "titleFontSize": "0.6em"
     },
     "thumbnailHoverEffect2": "image_scale_1.00_1.10|label_backgroundColor_rgba(0,0,0,0)_rgba(255,255,255,0)",
     "galleryTheme": {
        "thumbnail": {
            "borderRadius": "8px"
        }
     },
     "thumbnailToolbarImage": {
        "topLeft": "",
        "topRight": "",
        "bottomLeft": "",
        "bottomRight": ""
     },
     "viewerToolbar":   {
        "display": true,
        "standard": "label"
     },
     "viewerTools":     {
        "topLeft":    "pageCounter, playPauseButton",
        "topRight":   "downloadButton, rotateLeft, zoomButton, fullscreenButton, closeButton"
     },
     "viewerGalleryTWidth": 40,
     "viewerGalleryTHeight": 40
}'
        >
            

<a href="https://img12.360buyimg.com/ddimg/jfs/t1/228353/25/2337/91698/654ba7e1Fcf72fe29/40d7e21b0d3e5f2d.jpg" data-ngThumb="https://img12.360buyimg.com/ddimg/jfs/t1/228353/25/2337/91698/654ba7e1Fcf72fe29/40d7e21b0d3e5f2d.jpg">创建资源的工作流程</a>



        </div>
    </body>
</html>
</li>
</ol>
<h2 id="服务发现原理和应用">服务发现原理和应用</h2>
<h3 id="kubernetes中pod的通信">kubernetes中Pod的通信</h3>
<ul>
<li>每个Pod都有自己的IP分配</li>
<li>Pod间的可以通过IP进行通信</li>
<li>Pod的IP是可变的</li>
<li>Pod的IP通常不能被提前获取,一般都是网络插件进行分配</li>
</ul>
<h3 id="kubernetes的service通信">kubernetes的Service通信</h3>
<p>它是一种抽象，帮助你将 Pod 集合在网络上公开出去。 每个 Service 对象定义端点的一个逻辑集合（通常这些端点就是 Pod）以及如何访问到这些 Pod 的策略。
我们通常可以使用以下命令来简单的暴露一个<code>Service</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl expose deploy/nginx --port<span class="o">=</span><span class="m">80</span>
</span></span></code></pre></div><p>通常来说我们访问某个服务都是访问服务的IP地址，当然了,在kubernetes中访问<code>Service</code>对应的地址也可以访问到服务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get service</span>
</span></span><span class="line"><span class="cl">NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>             AGE
</span></span><span class="line"><span class="cl">wecho-canary                ClusterIP   10.10.166.79    &lt;none&gt;        80/TCP,9113/TCP     69d
</span></span><span class="line"><span class="cl">kubernetes                  ClusterIP   10.10.0.1       &lt;none&gt;        443/TCP             279d
</span></span></code></pre></div><p>实际上也就是说当我需要访问<code>wecho-canary</code>这个服务的时候,我无需关心他后端end如何进行变化,我只需要记住访问<code>wecho-canary</code>的<code>Service</code>所给出的<code>ClusterIP</code>即可进行访问到相应的服务。</p>
<p>另外的一种方式就是通过我们的<code>Service</code>名称来进行访问，下面说一下具体是如何通过<code>Service</code>名称进行访问的。</p>
<blockquote>
<p>我们假设使用上面的<code>wecho-canary</code>名称进行一次访问</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -v wecho-canary <span class="c1"># 假设访问正常</span>
</span></span></code></pre></div><p>很简单,大家都知道当我们访问一个域名的时候背后肯定又DNS服务器来解析其所对应的IP地址,那么其实在kubernetes当中也有一个内部的DNS服务器,名字叫做<code>kube-dns</code>
我们可以通过<code>kubectl get svc -A </code>进行查看,其中所指定的<code>10.10.0.10</code>就是我们kube-dns的IP地址.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kube-system    kube-dns                        ClusterIP   10.10.0.10      &lt;none&gt;        53/UDP,53/TCP,9153/TCP                         279d
</span></span></code></pre></div><p>看到我们<code>kube-dns</code>有以下端点</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get ep -n kube-system | grep kube-dns</span>
</span></span><span class="line"><span class="cl">kube-dns             10.10.151.159:53,10.10.4.95:53,10.10.151.159:53 + <span class="m">3</span> more...   279d
</span></span><span class="line"><span class="cl">kube-dns-upstream    10.10.151.159:53,10.10.4.95:53,10.10.151.159:53 + <span class="m">1</span> more...   81d
</span></span></code></pre></div><p>其次可以看到我们容器内所对应的<code>resolv.conf</code>所写内容的配置文件</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">search jiashicang.svc.cluster.local svc.cluster.local cluster.local
nameserver 169.254.20.10
options ndots:5 single-request-reopen
</code></pre><p>由于我使用了<code>NodeLocalDns</code>所以我这个地方的nameserver不太一样,关于<code>NodeLocalDns</code>我们后续再说。
总结以下几点:</p>
<blockquote>
<ol>
<li>当我们访问<code>wecho-canary</code>的时候实际上是访问了<code>wecho-canary.default.cluster.local.svc</code>,即<code>ServiceName.Namespace.cluster.local.svc</code></li>
<li>所有的解析域名请求都会请求到<code>kube-dns</code>当中,当<code>kube-dns</code>无法完成解析的时候,我们会将请求<code>forward</code>到本地的解析文件当中,如果本地解析文件也无法解析则认为失败。典型的就是超时、无法解析等问题。</li>
<li>Service通过监视API server的数据变化来感知后端Pod的变化,并及时更新负载均衡规则。具体来说,Kubernetes ApiServer负责管理集群状态,它会记录每一个对象(包括Pod)的Spec和Status。Service对象使用ApiServer的watch接口,监视后端关联Pod对象的变化事件。比如Pod实例加入或销毁时,ApiServer会主动通知Service。一旦检测到Pod变化,Service会立即使用新的Pod列表,重新计算并更新自己负载均衡的端口转发规则。例如使用iptables规则或IPVS表更新后端目标地址。这样,无论Pod是动态伸缩还是故障转移,Service都能即时感知,保持负载均衡入口地址的高可靠性。这就是Service如何实现动态更新负载均衡规则的原理。</li>
</ol>
</blockquote>
<h3 id="service类型">Service类型</h3>
<ul>
<li>ClusterIP: 通过集群的内部IP公开<code>Service</code>，选择该值时<code>Service</code>只能够在集群内部访问。这也是你没有为服务显式指定<code>type</code>时使用的默认值。</li>
<li>NodePort: 通过每个节点上的IP和静态端口<code>NodePort</code>公开 Service。为了让Service可通过节点端口访问，Kubernetes 会为 Service配置集群IP地址， 相当于你请求了type:ClusterIP的服务。</li>
<li>LoadBalancer:使用云平台的负载均衡器向外部公开<code>Service</code>,一般来说都用在云厂商才会使用<code>LoadBalancer</code></li>
<li>ExternalName:将服务映射到<code>externalName</code>字段的内容 例如，映射到主机名:<code>api.foo.bar.example</code>,该映射将集群的 DNS 服务器配置为返回具有该外部主机名值的CNAME记录。</li>
</ul>
<p>常用的暴露Service的方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl expose deploy/nginx --port<span class="o">=</span><span class="m">80</span> --type<span class="o">=</span>NodePort
</span></span></code></pre></div><p>哦,对了,推荐一个开源的LB插件</p>
<ul>
<li>Metallb: <a class="link" href="https://github.com/metallb/metallb"  target="_blank" rel="noopener"
    >Github</a></li>
</ul>
<h3 id="服务发现和流量路由">服务发现和流量路由</h3>
<p>总的来说我们分为一下几点吧</p>
<ol>
<li>Pod之间的流量通信:
<ol>
<li>IP直连的方式: 不推荐这种方式,因为Pod的IP严格意义上来说对于服务版本更新生命周期相对较短。</li>
<li>ClusterIP： 相对于比较推荐通过指定ServiceName的方式来绑定活着监听某种服务</li>
</ol>
</li>
<li>外部访问Pod的通信
<ol>
<li>NodePort: 通过暴露外部端口的方式来进行Pod的访问</li>
<li>LoadBalancer: 通过对Service绑定LB的方式进行Pod的访问</li>
</ol>
</li>
<li>Pod访问外部通信:
<ol>
<li>ExternalName: 将 Service 映射到 DNS 名称</li>
<li>HeadlessService: 当你不需要负载均衡，也不需要单独的 ServiceIP,你可以使用<code>HeadlessService</code></li>
</ol>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 下面是ExternalName的简单实例</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">prod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ExternalName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">externalName</span><span class="p">:</span><span class="w"> </span><span class="l">my.database.example.com</span><span class="w">
</span></span></span></code></pre></div><p>一般来说Kubernetes的内部DNS记录有两种规范</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">PodIP.Namespace.pod.cluster-domain.example
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">ServiceName.Namespace.svc.cluster-domain.example
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>OpenEBS存储的使用</title>
      <link>https://blog.mletter.cn/tech/kubernetes/openebs/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/openebs/</guid>
      <description>&lt;h1 id=&#34;openebs存储使用&#34;&gt;OpenEBS存储使用&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://openebs.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenEBS&lt;/a&gt; 是一种模拟了 AWS 的 EBS、阿里云的云盘等块存储实现的基于容器的存储开源软件。OpenEBS 是一种基于 CAS(Container Attached Storage) 理念的容器解决方案，其核心理念是存储和应用一样采用微服务架构，并通过 Kubernetes 来做资源编排。其架构实现上，每个卷的 Controller 都是一个单独的 Pod，且与应用 Pod 在同一个节点，卷的数据使用多个 Pod 进行管理。&lt;/p&gt;
&lt;p&gt;&lt;img style=&#34;max-width: 100%; height: auto;&#34; loading=&#34;lazy&#34; alt=&#34;openEBS组件&#34; loading=&#34;lazy&#34; src=&#34;https://openebs.io/docs/assets/images/control-plane-overview-93c59878e3356a11f03029dd0fc1cd6b.svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;OpenEBS 有很多组件，可以分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制平面组件 - 管理 OpenEBS 卷容器，通常会用到容器编排软件的功能&lt;/li&gt;
&lt;li&gt;数据平面组件 - 为应用程序提供数据存储，包含 Jiva 和 cStor 两个存储后端&lt;/li&gt;
&lt;li&gt;节点磁盘管理器 - 发现、监控和管理连接到 Kubernetes 节点的媒体&lt;/li&gt;
&lt;li&gt;与云原生工具的整合 - 与 Prometheus、Grafana、Fluentd 和 Jaeger 进行整合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;控制平面&#34;&gt;控制平面&lt;/h2&gt;
&lt;p&gt;OpenEBS 上下文中的控制平面是指部署在集群中的一组工具或组件，它们负责：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理 kubernetes 工作节点上可用的存储&lt;/li&gt;
&lt;li&gt;配置和管理数据引擎&lt;/li&gt;
&lt;li&gt;与 CSI 接口以管理卷的生命周期&lt;/li&gt;
&lt;li&gt;与 CSI 和其他工具进行接口，执行快照、克隆、调整大小、备份、恢复等操作。&lt;/li&gt;
&lt;li&gt;集成到其他工具中，如 Prometheus/Grafana 以进行遥测和监控&lt;/li&gt;
&lt;li&gt;集成到其他工具中进行调试、故障排除或日志管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OpenEBS 控制平面由一组微服务组成，这些微服务本身由 Kubernetes 管理，使 OpenEBS 真正成为 Kubernetes 原生的。由 OpenEBS 控制平面管理的配置被保存为 Kubernetes 自定义资源。控制平面的功能可以分解为以下各个阶段：&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="openebs存储使用">OpenEBS存储使用</h1>
<p><a class="link" href="https://openebs.io/"  target="_blank" rel="noopener"
    >OpenEBS</a> 是一种模拟了 AWS 的 EBS、阿里云的云盘等块存储实现的基于容器的存储开源软件。OpenEBS 是一种基于 CAS(Container Attached Storage) 理念的容器解决方案，其核心理念是存储和应用一样采用微服务架构，并通过 Kubernetes 来做资源编排。其架构实现上，每个卷的 Controller 都是一个单独的 Pod，且与应用 Pod 在同一个节点，卷的数据使用多个 Pod 进行管理。</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="openEBS组件" loading="lazy" src="https://openebs.io/docs/assets/images/control-plane-overview-93c59878e3356a11f03029dd0fc1cd6b.svg"></p>
<p>OpenEBS 有很多组件，可以分为以下几类：</p>
<ul>
<li>控制平面组件 - 管理 OpenEBS 卷容器，通常会用到容器编排软件的功能</li>
<li>数据平面组件 - 为应用程序提供数据存储，包含 Jiva 和 cStor 两个存储后端</li>
<li>节点磁盘管理器 - 发现、监控和管理连接到 Kubernetes 节点的媒体</li>
<li>与云原生工具的整合 - 与 Prometheus、Grafana、Fluentd 和 Jaeger 进行整合。</li>
</ul>
<h2 id="控制平面">控制平面</h2>
<p>OpenEBS 上下文中的控制平面是指部署在集群中的一组工具或组件，它们负责：</p>
<ul>
<li>管理 kubernetes 工作节点上可用的存储</li>
<li>配置和管理数据引擎</li>
<li>与 CSI 接口以管理卷的生命周期</li>
<li>与 CSI 和其他工具进行接口，执行快照、克隆、调整大小、备份、恢复等操作。</li>
<li>集成到其他工具中，如 Prometheus/Grafana 以进行遥测和监控</li>
<li>集成到其他工具中进行调试、故障排除或日志管理</li>
</ul>
<p>OpenEBS 控制平面由一组微服务组成，这些微服务本身由 Kubernetes 管理，使 OpenEBS 真正成为 Kubernetes 原生的。由 OpenEBS 控制平面管理的配置被保存为 Kubernetes 自定义资源。控制平面的功能可以分解为以下各个阶段：</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="控制平面组件" loading="lazy" src="https://openebs.io/docs/assets/images/openebs-control-plane-ed2fef338de5f1b10298fc5f5c0f4e3f.svg"></p>
<p>OpenEBS 提供了一个动态供应器，它是标准的 Kubernetes 外部存储插件。OpenEBS PV 供应器的主要任务是向应用 Pod 发起卷供应，并实现Kubernetes 的 PV 规范。</p>
<p><code>m-apiserver</code> 暴露了存储 REST API，并承担了大部分的卷策略处理和管理。</p>
<p>控制平面和数据平面之间的连接采用 Kubernetes sidecar 模式。有如下几个场景，控制平面需要与数据平面进行通信。</p>
<ul>
<li>对于 IOPS、吞吐量、延迟等卷统计 - 通过 <code>volume-exporter</code> sidecar实现</li>
<li>用于通过卷控制器 Pod 执行卷策略，以及通过卷复制 Pod 进行<code>磁盘/池</code>管理 - 通过卷管理 sidecar 实现。</li>
</ul>
<h2 id="openebs-local-pv">OpenEBS Local Pv</h2>
<p><a class="link" href="https://kubernetes.io/docs/concepts/storage/volumes/#local"  target="_blank" rel="noopener"
    >OpenEBS 为Kubernetes Local Volumes</a>提供动态 PV 供应器。本地卷意味着存储只能从单个节点使用。本地卷表示已挂载的本地存储设备，例如磁盘、分区或目录。</p>
<p>由于 Local Volume 只能从单个节点访问，因此本地卷受底层节点可用性的影响，并不适合所有应用程序。如果一个节点变得不健康，那么本地卷也将变得不可访问，使用它的 Pod 将无法运行。使用本地卷的应用程序必须能够容忍这种可用性降低以及潜在的数据丢失，具体取决于底层磁盘的耐用性特征。</p>
<p>可以从本地卷中受益的良好工作负载示例包括：</p>
<ul>
<li>复制数据库，如 MongoDB、Cassandra</li>
<li>可以使用自己的高可用性配置（如 Elastic、MinIO）配置的有状态工作负载</li>
<li>通常在单个节点或单节点 Kubernetes 集群中运行的边缘工作负载。</li>
</ul>
<p>OpenEBS 通过提供 Kubernetes 当前缺少的功能来帮助用户将本地卷投入生产，例如：</p>
<ul>
<li>本地卷的动态 PV Provisioner。</li>
<li>由 Ext3、XFS、LVM 或 ZFS 等文件系统上的主机路径支持的本地卷。</li>
<li>监控用于创建本地卷的底层设备或存储的健康状况。</li>
<li>容量管理功能，如过度配置和/或配额强制执行。</li>
<li>当本地卷由 ZFS 等高级文件系统支持时，可以使用快照、克隆、压缩等底层存储功能。</li>
<li>通过 Velero 进行备份和恢复。</li>
<li>通过 LUKS 或使用底层文件系统（如 ZFS）的内置加密支持来保护本地卷。</li>
</ul>
<h2 id="节点磁盘管理器ndm">节点磁盘管理器(NDM)</h2>
<p>节点磁盘管理器（NDM）是OpenEBS架构中的一个重要组件。NDM 将块设备视为需要监控和管理的资源，就像其他资源（如 CPU、内存和网络）一样。它是一个运行在每个节点上的守护进程，根据过滤器检测附加的块设备并将它们作为块设备自定义资源加载到 Kubernetes 中。这些自定义资源旨在通过提供以下功能来帮助超融合存储运营商：</p>
<ul>
<li>易于访问 Kubernetes 集群中可用的块设备清单。</li>
<li>预测磁盘故障以帮助采取预防措施。</li>
<li>允许动态地将磁盘附加/分离到存储 pod，而无需重新启动在磁盘附加/分离的节点上运行的相应 NDM pod。</li>
<li><code>Node Disk Manager</code>在<code>Kubernetes</code>中是以<code>DaemonSet</code>的方式进行运行的</li>
<li><a class="link" href="https://openebs.io/docs/concepts/ndm"  target="_blank" rel="noopener"
    >Node Disk Manager</a></li>
</ul>
<p>尽管执行了上述所有操作，但 NDM 有助于整体简化持久卷的配置。</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="NDM" loading="lazy" src="https://openebs.io/docs/assets/files/ndm-96fc51e849ddea8084d8b800d0e08975.svg"></p>
<blockquote>
<p>NDM 在安装 OpenEBS 期间部署为守护进程。NDM daemonset 发现每个节点上的磁盘并创建称为块设备或 BD 的自定义资源。</p>
</blockquote>
<h2 id="启用openebs">启用OpenEBS</h2>
<p>由于 OpenEBS 通过 iSCSI 协议提供存储支持，因此，需要在所有 Kubernetes 节点上都安装 iSCSI 客户端（启动器）。</p>
<p>比如我们这里使用的是Rocky的系统，执行下面的命令安装启动 iSCSI 启动器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dnf install iscsi-initiator-utils -y
</span></span><span class="line"><span class="cl"><span class="c1"># 查看iSCSI状态是否正常</span>
</span></span><span class="line"><span class="cl">cat /etc/iscsi/initiatorname.iscsi
</span></span><span class="line"><span class="cl"><span class="c1"># 启动iSCSI</span>
</span></span><span class="line"><span class="cl">systemctl start iscsid.service
</span></span><span class="line"><span class="cl">systemctl status iscsid.service
</span></span></code></pre></div><h3 id="安装openebs">安装OpenEBS</h3>
<ol>
<li>使用<code>kubectl</code>的方式进行安装</li>
</ol>
<ul>
<li>Helm部署也是可选的: <a class="link" href="https://openebs.io/docs/user-guides/installation#installation-through-helm"  target="_blank" rel="noopener"
    >地址</a></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl apply -f https://openebs.github.io/charts/openebs-operator.yaml</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 检查是否安装完成,正常应该都是Running即可</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get pods -n openebs</span>
</span></span><span class="line"><span class="cl">NAME                                           READY   STATUS    RESTARTS   AGE
</span></span><span class="line"><span class="cl">openebs-localpv-provisioner-846c6bdc56-vvvsv   1/1     Running   <span class="m">0</span>          6m11s
</span></span><span class="line"><span class="cl">openebs-ndm-5sfdk                              1/1     Running   <span class="m">0</span>          6m11s
</span></span><span class="line"><span class="cl">openebs-ndm-cluster-exporter-b49987ffb-vjq87   1/1     Running   <span class="m">0</span>          6m11s
</span></span><span class="line"><span class="cl">openebs-ndm-kthfj                              1/1     Running   <span class="m">0</span>          6m11s
</span></span><span class="line"><span class="cl">openebs-ndm-node-exporter-94zhh                1/1     Running   <span class="m">0</span>          6m11s
</span></span><span class="line"><span class="cl">openebs-ndm-node-exporter-q9h5p                1/1     Running   <span class="m">0</span>          6m11s
</span></span><span class="line"><span class="cl">openebs-ndm-node-exporter-x7z9t                1/1     Running   <span class="m">0</span>          6m11s
</span></span><span class="line"><span class="cl">openebs-ndm-operator-6469f6bb4c-95kss          1/1     Running   <span class="m">0</span>          6m11s
</span></span><span class="line"><span class="cl">openebs-ndm-wf9k2                              1/1     Running   <span class="m">0</span>          6m11s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 正常我们会有两个StorageClass</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get sc</span>
</span></span><span class="line"><span class="cl">NAME               PROVISIONER        RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
</span></span><span class="line"><span class="cl">openebs-device     openebs.io/local   Delete          WaitForFirstConsumer   <span class="nb">false</span>                  20m
</span></span><span class="line"><span class="cl">openebs-hostpath   openebs.io/local   Delete          WaitForFirstConsumer   <span class="nb">false</span>                  20m
</span></span></code></pre></div><ol>
<li>我们自己创建一个<code>Pvc</code>对象来给我们的<code>Deployment</code>来进行使用</li>
</ol>
<pre tabindex="0"><code class="language-yanml" data-lang="yanml">apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: local-hostpath-pvc
spec:
  storageClassName: openebs-hostpath
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
</code></pre><ol>
<li>创建一个Pod进行测试</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hello-local-hostpath-pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">local-storage</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">local-hostpath-pvc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hello-container</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span>- <span class="l">sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span>- -<span class="l">c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span>- <span class="s1">&#39;while true; do echo &#34;`date` [`hostname`] Hello from OpenEBS Local PV.&#34; &gt;&gt; /mnt/store/greet.txt; sleep $(($RANDOM % 5 + 300)); done&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">local-storage</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>注意：如果你想知道这个Pvc具体挂载位置可以使用<code>kubectl describe pv pv名称</code>,其中的<code>Ptah: /var/openebs/local/pvc-e011f2a1-27dc-46d0-ba34-9ad44ba03188</code>就是我们所在节点的路径</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get pv</span>
</span></span><span class="line"><span class="cl">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                        STORAGECLASS       REASON   AGE
</span></span><span class="line"><span class="cl">example-local                              20Gi       RWO            Delete           Bound    default/bound-tasknginx      local-storage               26d
</span></span><span class="line"><span class="cl">pvc-e011f2a1-27dc-46d0-ba34-9ad44ba03188   1Gi        RWO            Delete           Bound    default/local-hostpath-pvc   openebs-hostpath            3m53s
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl describe pv pvc-e011f2a1-27dc-46d0-ba34-9ad44ba03188</span>
</span></span><span class="line"><span class="cl">Name:              pvc-e011f2a1-27dc-46d0-ba34-9ad44ba03188
</span></span><span class="line"><span class="cl">Labels:            openebs.io/cas-type<span class="o">=</span>local-hostpath
</span></span><span class="line"><span class="cl">Annotations:       pv.kubernetes.io/provisioned-by: openebs.io/local
</span></span><span class="line"><span class="cl">Finalizers:        <span class="o">[</span>kubernetes.io/pv-protection<span class="o">]</span>
</span></span><span class="line"><span class="cl">StorageClass:      openebs-hostpath
</span></span><span class="line"><span class="cl">Status:            Bound
</span></span><span class="line"><span class="cl">Claim:             default/local-hostpath-pvc
</span></span><span class="line"><span class="cl">Reclaim Policy:    Delete
</span></span><span class="line"><span class="cl">Access Modes:      RWO
</span></span><span class="line"><span class="cl">VolumeMode:        Filesystem
</span></span><span class="line"><span class="cl">Capacity:          1Gi
</span></span><span class="line"><span class="cl">Node Affinity:     
</span></span><span class="line"><span class="cl">  Required Terms:  
</span></span><span class="line"><span class="cl">    Term 0:        kubernetes.io/hostname in <span class="o">[</span>online-beijing-node1<span class="o">]</span>
</span></span><span class="line"><span class="cl">Message:           
</span></span><span class="line"><span class="cl">Source:
</span></span><span class="line"><span class="cl">    Type:  LocalVolume <span class="o">(</span>a persistent volume backed by <span class="nb">local</span> storage on a node<span class="o">)</span>
</span></span><span class="line"><span class="cl">    Path:  /var/openebs/local/pvc-e011f2a1-27dc-46d0-ba34-9ad44ba03188
</span></span><span class="line"><span class="cl">Events:    &lt;none&gt;
</span></span></code></pre></div><ol>
<li>进入所在节点的目录进行验证</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span>  /var/openebs/local/pvc-e011f2a1-27dc-46d0-ba34-9ad44ba03188
</span></span><span class="line"><span class="cl"><span class="c1"># 随便创建一个文件</span>
</span></span><span class="line"><span class="cl">touch openebs.txt
</span></span><span class="line"><span class="cl"><span class="c1"># 进入容器内部</span>
</span></span><span class="line"><span class="cl">kubectl <span class="nb">exec</span> -it nginx-67fbcff654-glklg bash
</span></span><span class="line"><span class="cl"><span class="c1"># 查看所挂载openebs的路径是否成功有openebs.txt</span>
</span></span><span class="line"><span class="cl">root@nginx-67fbcff654-glklg:/# ls /data/
</span></span><span class="line"><span class="cl">1.txt  openebs.txt
</span></span></code></pre></div><h2 id="修改openebs的hostpath默认存储">修改OpenEBS的HostPath默认存储</h2>
<ol>
<li>修改名字为<code>openebs-hostpath</code>的<code>StorageClass</code>当中的<code>BasePath</code>即可</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">storage.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">StorageClass</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">openebs-hostpath</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">openebs.io/cas-type</span><span class="p">:</span><span class="w"> </span><span class="l">local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cas.openebs.io/config</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      #hostpath type will create a PV by 
</span></span></span><span class="line"><span class="cl"><span class="sd">      # creating a sub-directory under the
</span></span></span><span class="line"><span class="cl"><span class="sd">      # BASEPATH provided below.
</span></span></span><span class="line"><span class="cl"><span class="sd">      - name: StorageType
</span></span></span><span class="line"><span class="cl"><span class="sd">        value: &#34;hostpath&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">      #Specify the location (directory) where
</span></span></span><span class="line"><span class="cl"><span class="sd">      # where PV(volume) data will be saved. 
</span></span></span><span class="line"><span class="cl"><span class="sd">      # A sub-directory with pv-name will be 
</span></span></span><span class="line"><span class="cl"><span class="sd">      # created. When the volume is deleted, 
</span></span></span><span class="line"><span class="cl"><span class="sd">      # the PV sub-directory will be deleted.
</span></span></span><span class="line"><span class="cl"><span class="sd">      #Default value is /var/openebs/local
</span></span></span><span class="line"><span class="cl"><span class="sd">      - name: BasePath
</span></span></span><span class="line"><span class="cl"><span class="sd">        value: &#34;/var/openebs/local/&#34;</span><span class="w">      
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Traekfik基础使用指南</title>
      <link>https://blog.mletter.cn/tech/kubernetes/traefik/</link>
      <pubDate>Fri, 07 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/traefik/</guid>
      <description>&lt;h2 id=&#34;traekfik是什么&#34;&gt;Traekfik是什么&lt;/h2&gt;
&lt;p&gt;Traefik 是一种&lt;a class=&#34;link&#34; href=&#34;https://github.com/traefik/traefik&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;开源&lt;/a&gt; &lt;em&gt;边缘路由器&lt;/em&gt;，它使您发布服务成为一种有趣而轻松的体验。它代表您的系统接收请求并找出哪些组件负责处理它们。&lt;/p&gt;
&lt;p&gt;Traefik 的与众不同之处在于，除了它的许多功能之外，它还可以自动为您的服务发现正确的配置。当 Traefik 检查您的基础架构时，奇迹就会发生，它会在其中找到相关信息并发现哪个服务服务于哪个请求。&lt;/p&gt;
&lt;p&gt;Traefik 原生兼容所有主要的集群技术，例如 Kubernetes、Docker、Docker Swarm、AWS、Mesos、Marathon，&lt;a class=&#34;link&#34; href=&#34;https://doc.traefik.io/traefik/providers/overview/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;等等&lt;/a&gt;；并且可以同时处理很多。（它甚至适用于在裸机上运行的遗留软件。）&lt;/p&gt;
&lt;p&gt;使用 Traefik，无需维护和同步单独的配置文件：一切都自动实时发生（无需重启，无连接中断）。使用 Traefik，您可以花时间为系统开发和部署新功能，而不是配置和维护其工作状态。&lt;/p&gt;
&lt;p&gt;&lt;img style=&#34;max-width: 100%; height: auto;&#34; loading=&#34;lazy&#34; loading=&#34;lazy&#34; src=&#34;https://doc.traefik.io/traefik/assets/img/traefik-architecture.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;边缘路由器&#34;&gt;边缘路由器&lt;/h3&gt;
&lt;p&gt;Traefik 是一个&lt;em&gt;Edge Router&lt;/em&gt;，这意味着它是您平台的大门，它拦截并路由每个传入请求：它知道确定哪些服务处理哪些请求的所有逻辑和每条规则（基于&lt;a class=&#34;link&#34; href=&#34;https://doc.traefik.io/traefik/routing/routers/#rule&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;path&lt;/a&gt;，&lt;a class=&#34;link&#34; href=&#34;https://doc.traefik.io/traefik/routing/routers/#rule&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;host&lt;/a&gt;，&lt;a class=&#34;link&#34; href=&#34;https://doc.traefik.io/traefik/routing/routers/#rule&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;标头&lt;/a&gt;，&lt;a class=&#34;link&#34; href=&#34;https://doc.traefik.io/traefik/routing/routers/#rule&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;等等&lt;/a&gt;…）。&lt;/p&gt;
&lt;p&gt;&lt;img style=&#34;max-width: 100%; height: auto;&#34; loading=&#34;lazy&#34; alt=&#34;边缘路由&#34; loading=&#34;lazy&#34; src=&#34;https://doc.traefik.io/traefik/assets/img/traefik-concepts-1.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自动服务发现&#34;&gt;自动服务发现&lt;/h3&gt;
&lt;p&gt;传统上边缘路由器（或反向代理）需要一个配置文件，其中包含到您的服务的每条可能路径，Traefik 从服务本身获取它们。部署您的服务，您附加信息告诉 Traefik 服务可以处理的请求的特征。&lt;/p&gt;
&lt;p&gt;&lt;img style=&#34;max-width: 100%; height: auto;&#34; loading=&#34;lazy&#34; alt=&#34;供应商&#34; loading=&#34;lazy&#34; src=&#34;https://doc.traefik.io/traefik/assets/img/providers.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先，当启动 Traefik 时，需要定义 &lt;code&gt;entrypoints&lt;/code&gt;（入口点），然后，根据连接到这些 entrypoints 的&lt;strong&gt;路由&lt;/strong&gt;来分析传入的请求，来查看他们是否与一组&lt;strong&gt;规则&lt;/strong&gt;相匹配，如果匹配，则路由可能会将请求通过一系列&lt;strong&gt;中间件&lt;/strong&gt;转换过后再转发到你的&lt;strong&gt;服务&lt;/strong&gt;上去。在了解 Traefik 之前有几个核心概念我们必须要了解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Providers&lt;/code&gt; 用来自动发现平台上的服务，可以是编排工具、容器引擎或者 key-value 存储等，比如 Docker、Kubernetes、File&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Entrypoints&lt;/code&gt; 监听传入的流量（端口等…），是网络入口点，它们定义了接收请求的端口（HTTP 或者 TCP）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Routers&lt;/code&gt; 分析请求（host, path, headers, SSL, …），负责将传入请求连接到可以处理这些请求的服务上去。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Services&lt;/code&gt; 将请求转发给你的应用（load balancing, …），负责配置如何获取最终将处理传入请求的实际服务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Middlewares&lt;/code&gt; 中间件，用来修改请求或者根据请求来做出一些判断（authentication, rate limiting, headers, …），中间件被附件到路由上，是一种在请求发送到你的&lt;strong&gt;服务&lt;/strong&gt;之前（或者在服务的响应发送到客户端之前）调整请求的一种方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;部署traefik&#34;&gt;部署Traefik&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Traefik的配置可以使用两种方式：&lt;code&gt;静态配置&lt;/code&gt;和&lt;code&gt;动态配置&lt;/code&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="traekfik是什么">Traekfik是什么</h2>
<p>Traefik 是一种<a class="link" href="https://github.com/traefik/traefik"  target="_blank" rel="noopener"
    >开源</a> <em>边缘路由器</em>，它使您发布服务成为一种有趣而轻松的体验。它代表您的系统接收请求并找出哪些组件负责处理它们。</p>
<p>Traefik 的与众不同之处在于，除了它的许多功能之外，它还可以自动为您的服务发现正确的配置。当 Traefik 检查您的基础架构时，奇迹就会发生，它会在其中找到相关信息并发现哪个服务服务于哪个请求。</p>
<p>Traefik 原生兼容所有主要的集群技术，例如 Kubernetes、Docker、Docker Swarm、AWS、Mesos、Marathon，<a class="link" href="https://doc.traefik.io/traefik/providers/overview/"  target="_blank" rel="noopener"
    >等等</a>；并且可以同时处理很多。（它甚至适用于在裸机上运行的遗留软件。）</p>
<p>使用 Traefik，无需维护和同步单独的配置文件：一切都自动实时发生（无需重启，无连接中断）。使用 Traefik，您可以花时间为系统开发和部署新功能，而不是配置和维护其工作状态。</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" loading="lazy" src="https://doc.traefik.io/traefik/assets/img/traefik-architecture.png"></p>
<h3 id="边缘路由器">边缘路由器</h3>
<p>Traefik 是一个<em>Edge Router</em>，这意味着它是您平台的大门，它拦截并路由每个传入请求：它知道确定哪些服务处理哪些请求的所有逻辑和每条规则（基于<a class="link" href="https://doc.traefik.io/traefik/routing/routers/#rule"  target="_blank" rel="noopener"
    >path</a>，<a class="link" href="https://doc.traefik.io/traefik/routing/routers/#rule"  target="_blank" rel="noopener"
    >host</a>，<a class="link" href="https://doc.traefik.io/traefik/routing/routers/#rule"  target="_blank" rel="noopener"
    >标头</a>，<a class="link" href="https://doc.traefik.io/traefik/routing/routers/#rule"  target="_blank" rel="noopener"
    >等等</a>…）。</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="边缘路由" loading="lazy" src="https://doc.traefik.io/traefik/assets/img/traefik-concepts-1.png"></p>
<h3 id="自动服务发现">自动服务发现</h3>
<p>传统上边缘路由器（或反向代理）需要一个配置文件，其中包含到您的服务的每条可能路径，Traefik 从服务本身获取它们。部署您的服务，您附加信息告诉 Traefik 服务可以处理的请求的特征。</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="供应商" loading="lazy" src="https://doc.traefik.io/traefik/assets/img/providers.png"></p>
<p>首先，当启动 Traefik 时，需要定义 <code>entrypoints</code>（入口点），然后，根据连接到这些 entrypoints 的<strong>路由</strong>来分析传入的请求，来查看他们是否与一组<strong>规则</strong>相匹配，如果匹配，则路由可能会将请求通过一系列<strong>中间件</strong>转换过后再转发到你的<strong>服务</strong>上去。在了解 Traefik 之前有几个核心概念我们必须要了解：</p>
<ul>
<li><code>Providers</code> 用来自动发现平台上的服务，可以是编排工具、容器引擎或者 key-value 存储等，比如 Docker、Kubernetes、File</li>
<li><code>Entrypoints</code> 监听传入的流量（端口等…），是网络入口点，它们定义了接收请求的端口（HTTP 或者 TCP）。</li>
<li><code>Routers</code> 分析请求（host, path, headers, SSL, …），负责将传入请求连接到可以处理这些请求的服务上去。</li>
<li><code>Services</code> 将请求转发给你的应用（load balancing, …），负责配置如何获取最终将处理传入请求的实际服务。</li>
<li><code>Middlewares</code> 中间件，用来修改请求或者根据请求来做出一些判断（authentication, rate limiting, headers, …），中间件被附件到路由上，是一种在请求发送到你的<strong>服务</strong>之前（或者在服务的响应发送到客户端之前）调整请求的一种方法。</li>
</ul>
<h2 id="部署traefik">部署Traefik</h2>
<blockquote>
<p>Traefik的配置可以使用两种方式：<code>静态配置</code>和<code>动态配置</code></p>
</blockquote>
<ul>
<li>静态配置：在 Traefik 中定义静态配置选项有三种不同的、互斥的即你只能同时使用一种）方式。
<ul>
<li>在配置文件中</li>
<li>在命令行参数中</li>
<li>作为环境变量</li>
</ul>
</li>
<li>动态配置：Traefik从<a class="link" href="https://doc.traefik.io/traefik/providers/overview/"  target="_blank" rel="noopener"
    >提供者处获取其</a><em>动态配置</em>：无论是编排器、服务注册表还是普通的旧配置文件。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 使用Helm的方式进行部署Traefik2.9.x</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># helm repo add traefik https://traefik.github.io/charts</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># helm repo update</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 yaml<span class="o">]</span><span class="c1"># helm fetch traefik/traefik</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 yaml<span class="o">]</span><span class="c1"># tar -zxf traefik-21.1.0.tgz</span>
</span></span></code></pre></div><ol>
<li>修改一下<code>value.yaml</code>中的部分内容，改动大概如下部分的内容</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">deployment</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">initContainers</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The &#34;volume-permissions&#34; init container is required if you run into permission issues.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Related issue: https://github.com/traefik/traefik/issues/6825</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">volume-permissions</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox:1.35</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;sh&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;-c&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;touch /data/acme.json &amp;&amp; chmod -Rv 600 /data/* &amp;&amp; chown 65532:65532 /data/acme.json&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">websecure</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">expose</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">exposedPort</span><span class="p">:</span><span class="w"> </span><span class="m">443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">expose</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">exposedPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ingressRoute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dashboard</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodeSelector</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">node.kubernetes.io/traefik-manager</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tolerations</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;node-role.kubernetes.io/master&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Equal&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">effect</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;NoSchedule&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;node-role.kubernetes.io/control-plane&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Equal&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">effect</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;NoSchedule&#34;</span><span class="w">
</span></span></span></code></pre></div><ol>
<li>创建一个<code>traefik-v2</code>的名称空间</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 yaml<span class="o">]</span><span class="c1"># kubectl create ns traefik-v2</span>
</span></span></code></pre></div><ol>
<li>部署Traefik</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 yaml<span class="o">]</span><span class="c1"># helm install traefik ./traefik -f ./traefik/values.yaml --namespace traefik-v2</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 yaml<span class="o">]</span><span class="c1"># kubectl get pods traefik-67b8896675-4xdrx -n traefik-v2 -o yaml</span>
</span></span></code></pre></div><p>其中 <code>entryPoints</code> 属性定义了 <code>web</code> 和 <code>websecure</code> 这两个入口点的，并开启 <code>kubernetesingress</code> 和 <code>kubernetescrd</code> 这两个 provider，也就是我们可以使用 Kubernetes 原本的 Ingress 资源对象，也可以使用 Traefik 自己扩展的 IngressRoute 这样的 CRD 资源对象</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">...</span><span class="l">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">global.checknewversion</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">global.sendanonymoususage</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">entrypoints.metrics.address=:9100/tcp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">entrypoints.traefik.address=:9000/tcp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">entrypoints.web.address=:8000/tcp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">entrypoints.websecure.address=:8443/tcp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">api.dashboard=true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">ping=true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">metrics.prometheus=true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">metrics.prometheus.entrypoint=metrics</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">providers.kubernetescrd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">providers.kubernetesingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- --<span class="l">entrypoints.websecure.http.tls=true</span><span class="w">
</span></span></span></code></pre></div><h3 id="创建用于-dashboard-访问的-ingressroute-资源">创建用于 Dashboard 访问的 IngressRoute 资源</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">IngressRoute</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">traefik-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">traefik-v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entryPoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">web</span><span class="w"> </span><span class="c"># 这里对应的是web的entryPoints 如果是https就需要使用websecure的entryPoints</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w"> </span><span class="l">Host(`traefik.kube.com`) </span><span class="w"> </span><span class="c"># 指定域名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Rule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">api@internal</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">TraefikService </span><span class="w"> </span><span class="c"># 引用另外的 Traefik Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="l">root@Online-Beijing-master1 yaml]# kubectl apply -f traefik.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">ingressroute.traefik.containo.us/traefik-dashboard created	</span><span class="w">
</span></span></span></code></pre></div><h2 id="traefik的基本使用">Traefik的基本使用</h2>
<h3 id="自定义一个ingressroute">自定义一个IngressRoute</h3>
<p>假设我们要访问一个简单地<code>nginx</code>服务,下面是<code>traefik</code>的匹配规则</p>
<table>
  <thead>
      <tr>
          <th>匹配规则</th>
          <th>描述</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>HeadersRegexp(</code>key<code>, </code>regexp<code>)</code></td>
          <td><code>key</code>检查标题中是否定义了键，其值与正则表达式匹配<code>regexp</code></td>
      </tr>
      <tr>
          <td><code>Host(</code>example.com<code>, ...)</code></td>
          <td>检查请求域（主机标头值）是否针对给定的<code>domains</code>.</td>
      </tr>
      <tr>
          <td><code>HostHeader(</code>example.com<code>, ...)</code></td>
          <td>与 相同<code>Host</code>，仅因历史原因而存在。</td>
      </tr>
      <tr>
          <td><code>HostRegexp(</code>example.com<code>, </code>{subdomain:[a-z]+}.example.com<code>, ...)</code></td>
          <td>匹配请求域。请参阅下面的“正则表达式语法”。</td>
      </tr>
      <tr>
          <td><code>Method(</code>GET<code>, ...)</code></td>
          <td>检查请求方法是否为给定的<code>methods</code>( <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>PATCH</code>, <code>HEAD</code>)之一</td>
      </tr>
      <tr>
          <td><code>Path(</code>/path<code>, </code>/articles/{cat:[a-z]+}/{id:[0-9]+}<code>, ...)</code></td>
          <td>匹配准确的请求路径。请参阅下面的“正则表达式语法”。</td>
      </tr>
      <tr>
          <td><code>PathPrefix(</code>/products/<code>, </code>/articles/{cat:[a-z]+}/{id:[0-9]+}<code>)</code></td>
          <td>匹配请求前缀路径。请参阅下面的“正则表达式语法”。</td>
      </tr>
      <tr>
          <td><code>Query(</code>foo=bar<code>, </code>bar=baz<code>)</code></td>
          <td>匹配查询字符串参数。它接受一系列键=值对。</td>
      </tr>
      <tr>
          <td><code>ClientIP(</code>10.0.0.0/16<code>, </code>::1<code>)</code></td>
          <td>如果请求客户端 IP 是给定的 IP/CIDR 之一，则匹配。它接受 IPv4、IPv6 和 CIDR</td>
      </tr>
  </tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">IngressRoute</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">traefik-qingyang-http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entryPoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">web</span><span class="w"> </span><span class="c"># 依旧对应web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w"> </span><span class="l">Host(`traefik.qingyang.com`) </span><span class="w"> </span><span class="c"># 指定域名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Rule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vue-demo</span><span class="w"> </span><span class="c"># 这个地方对应kubernetes的svc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div><p>如果我们需要开启<code>HTTPS</code>来访问我们这个应用的话，就需要监听 <code>websecure</code> 这个入口点，也就是通过 443 端口来访问，同样用 <code>HTTPS</code> 访问应用必然就需要证书，这里我们用 <code>openssl</code> 来创建一个自签名的证书：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">openssl req -x509 -nodes -days <span class="m">365</span> -newkey rsa:2048 -keyout tls.key -out tls.crt -subj <span class="s2">&#34;/CN=traefik.qingyang.com&#34;</span>
</span></span></code></pre></div><p>然后创建<code>secret</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 yaml<span class="o">]</span><span class="c1"># kubectl create secret tls traefik-demo-tls --cert=tls.crt --key=tls.key</span>
</span></span></code></pre></div><p>这个时候我们就可以创建一个 <code>HTTPS</code> 访问应用的 <code>IngressRoute</code> 对象了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">IngressRoute</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">traefik-qingyang-https</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entryPoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">websecure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w"> </span><span class="l">Host(`traefik.qingyang.com`)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Rule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vue-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">traefik-demo-tls</span><span class="w">
</span></span></span></code></pre></div><h3 id="acme自动签发">ACME自动签发</h3>
<p>raefik 同样也支持使用 <code>Let’s Encrypt</code> 自动生成证书，要使用 <code>Let’s Encrypt</code> 来进行自动化 HTTPS，就需要首先开启 <code>ACME</code>，开启 <code>ACME</code> 需要通过静态配置的方式，也就是说可以通过环境变量、启动参数等方式来提供。</p>
<p>ACME 有多种校验方式 <code>tlsChallenge</code>、<code>httpChallenge</code> 和 <code>dnsChallenge</code> 三种验证方式，之前更常用的是 http 这种验证方式(可以百度一下)这几种的校验方式。要使用 tls 校验方式的话需要保证 Traefik 的 443 端口是可达的，dns 校验方式可以生成通配符的证书，只需要配置上 DNS 解析服务商的 API 访问密钥即可校验。我们这里用 DNS 校验的方式来为大家说明如何配置 ACME。</p>
<ol>
<li>重新修改一下刚刚Traefik的参数<code>values.yaml</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">additionalArguments</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 使用 dns 验证方式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- --<span class="l">certificatesResolvers.ali.acme.dnsChallenge.provider=alidns</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 先使用staging环境进行验证，验证成功后再使用移除下面一行的配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># - --certificatesResolvers.ali.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 邮箱配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- --<span class="l">certificatesResolvers.ali.acme.email=ych_1024@163.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 保存 ACME 证书的位置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- --<span class="l">certificatesResolvers.ali.acme.storage=/data/acme.json</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">envFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">secretRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">traefik-alidns-secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ALICLOUD_ACCESS_KEY</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ALICLOUD_SECRET_KEY</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ALICLOUD_REGION_ID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">persistence</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># 开启持久化</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accessMode</span><span class="p">:</span><span class="w"> </span><span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">size</span><span class="p">:</span><span class="w"> </span><span class="l">128Mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 由于上面持久化了ACME的数据，需要重新配置下面的安全上下文</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">readOnlyRootFilesystem</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">runAsGroup</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">runAsUser</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">runAsNonRoot</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span></code></pre></div><p>然后更新<code>traefik</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">helm up traefik ./traefik -f ./traefik/values.yaml --namespace traefik-v2
</span></span></code></pre></div><ul>
<li>这样我们可以通过设置 <code>--certificatesresolvers.ali.acme.dnschallenge.provider=alidns</code> 参数来指定指定阿里云的 DNS 校验，要使用阿里云的 DNS 校验我们还需要配置3个环境变量：<code>ALICLOUD_ACCESS_KEY</code>、<code>ALICLOUD_SECRET_KEY</code>、<code>ALICLOUD_REGION_ID</code>，分别对应我们平时开发阿里云应用的时候的密钥，可以登录阿里云后台获取，由于这是比较私密的信息，所以我们用 Secret 对象来创建</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create secret generic traefik-alidns-secret --from-literal<span class="o">=</span><span class="nv">ALICLOUD_ACCESS_KEY</span><span class="o">=</span>&lt;aliyun ak&gt; --from-literal<span class="o">=</span><span class="nv">ALICLOUD_SECRET_KEY</span><span class="o">=</span>&lt;aliyun sk&gt; --from-literal<span class="o">=</span><span class="nv">ALICLOUD_REGION_ID</span><span class="o">=</span>cn-beijing -n traefik-v2
</span></span></code></pre></div><ul>
<li>创建完成后将这个 Secret 通过环境变量配置到 Traefik 的应用中，还有一个值得注意的是验证通过的证书我们这里存到 <code>/data/acme.json</code> 文件中，我们一定要将这个文件持久化，否则每次 Traefik 重建后就需要重新认证，而 <code>Let’s Encrypt</code> 本身校验次数是有限制的。所以我们在 values 中重新开启了数据持久化，不过开启过后需要我们提供一个可用的 PV 存储，由于我们将 Traefik 固定到 master1 节点上的，所以我们可以创建一个 hostpath 类型的 PV</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">capacity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">128Mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/data/k8s/traefik</span><span class="w">
</span></span></span></code></pre></div><ol>
<li>更新<code>IngressRoute</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">IngressRoute</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">traefik-qingyang-https</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entryPoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">websecure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w"> </span><span class="l">Host(`traefik.qingyang.com`)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Rule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vue-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">certResolver</span><span class="p">:</span><span class="w"> </span><span class="l">ali</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">domains</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">main</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*.qingyang.com&#34;</span><span class="w">
</span></span></span></code></pre></div><p>只需要将 tls 部分改成我们定义的 <code>ali</code> 这个证书解析器，如果我们想要生成一个通配符的域名证书的话可以定义 <code>domains</code> 参数来指定，然后更新 <code>IngressRoute </code>对象，这个时候我们再去用 HTTPS 访问我们的应用（当然需要将域名在阿里云 DNS 上做解析）</p>
<h2 id="中间件">中间件</h2>
<p>连接到路由器的中间件是一种在将请求发送到您的<a class="link" href="https://doc.traefik.io/traefik/routing/services/"  target="_blank" rel="noopener"
    >服务</a>之前（或在将服务的答案发送到客户端之前）调整请求的方法。</p>
<p>Traefik 中有几个可用的中间件，有的可以修改请求，headers，有的负责重定向，有的添加认证等等。</p>
<p>使用相同协议的中间件可以组合成链以适应各种场景。</p>
<ul>
<li><a class="link" href="https://doc.traefik.io/traefik/middlewares/http/overview/"  target="_blank" rel="noopener"
    >HTTP中间件列表</a></li>
<li><a class="link" href="https://doc.traefik.io/traefik/middlewares/tcp/overview/"  target="_blank" rel="noopener"
    >TCP中间件列表</a></li>
</ul>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="img" loading="lazy" src="https://doc.traefik.io/traefik/assets/img/middleware/overview.png"></p>
<h3 id="强制跳转https">强制跳转Https</h3>
<p>Traefik 中也是可以配置强制跳转的，只是这个功能现在是通过中间件来提供的了。如下所示，我们使用 <code>redirectScheme</code> 中间件来创建提供强制跳转服务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># Redirect to https</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Middleware </span><span class="w"> </span><span class="c"># 创建一个中间件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-redirectscheme</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redirectScheme</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">scheme</span><span class="p">:</span><span class="w"> </span><span class="l">https</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">permanent</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">IngressRoute</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">traefik-qingyang-http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entryPoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">web </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w"> </span><span class="l">Host(`traefik.qingyang.com`) </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Rule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vue-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">middlewares</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-redirectscheme</span><span class="w"> </span><span class="c"># 指定添加中间件的名称</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>如果你有具体需求的话请前往官网文档查看更多中间件的适用方法。</p>
</blockquote>
<h2 id="traefik-pilot">Traefik Pilot</h2>
<p>虽然 Traefik 已经默认实现了很多中间件，可以满足大部分我们日常的需求，但是在实际工作中，用户仍然还是有自定义中间件的需求，这就 <a class="link" href="https://pilot.traefik.io/"  target="_blank" rel="noopener"
    >Traefik Pilot</a> 的功能了。</p>
<p>Traefik Pilot 是一个 SaaS 平台，和 Traefik 进行链接来扩展其功能，它提供了很多功能，通过一个全局控制面板和 Dashboard 来增强对 Traefik 的观测和控制：</p>
<ul>
<li>Traefik 代理和代理组的网络活动的指标</li>
<li>服务健康问题和安全漏洞警报</li>
<li>扩展 Traefik 功能的插件</li>
</ul>
<p>在 Traefik 可以使用 <code>Traefik Pilot</code> 的功能之前，必须先连接它们，我们只需要对 Traefik 的静态配置进行少量更改即可。</p>
<blockquote>
<p>注意: Traefik 代理必须要能访问互联网才能连接到 <code>Traefik Pilot</code>，通过 HTTPS 在 443 端口上建立连接。 这个我就不演示了，我的虚拟机木有外网。</p>
</blockquote>
<h2 id="灰度发布">灰度发布</h2>
<p>跟Ingress-nginx是一样的就不多介绍灰度发布是啥了</p>
<h3 id="基于权重的轮询">基于权重的轮询</h3>
<p>这次使用的<code>Deployment</code>和上次<code>Ingress-nginx</code>一样，大家去Ingress那篇文章去找一下咯</p>
<p>我们可以直接利用<code>TraefikService</code>这个对象来配置基于权重的轮询</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">TraefikService</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">auy-cat-wrr</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">weighted</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">  </span><span class="c"># 定义权重</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div><p>然后修改我们<code>IngressRoute</code>中使用的<code>TraefikService</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">IngressRoute</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">traefik-qingyang-http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entryPoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">web </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w"> </span><span class="l">Host(`traefik.qingyang.com`) </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Rule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">auy-cat-wrr</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">TraefikService</span><span class="w"> </span><span class="c"># 使用声明的 TraefikService 服务，而不是 K8S 的 Service</span><span class="w">
</span></span></span></code></pre></div><h2 id="流量复制">流量复制</h2>
<p>除了灰度发布之外，Traefik还引入了流量镜像服务，是一种可以将流入流量复制并同时将其发送给其他服务的方法，镜像服务可以获得给定百分比的请求同时也会忽略这部分请求的响应。</p>
<p>假设我们刚刚的<code>production</code>为线上服务<code>canary</code>为预览服务,现在希望请求<code>production</code>的流量同时复制一份也请求到<code>canary</code>版本中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">TraefikService</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mirror-replication</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mirroring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mirrors</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">percent</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">IngressRoute</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">traefik-qingyang-http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entryPoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">web </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w"> </span><span class="l">Host(`traefik.qingyang.com`) </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Rule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mirror-replication</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">TraefikService</span><span class="w"> </span><span class="c"># 使用声明的 TraefikService 服务，而不是 K8S 的 Service</span><span class="w">
</span></span></span></code></pre></div><h2 id="代理tcpudp">代理Tcp/Udp</h2>
<p>另外 Traefik2.X 已经支持了 TCP 服务的，下面我们以 mongo 为例来了解下 Traefik 是如何支持 TCP 服务得。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mongo-traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">mongo-traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">mongo-traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">mongo-traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mongo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mongo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">27017</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mongo-traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">mongo-traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">27017</span><span class="w">
</span></span></span></code></pre></div><ol>
<li>新增<code>Traefik</code>的入口点</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">websecure</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mongo</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">27017</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">27017</span><span class="w">
</span></span></span></code></pre></div><p>这里给入口点添加 <code>hostPort</code> 是为了能够通过节点的端口访问到服务，关于 entryPoints 入口点的更多信息，可以查看文档 <a class="link" href="https://www.qikqiak.com/traefik-book/routing/entrypoints/"  target="_blank" rel="noopener"
    >entrypoints</a> 了解更多信息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">helm upgrade --install traefik ./traefik -f ./traefik/values.yaml -n traefik-v2
</span></span></code></pre></div><ol start="2">
<li>由于 Traefik 中使用 TCP 路由配置需要 <code>SNI</code>，而 <code>SNI</code> 又是依赖 <code>TLS</code> 的，所以我们需要配置证书才行，如果没有证书的话，我们可以使用通配符 <code>*</code> 进行配置，我们这里创建一个 <code>IngressRouteTCP</code> 类型的 CRD</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">IngressRouteTCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mongo-traefik-tcp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entryPoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">mongo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w"> </span><span class="l">HostSNI(`*`)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mongo-traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">27017</span><span class="w">
</span></span></span></code></pre></div><p>我这里没有<code>mongo</code>的客户端,直接校验一下端口就行了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">telnet traefik.qingyang.com <span class="m">27017</span>
</span></span></code></pre></div><h3 id="使用特定的域名进行代理访问">使用特定的域名进行代理访问</h3>
<p>假设我现在有一个<code>mysql</code>服务，想通过<code>traefik.mysql.prod</code>进行连接访问.</p>
<p>我们在加一个<code>proxy-mysql</code>的<code>entryPoints</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">websecure</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mongo</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">27017</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">27017</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">proxy-mysql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">3306</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">3306</span><span class="w">
</span></span></span></code></pre></div><ol>
<li>生成一个<code>traefik.mysql.prod</code>的自签名证书</li>
</ol>
<ul>
<li>装个Golang<code>dnf install -y go</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/jsha/minica.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> minica
</span></span><span class="line"><span class="cl">go build
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 minica<span class="o">]</span><span class="c1"># ./minica --domains &#39;traefik.mysql.prod&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 minica<span class="o">]</span><span class="c1"># cd traefik.mysql.prod/</span>
</span></span></code></pre></div><ol start="2">
<li>生成<code>secret</code>,请确保你处于当前的<code>cert.key</code>和<code>key.pem</code>的目录下</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create secret tls tcp-demo-mysql --cert<span class="o">=</span>cert.pem --key<span class="o">=</span>key.pem
</span></span></code></pre></div><ol start="3">
<li>创建<code>IngressRouteTCP</code>对象</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">IngressRouteTCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tcp-inner-mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entryPoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">proxy-mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">match</span><span class="p">:</span><span class="w"> </span><span class="l">HostSNI(`traefik.mysql.prod`)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">env-prod-mysql-svc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">3306</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w"> </span><span class="c"># 绑定Tls</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">tcp-demo-mysql</span><span class="w">
</span></span></span></code></pre></div><h3 id="代理一个udp服务">代理一个Udp服务</h3>
<ol>
<li>部署一个UDP服务</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">whoami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">whoami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">whoami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">whoami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">whoami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">containous/whoamiudp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">whoamiudp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">udp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">whoami</span><span class="w">
</span></span></span></code></pre></div><ol start="2">
<li>在<code>Traefik</code>当中添加UDP的入口点，老样子修改<code>values.yaml</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">udpend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">18080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">18080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">UDP</span><span class="w">
</span></span></span></code></pre></div><ol start="3">
<li>UDP 的入口点增加成功后，接下来我们可以创建一个 <code>IngressRouteUDP</code> 类型的资源对象，用来代理 UDP 请求：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">traefik.containo.us/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">IngressRouteUDP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">whoamiudp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entryPoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">udpend</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">whoamiudp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Kubernetes-本地存储</title>
      <link>https://blog.mletter.cn/tech/kubernetes/local-storage/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/local-storage/</guid>
      <description>前面我们有通过 hostPath 或者 emptyDir 的方式来持久化我们的数据</description>
      <content:encoded><![CDATA[<h1 id="本地存储">本地存储</h1>
<p>前面我们有通过 <code>hostPath</code> 或者 <code>emptyDir</code> 的方式来持久化我们的数据，但是显然我们还需要更加可靠的存储来保存应用的持久化数据，这样容器在重建后，依然可以使用之前的数据。但是存储资源和 CPU 资源以及内存资源有很大不同，为了屏蔽底层的技术实现细节，让用户更加方便的使用，Kubernetes 便引入了 <code>PV</code> 和 <code>PVC</code> 两个重要的资源对象来实现对存储的管理。</p>
<h2 id="persistentvolume">PersistentVolume</h2>
<p><code>PV</code> 的全称是：<code>PersistentVolume</code>（持久化卷），是对底层共享存储的一种抽象，PV 由管理员进行创建和配置，它和具体的底层的共享存储技术的实现方式有关，比如 <code>Ceph</code>、<code>GlusterFS</code>、<code>NFS</code>、<code>hostPath</code> 等，都是通过插件机制完成与共享存储的对接。</p>
<h2 id="persistentvolumeclaim">PersistentVolumeClaim</h2>
<p><code>PVC</code> 的全称是：<code>PersistentVolumeClaim</code>（持久化卷声明），PVC 是用户存储的一种声明，PVC 和 Pod 比较类似，Pod 消耗的是节点，PVC 消耗的是 PV 资源，Pod 可以请求 CPU 和内存，而 PVC 可以请求特定的存储空间和访问模式。对于真正使用存储的用户不需要关心底层的存储实现细节，只需要直接使用 PVC 即可。</p>
<p>但是通过 PVC 请求到一定的存储空间也很有可能不足以满足应用对于存储设备的各种需求，而且不同的应用程序对于存储性能的要求可能也不尽相同，比如读写速度、并发性能等，为了解决这一问题，Kubernetes 又为我们引入了一个新的资源对象：<code>StorageClass</code>，通过 <code>StorageClass</code> 的定义，管理员可以将存储资源定义为某种类型的资源，比如快速存储、慢速存储等，用户根据 <code>StorageClass</code> 的描述就可以非常直观的知道各种存储资源的具体特性了，这样就可以根据应用的特性去申请合适的存储资源了，此外 <code>StorageClass</code> 还可以为我们自动生成 PV，免去了每次手动创建的麻烦。</p>
<h2 id="hostpath">HostPath</h2>
<p>我们上面提到了 PV 是对底层存储技术的一种抽象，PV 一般都是由管理员来创建和配置的，我们首先来创建一个 <code>hostPath</code> 类型的 <code>PersistentVolume</code>。Kubernetes 支持 <code>hostPath</code> 类型的 <code>PersistentVolume</code> 使用节点上的文件或目录来模拟附带网络的存储，但是需要注意的是在生产集群中，我们不会使用 <code>hostPath</code>，集群管理员会提供网络存储资源，比如 <code>NFS</code> 共享卷或 <code>Ceph</code> 存储卷，集群管理员还可以使用 <code>StorageClasses</code> 来设置动态提供存储。因为 Pod 并不是始终固定在某个节点上面的，所以要使用 hostPath 的话我们就需要将 Pod 固定在某个节点上，这样显然就大大降低了应用的容错性。</p>
<blockquote>
<p>当然了，生产环境中用的还是相对较少因为有较少的需求需要将Pod来固定到某些节点上。</p>
</blockquote>
<h3 id="创建persistentvolume">创建PersistentVolume</h3>
<ol>
<li>假设我们现在在节点1上新建一个<code>/data/hostPath/index.html</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-node1 ~<span class="o">]</span><span class="c1"># echo &#34;Hello This is new hostPath message.&#34; &gt;&gt; /data/hostPath/index.html</span>
</span></span></code></pre></div><ol>
<li>接下来创建一个Pv对象</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">demo-hostpath</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">capacity</span><span class="p">:</span><span class="w"> </span><span class="c"># 定义该Pv的容量为10Gb</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">10Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">  </span><span class="c"># 定义该Pv的访问模式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/data/hostPath&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">type-ssd-sc</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>Capacity（存储能力）：一般来说，一个 PV 对象都要指定一个存储能力，通过 PV 的 <code>capacity</code> 属性来设置的，目前只支持存储空间的设置，就是我们这里的 <code>storage=10Gi</code>，不过未来可能会加入 <code>IOPS</code>、吞吐量等指标的配置。</li>
<li>AccessModes（访问模式）：用来对 PV 进行访问模式的设置，用于描述用户应用对存储资源的访问权限，访问权限包括下面几种方式：
<ul>
<li>ReadWriteOnce（RWO）：读写权限，但是只能被单个节点挂载</li>
<li>ReadOnlyMany（ROX）：只读权限，可以被多个节点挂载</li>
<li>ReadWriteMany（RWX）：读写权限，可以被多个节点挂载</li>
</ul>
</li>
</ul>
<p>创建完成后查看 PersistentVolume 的信息，输出结果显示该 <code>PersistentVolume</code> 的状态（STATUS） 为 <code>Available</code>。 这意味着它还没有被绑定给 <code>PersistentVolumeClaim</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get pv</span>
</span></span><span class="line"><span class="cl">NAME            CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
</span></span><span class="line"><span class="cl">demo-hostpath   10Gi       RWO            Retain           Available           type-ssd-sc             13m
</span></span></code></pre></div><p>其中有一项 <code>RECLAIM POLICY</code> 的配置，同样我们可以通过 PV 的 <code>persistentVolumeReclaimPolicy</code>（回收策略）属性来进行配置，目前 PV 支持的策略有三种：</p>
<ul>
<li>Retain（保留）：回收策略 <code>Retain</code> 使得用户可以手动回收资源。当 <code>PersistentVolumeClaim</code> 对象被删除时，<code>PersistentVolume</code> 卷仍然存在，对应的数据卷被视为&quot;已释放（released）&quot;。 由于卷上仍然存在这前一申领人的数据，该卷还不能用于其他申领。 管理员可以通过下面的步骤来手动回收该卷：
<ul>
<li>删除 PersistentVolume 对象。与之相关的、位于外部基础设施中的存储资产 （例如 AWS EBS、GCE PD、Azure Disk 或 Cinder 卷）在 PV 删除之后仍然存在。</li>
<li>根据情况，手动清除所关联的存储资产上的数据。</li>
<li>手动删除所关联的存储资产。</li>
</ul>
</li>
<li>Recycle（回收）：回收策略 <code>Recycle</code> 已被废弃。取而代之的建议方案是使用动态制备。如果下层的卷插件支持，回收策略 <code>Recycle</code> 会在卷上执行一些基本的擦除 （<code>rm -rf /thevolume/*</code>）操作，之后允许该卷用于新的 PVC 申领。</li>
<li>Delete（删除）：对于支持 <code>Delete</code> 回收策略的卷插件，删除动作会将 <code>PersistentVolume</code> 对象从 Kubernetes 中移除，同时也会从外部基础设施（如 AWS EBS、GCE PD、Azure Disk 或 Cinder 卷）中移除所关联的存储资产。</li>
</ul>
<p>目前，仅 NFS 和 HostPath 支持回收（Recycle）。 AWS EBS、GCE PD、Azure Disk 和 Cinder 卷都支持删除（Delete）。</p>
<blockquote>
<p>不过需要注意的是，目前只有 <code>NFS</code> 和 <code>HostPath</code> 两种类型支持回收策略，当然一般来说还是设置为 <code>Retain</code> 这种策略保险一点。</p>
</blockquote>
<p>关于 PV 的状态，实际上描述的是 PV 的生命周期的某个阶段，一个 PV 的生命周期中，可能会处于4种不同的阶段：</p>
<ul>
<li>Available（可用）：表示可用状态，还未被任何 PVC 绑定</li>
<li>Bound（已绑定）：表示 PVC 已经被 PVC 绑定</li>
<li>Released（已释放）：PVC 被删除，但是资源还未被集群重新声明</li>
<li>Failed（失败）： 表示该 PV 的自动回收失败</li>
</ul>
<h3 id="创建persistentvolumeclaim">创建PersistentVolumeClaim</h3>
<p>如果我们需要使用这个 PV 的话，就需要创建一个对应的 PVC 来和他进行绑定了，就类似于我们的服务是通过 Pod 来运行的，而不是 Node，只是 Pod 跑在 Node 上而已。</p>
<p>让我们申请一个使用3G空间的<code>PersistentVolumeClaim</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolumeClaim</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">task-pv-claim</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">3Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">type-ssd-sc</span><span class="w">
</span></span></span></code></pre></div><p>创建 <code>PersistentVolumeClaim</code> 之后，Kubernetes 控制平面将查找满足申领要求的 <code>PersistentVolume</code>。 如果控制平面找到具有相同 <code>StorageClass</code> 的适当的 <code>PersistentVolume</code>， 则将 <code>PersistentVolumeClaim</code> 绑定到该 <code>PersistentVolume</code> 上。所以再次<code>kubectl get pv</code>的<code>PersistentVolume</code>状态应该属于<code>Bound</code>状态。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 yaml<span class="o">]</span><span class="c1"># kubectl get pv</span>
</span></span><span class="line"><span class="cl">NAME            CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                   STORAGECLASS   REASON   AGE
</span></span><span class="line"><span class="cl">demo-hostpath   10Gi       RWO            Retain           Bound    default/task-pv-claim   type-ssd-sc             47m
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 yaml<span class="o">]</span><span class="c1"># kubectl get pvc</span>
</span></span><span class="line"><span class="cl">NAME            STATUS   VOLUME          CAPACITY   ACCESS MODES   STORAGECLASS   AGE
</span></span><span class="line"><span class="cl">task-pv-claim   Bound    demo-hostpath   10Gi       RWO            type-ssd-sc    18m
</span></span></code></pre></div><p>可以看到已经绑定到了一个<code>Volume</code>叫做<code>demo-hostpath</code>的<code>PersistentVolume</code></p>
<blockquote>
<p>需要注意的是目前<code>PersistentVolume</code>和<code>PersistentVolumeClaim</code>之间是一对一绑定的关系，也就是说一个<code>PersistentVolume</code>只能被一个<code>PersistentVolumeClaim</code>绑定。</p>
</blockquote>
<h3 id="创建一个deployment">创建一个Deployment</h3>
<p>创建一个<code>deployment</code>然后绑定<code>PersistentVolumeClaim</code>紧接着固定节点到<code>online-beijing-node1</code></p>
<pre tabindex="0"><code>---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s.kuboard.cn/name: task-nginx-demo
  name: task-nginx-demo
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s.kuboard.cn/name: task-nginx-demo
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        k8s.kuboard.cn/name: task-nginx-demo
    nodeSelector:
      kubernetes.io/hostname: online-beijing-node1
    spec:
      containers:
        - image: &#39;nginx:latest&#39;
          imagePullPolicy: Always
          name: task-nginx-demo
          ports:
            - containerPort: 80
              hostPort: 80
              name: http
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: &#34;/usr/share/nginx/html&#34;
            name: task-hostpath-volume
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: task-hostpath-volume
        persistentVolumeClaim:
          claimName: task-pv-claim
</code></pre><p>当这个<code>deployment</code>创建完成以后我们就可以通过访问<code>service</code>测试一下.</p>
<p>正常情况下你可以看到<code>Hello This is new hostPath message.</code>这条信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="p">[</span><span class="l">root@Online-Beijing-master1 yaml]# curl -v 10.10.56.102</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">* Rebuilt URL to</span><span class="p">:</span><span class="w"> </span><span class="m">10.10.56.102</span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>*<span class="w">   </span><span class="l">Trying 10.10.56.102...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>*<span class="w"> </span><span class="l">TCP_NODELAY set</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>*<span class="w"> </span><span class="l">Connected to 10.10.56.102 (10.10.56.102) port 80 (#0)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">&gt; GET / HTTP/1.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&gt; Host</span><span class="p">:</span><span class="w"> </span><span class="m">10.10.56.102</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&gt; User-Agent</span><span class="p">:</span><span class="w"> </span><span class="l">curl/7.61.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&gt; Accept</span><span class="p">:</span><span class="w"> </span><span class="cp">*/*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">&gt; </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">&lt; HTTP/1.1 200 OK</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Server</span><span class="p">:</span><span class="w"> </span><span class="l">nginx/1.23.3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Date</span><span class="p">:</span><span class="w"> </span><span class="l">Wed, 22 Mar 2023 09:54:49 GMT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Content-Type</span><span class="p">:</span><span class="w"> </span><span class="l">text/html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Content-Length</span><span class="p">:</span><span class="w"> </span><span class="m">36</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Last-Modified</span><span class="p">:</span><span class="w"> </span><span class="l">Wed, 22 Mar 2023 07:53:15 GMT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Connection</span><span class="p">:</span><span class="w"> </span><span class="l">keep-alive</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; ETag</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;641ab3eb-24&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Accept-Ranges</span><span class="p">:</span><span class="w"> </span><span class="l">bytes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">Hello This is new hostPath message.</span><span class="w">
</span></span></span></code></pre></div><p>这个就是我们一个很简单的基于<code>hostPath</code>来持久化数据使用<code>PersistentVolume</code>和<code>PersistentVolumeClaim</code>简单教学。</p>
<h2 id="local-persistentvolume">Local PersistentVolume</h2>
<p>上面我们创建了后端是 <code>hostPath</code> 类型的 PV 资源对象,那么个人认为<code>hostPath</code>的缺点在于</p>
<ol>
<li>
<p>Pod不能进行随时随地的节点更换,如果更换则会出现丢失数据的现象。</p>
<p>需要每次都搭配<code>nodeSelector</code>进行使用。</p>
</li>
</ol>
<p>其优点也是相对于比较明显</p>
<ol>
<li>因为<code>hostPath</code>使用的是本地磁盘,可以充分的利用磁盘的读写性能。</li>
</ol>
<hr>
<p>所以在 hostPath 的基础上，Kubernetes 依靠 PV、PVC 实现了一个新的特性，这个特性的名字叫作：<code>Local Persistent Volume</code>，也就是我们说的 <code>Local PV</code>。</p>
<p><code>local</code> 卷只能用作静态创建的持久卷。不支持动态配置。</p>
<p>然而，<code>local</code> 卷仍然取决于底层节点的可用性，并不适合所有应用程序。 如果节点变得不健康，那么 <code>local</code> 卷也将变得不可被 Pod 访问。使用它的 Pod 将不能运行。 使用 <code>local</code> 卷的应用程序必须能够容忍这种可用性的降低，以及因底层磁盘的耐用性特征而带来的潜在的数据丢失风险。</p>
<h3 id="它与hostpath有何不同">它与HostPath有何不同？</h3>
<p>为了更好地理解本地持久卷的优势，将其与<a class="link" href="https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"  target="_blank" rel="noopener"
    >HostPath 卷</a>进行比较很有用。<code>HostPath</code> 卷将主机节点文件系统中的文件或目录挂载到 Pod 中。类似地，<code>Local Persistent Volume</code> 将本地磁盘或分区挂载到 Pod 中</p>
<p>最大的区别是 Kubernetes 调度程序了解本地持久卷属于哪个节点。对于 HostPath 卷，引用 HostPath 卷的 pod 可能会被调度程序移动到不同的节点，从而导致数据丢失。但是对于 <code>Local Persistent Volumes</code>，Kubernetes 调度器确保使用 <code>Local Persistent Volume</code> 的 pod 总是被调度到同一个节点。</p>
<p>虽然 HostPath 卷可以通过 <code>Persistent Volume Claim (PVC)</code> 引用或直接内嵌在 pod 定义中，但 <code>Local Persistent Volumes</code> 只能通过 PVC 引用。这提供了额外的安全优势，因为 <code>Persistent Volume</code> 对象由管理员管理，防止 Pod 能够访问主机上的任何路径。</p>
<blockquote>
<p>所以，一般来说 <code>Local PV</code> 对应的存储介质是一块额外挂载在宿主机的磁盘或者块设备。</p>
</blockquote>
<h3 id="创建一个local持久卷实例">创建一个Local持久卷实例</h3>
<p>下面是一个使用 <code>local</code> 卷和 <code>nodeAffinity</code> 的持久卷示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example-local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">capacity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">20Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumeMode</span><span class="p">:</span><span class="w"> </span><span class="l">Filesystem</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">persistentVolumeReclaimPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Delete</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">local-storage</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">local</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/mnt/disks/ssd1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nodeAffinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">required</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nodeSelectorTerms</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes.io/hostname</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">online-beijing-node1</span><span class="w">
</span></span></span></code></pre></div><p>使用 <code>local</code> 卷时，你需要设置 <code>PersistentVolume</code> 对象的 <code>nodeAffinity</code> 字段。 Kubernetes 调度器使用 <code>PersistentVolume</code> 的 <code>nodeAffinity</code> 信息来将使用 <code>local</code> 卷的 Pod 调度到正确的节点。</p>
<p>当然了,这也就意味着如果你的Pod想使用这个<code>PV</code>的话,那么就只能运行在<code>online-beijing-node1</code>这个节点上。这样，调度器在调度 Pod 的时候，就能够知道一个 PV 与节点的对应关系，从而做出正确的选择。</p>
<p><strong>绑定PersistentVolumeClaim</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PersistentVolumeClaim</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">bound-tasknginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accessModes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">5Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">storageClassName</span><span class="p">:</span><span class="w"> </span><span class="l">local-storage</span><span class="w">
</span></span></span></code></pre></div><p>接下来创建一个Pod来绑定这个Pvc,然后可以通过访问<code>Pod</code>的<code>IP</code>地址进行验证。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pv-local-pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example-pv-local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">claimName</span><span class="p">:</span><span class="w"> </span><span class="l">bound-tasknginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example-pv-local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/usr/share/nginx/html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example-pv-local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="l">root@Online-Beijing-master1 yaml]# curl -v 10.10.38.225 </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">* Rebuilt URL to</span><span class="p">:</span><span class="w"> </span><span class="m">10.10.38.225</span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>*<span class="w">   </span><span class="l">Trying 10.10.38.225...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>*<span class="w"> </span><span class="l">TCP_NODELAY set</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>*<span class="w"> </span><span class="l">Connected to 10.10.38.225 (10.10.38.225) port 80 (#0)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">&gt; GET / HTTP/1.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&gt; Host</span><span class="p">:</span><span class="w"> </span><span class="m">10.10.38.225</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&gt; User-Agent</span><span class="p">:</span><span class="w"> </span><span class="l">curl/7.61.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&gt; Accept</span><span class="p">:</span><span class="w"> </span><span class="cp">*/*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">&gt; </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">&lt; HTTP/1.1 200 OK</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Server</span><span class="p">:</span><span class="w"> </span><span class="l">nginx/1.23.3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Date</span><span class="p">:</span><span class="w"> </span><span class="l">Thu, 23 Mar 2023 08:45:18 GMT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Content-Type</span><span class="p">:</span><span class="w"> </span><span class="l">text/html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Content-Length</span><span class="p">:</span><span class="w"> </span><span class="m">25</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Last-Modified</span><span class="p">:</span><span class="w"> </span><span class="l">Thu, 23 Mar 2023 08:43:41 GMT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Connection</span><span class="p">:</span><span class="w"> </span><span class="l">keep-alive</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; ETag</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;641c113d-19&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">&lt; Accept-Ranges</span><span class="p">:</span><span class="w"> </span><span class="l">bytes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">&lt; </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">Date</span><span class="p">:</span><span class="w"> </span><span class="ld">2023-03-23</span><span class="w"> </span><span class="l">LocalPv</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>*<span class="w"> </span><span class="l">Connection</span><span class="w"> </span><span class="c">#0 to host 10.10.38.225 left intact</span><span class="w">
</span></span></span></code></pre></div><p>当然了你也可以进入到<code>Pod</code>当中查看是否成功</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 yaml<span class="o">]</span><span class="c1"># kubectl exec -it pv-local-pod /bin/bash</span>
</span></span><span class="line"><span class="cl">root@pv-local-pod:/usr/share/nginx/html# <span class="nb">cd</span> /usr/share/nginx/html/
</span></span><span class="line"><span class="cl">root@pv-local-pod:/usr/share/nginx/html# cat index.html 
</span></span><span class="line"><span class="cl">Date: 2023-03-23 LocalPv
</span></span></code></pre></div><h2 id="删除静态管理的持久化存储">删除静态管理的持久化存储</h2>
<p>需要注意的是，我们上面手动创建<code>PersistentVolume</code>的方式，即静态的<code>PersistentVolume</code>管理方式，在删除<code>PersistentVolume</code>时需要按如下流程执行操作。</p>
<ol>
<li>删除使用这个<code>PersistentVolume</code>的 Pod</li>
<li>从宿主机移除本地磁盘</li>
<li>删除<code>PersistentVolumeClaim</code></li>
<li>删除<code>PersistentVolume</code></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Ingress的简单使用</title>
      <link>https://blog.mletter.cn/tech/kubernetes/nginx-ingress/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/nginx-ingress/</guid>
      <description>&lt;h1 id=&#34;什么是ingress&#34;&gt;什么是Ingress&lt;/h1&gt;
&lt;p&gt;Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。&lt;/p&gt;
&lt;p&gt;Ingress 可以提供负载均衡、SSL 终结和基于名称的虚拟托管。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#ingress-v1-networking-k8s-io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ingress&lt;/a&gt; 公开从集群外部到集群内&lt;a class=&#34;link&#34; href=&#34;https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;服务&lt;/a&gt;的 HTTP 和 HTTPS 路由。 流量路由由 Ingress 资源上定义的规则控制。&lt;/p&gt;
&lt;p&gt;下面是一个将所有流量都发送到同一 Service 的简单 Ingress 示例：&lt;/p&gt;
&lt;p&gt;&lt;img style=&#34;max-width: 100%; height: auto;&#34; loading=&#34;lazy&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; src=&#34;https://d33wubrfki0l68.cloudfront.net/4f01eaec32889ff16ee255e97822b6d165b633f0/a54b4/zh-cn/docs/images/ingress.svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ingress 其实就是从 Kuberenets 集群外部访问集群的一个入口，将外部的请求转发到集群内不同的 Service 上，其实就相当于 nginx、haproxy 等负载均衡代理服务器，可能你会觉得我们直接使用 nginx 就实现了，但是只使用 nginx 这种方式有很大缺陷，每次有新服务加入的时候怎么改 Nginx 配置？不可能让我们去手动更改或者滚动更新前端的 Nginx Pod 吧？那我们再加上一个服务发现的工具比如 consul 如何？貌似是可以，对吧？Ingress 实际上就是这样实现的，只是服务发现的功能自己实现了，不需要使用第三方的服务了，然后再加上一个域名规则定义，路由信息的刷新依靠 Ingress Controller 来提供。&lt;/p&gt;
&lt;p&gt;Ingress Controller 可以理解为一个监听器，通过不断地监听 kube-apiserver，实时的感知后端 Service、Pod 的变化，当得到这些信息变化后，Ingress Controller 再结合 Ingress 的配置，更新反向代理负载均衡器，达到服务发现的作用。其实这点和服务发现工具 consul、 consul-template 非常类似。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在可以供大家使用的 Ingress Controller 有很多，比如 &lt;code&gt;traefik&lt;/code&gt;、&lt;code&gt;nginx-controller&lt;/code&gt;、&lt;code&gt;Kubernetes Ingress Controller&lt;/code&gt; for Kong、&lt;code&gt;HAProxy Ingress controller&lt;/code&gt;，当然你也可以自己实现一个 Ingress Controller，现在普遍用得较多的是 traefik 和 nginx-controller，traefik 的性能较 nginx-controller 差，但是配置使用要简单许多，我们这里会重点给大家介绍 nginx-controller 以及 traefik 的使用。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="什么是ingress">什么是Ingress</h1>
<p>Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。</p>
<p>Ingress 可以提供负载均衡、SSL 终结和基于名称的虚拟托管。</p>
<p><a class="link" href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#ingress-v1-networking-k8s-io"  target="_blank" rel="noopener"
    >Ingress</a> 公开从集群外部到集群内<a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/"  target="_blank" rel="noopener"
    >服务</a>的 HTTP 和 HTTPS 路由。 流量路由由 Ingress 资源上定义的规则控制。</p>
<p>下面是一个将所有流量都发送到同一 Service 的简单 Ingress 示例：</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="img" loading="lazy" src="https://d33wubrfki0l68.cloudfront.net/4f01eaec32889ff16ee255e97822b6d165b633f0/a54b4/zh-cn/docs/images/ingress.svg"></p>
<p>Ingress 其实就是从 Kuberenets 集群外部访问集群的一个入口，将外部的请求转发到集群内不同的 Service 上，其实就相当于 nginx、haproxy 等负载均衡代理服务器，可能你会觉得我们直接使用 nginx 就实现了，但是只使用 nginx 这种方式有很大缺陷，每次有新服务加入的时候怎么改 Nginx 配置？不可能让我们去手动更改或者滚动更新前端的 Nginx Pod 吧？那我们再加上一个服务发现的工具比如 consul 如何？貌似是可以，对吧？Ingress 实际上就是这样实现的，只是服务发现的功能自己实现了，不需要使用第三方的服务了，然后再加上一个域名规则定义，路由信息的刷新依靠 Ingress Controller 来提供。</p>
<p>Ingress Controller 可以理解为一个监听器，通过不断地监听 kube-apiserver，实时的感知后端 Service、Pod 的变化，当得到这些信息变化后，Ingress Controller 再结合 Ingress 的配置，更新反向代理负载均衡器，达到服务发现的作用。其实这点和服务发现工具 consul、 consul-template 非常类似。</p>
<blockquote>
<p>现在可以供大家使用的 Ingress Controller 有很多，比如 <code>traefik</code>、<code>nginx-controller</code>、<code>Kubernetes Ingress Controller</code> for Kong、<code>HAProxy Ingress controller</code>，当然你也可以自己实现一个 Ingress Controller，现在普遍用得较多的是 traefik 和 nginx-controller，traefik 的性能较 nginx-controller 差，但是配置使用要简单许多，我们这里会重点给大家介绍 nginx-controller 以及 traefik 的使用。</p>
</blockquote>
<h2 id="安装nginx-ingress-controller">安装NGINX Ingress Controller</h2>
<ul>
<li>官方文档：<a class="link" href="https://kubernetes.github.io/ingress-nginx/"  target="_blank" rel="noopener"
    >NGINX Ingress Controller</a></li>
</ul>
<p>NGINX Ingress Controller 是使用 Kubernetes Ingress 资源对象构建的，用 ConfigMap 来存储 Nginx 配置的一种 Ingress Controller 实现。</p>
<p>由于 nginx-ingress 所在的节点需要能够访问外网，这样域名可以解析到这些节点上直接使用，所以需要让 nginx-ingress 绑定节点的 80 和 443 端口，所以可以使用 hostPort 来进行访问。</p>
<p><strong>查看当前Ingress-Nginx适用的kubernetes版本</strong></p>
<table>
  <thead>
      <tr>
          <th>Ingress-NGINX version</th>
          <th>k8s supported version</th>
          <th>Alpine Version</th>
          <th>Nginx Version</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>v1.6.4</td>
          <td>1.26, 1.25, 1.24, 1.23</td>
          <td>3.17.0</td>
          <td>1.21.6</td>
      </tr>
      <tr>
          <td>v1.5.1</td>
          <td>1.25, 1.24, 1.23</td>
          <td>3.16.2</td>
          <td>1.21.6</td>
      </tr>
      <tr>
          <td>v1.4.0</td>
          <td>1.25, 1.24, 1.23, 1.22</td>
          <td>3.16.2</td>
          <td>1.19.10†</td>
      </tr>
      <tr>
          <td>v1.3.1</td>
          <td>1.24, 1.23, 1.22, 1.21, 1.20</td>
          <td>3.16.2</td>
          <td>1.19.10†</td>
      </tr>
      <tr>
          <td>v1.3.0</td>
          <td>1.24, 1.23, 1.22, 1.21, 1.20</td>
          <td>3.16.0</td>
          <td>1.19.10†</td>
      </tr>
      <tr>
          <td>v1.2.1</td>
          <td>1.23, 1.22, 1.21, 1.20, 1.19</td>
          <td>3.14.6</td>
          <td>1.19.10†</td>
      </tr>
      <tr>
          <td>v1.1.3</td>
          <td>1.23, 1.22, 1.21, 1.20, 1.19</td>
          <td>3.14.4</td>
          <td>1.19.10†</td>
      </tr>
      <tr>
          <td>v1.1.2</td>
          <td>1.23, 1.22, 1.21, 1.20, 1.19</td>
          <td>3.14.2</td>
          <td>1.19.9†</td>
      </tr>
      <tr>
          <td>v1.1.1</td>
          <td>1.23, 1.22, 1.21, 1.20, 1.19</td>
          <td>3.14.2</td>
          <td>1.19.9†</td>
      </tr>
      <tr>
          <td>v1.1.0</td>
          <td>1.22, 1.21, 1.20, 1.19</td>
          <td>3.14.2</td>
          <td>1.19.9†</td>
      </tr>
      <tr>
          <td>v1.0.5</td>
          <td>1.22, 1.21, 1.20, 1.19</td>
          <td>3.14.2</td>
          <td>1.19.9†</td>
      </tr>
      <tr>
          <td>v1.0.4</td>
          <td>1.22, 1.21, 1.20, 1.19</td>
          <td>3.14.2</td>
          <td>1.19.9†</td>
      </tr>
      <tr>
          <td>v1.0.3</td>
          <td>1.22, 1.21, 1.20, 1.19</td>
          <td>3.14.2</td>
          <td>1.19.9†</td>
      </tr>
      <tr>
          <td>v1.0.2</td>
          <td>1.22, 1.21, 1.20, 1.19</td>
          <td>3.14.2</td>
          <td>1.19.9†</td>
      </tr>
      <tr>
          <td>v1.0.1</td>
          <td>1.22, 1.21, 1.20, 1.19</td>
          <td>3.14.2</td>
          <td>1.19.9†</td>
      </tr>
      <tr>
          <td>v1.0.0</td>
          <td>1.22, 1.21, 1.20, 1.19</td>
          <td>3.13.5</td>
          <td>1.20.1</td>
      </tr>
  </tbody>
</table>
<ol>
<li>使用<code>Helm</code>进行部署<code>nginx-ingress-controller</code></li>
</ol>
<pre tabindex="0"><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm fetch ingress-nginx/ingress-nginx
tar -xvf ingress-nginx-4.5.2.tgz
</code></pre><ol>
<li>新建一个<code>value-test.yaml</code>的配置文件</li>
</ol>
<ul>
<li><code>dnsPolicy</code>：因为处于<code>hostNetwork:true</code>的状态下,Pod默认使用宿主机的DNS解析,这样会导致如果你使用<code>ServiceName</code>的方式来访问Pod的话会出现无法解析的情况。所以修改为<code>ClusterFirstWithHostNet</code></li>
<li>请将<code>webhook</code>的镜像修改为<code>registry.cn-beijing.aliyuncs.com/polymerization/kube-webhook-certgen:v20220916-gd32f8c343</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">controller</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">controller</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">image</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">repository</span><span class="p">:</span><span class="w"> </span><span class="l">registry.cn-beijing.aliyuncs.com/polymerization/nginx-controller</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tag</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;v1.6.4&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">digest</span><span class="p">:</span><span class="w"> </span><span class="l">sha256:e727015a639975f4fc0808b91f9e88a83c60938b640ee6c2f5606ddd779c858d</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dnsPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterFirstWithHostNet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hostNetwork</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">publishService</span><span class="p">:</span><span class="w">  </span><span class="c"># hostNetwork 模式下设置为false，通过节点IP地址上报ingress status数据</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">DaemonSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tolerations</span><span class="p">:</span><span class="w">   </span><span class="c"># 注意,如果你的Kubernetes集群中存在多个Taint需要全部进行容忍。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;node-role.kubernetes.io/master&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Equal&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">effect</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;NoSchedule&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;node-role.kubernetes.io/control-plane&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Equal&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">effect</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;NoSchedule&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nodeSelector</span><span class="p">:</span><span class="w">   </span><span class="c"># 固定节点-&gt;请给3台master全部打上这个标签-&gt;个人建议将ingress-manager边缘化</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">node.kubernetes.io/ingress-manager</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">service</span><span class="p">:</span><span class="w">  </span><span class="c"># HostNetwork 模式不需要创建service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">admissionWebhooks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enable</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">patch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">enable</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">registry</span><span class="p">:</span><span class="w"> </span><span class="l">registry.cn-beijing.aliyuncs.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w">  </span><span class="l">polymerization/kube-webhook-certgen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">tag</span><span class="p">:</span><span class="w"> </span><span class="l">v20220916-gd32f8c343</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">digest</span><span class="p">:</span><span class="w"> </span><span class="l">sha256:c0e3bef270e179a5e4ab373f8ba6d57f596f3683d9d40c33ea900b19ec182ba2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">defaultBackend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span></code></pre></div><ol>
<li>部署<code>ingress-controller</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装</span>
</span></span><span class="line"><span class="cl">helm install --namespace ingress-nginx ingress-nginx ./ingress-nginx -f value-test.yaml
</span></span><span class="line"><span class="cl"><span class="c1"># 卸载</span>
</span></span><span class="line"><span class="cl">helm uninstall ingress-nginx --namespace ingress-nginx
</span></span></code></pre></div><h2 id="ingress的基本使用">Ingress的基本使用</h2>
<h3 id="创建一个ingress资源对象">创建一个ingress资源对象</h3>
<p>一个最小的 Ingress 资源示例</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">simple-qingyang-ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">out-apps</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">nginx.qingyang.com</span><span class="w"> </span><span class="c"># 将域名映射到后端服务</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">os-qingyang</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div><p>Ingress 需要指定 <code>apiVersion</code>、<code>kind</code>、 <code>metadata</code>和 <code>spec</code> 字段。 Ingress 对象的命名必须是合法的 <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/names#dns-subdomain-names"  target="_blank" rel="noopener"
    >DNS 子域名名称</a>。 关于如何使用配置文件，请参见<a class="link" href="https://kubernetes.io/zh-cn/docs/tasks/run-application/run-stateless-application-deployment/"  target="_blank" rel="noopener"
    >部署应用</a>、 <a class="link" href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/"  target="_blank" rel="noopener"
    >配置容器</a>、 <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/manage-deployment/"  target="_blank" rel="noopener"
    >管理资源</a>。 Ingress 经常使用注解（annotations）来配置一些选项，具体取决于 Ingress 控制器，例如<a class="link" href="https://github.com/kubernetes/ingress-nginx/blob/main/docs/examples/rewrite/README.md"  target="_blank" rel="noopener"
    >重写目标注解</a>。 不同的 <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress-controllers"  target="_blank" rel="noopener"
    >Ingress 控制器</a>支持不同的注解。 查看你所选的 Ingress 控制器的文档，以了解其支持哪些注解。</p>
<blockquote>
<p>如果 <code>ingressClassName</code> 被省略，那么你应该定义一个默认 <code>Ingress 类</code>,否则无法转发服务</p>
</blockquote>
<p>创建一个默认的<code>ingressClass</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">IngressClass</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app.kubernetes.io/component</span><span class="p">:</span><span class="w"> </span><span class="l">controller</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">default-nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ingressclass.kubernetes.io/is-default-class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">controller</span><span class="p">:</span><span class="w"> </span><span class="l">k8s.io/ingress-nginx</span><span class="w">
</span></span></span></code></pre></div><p>有一些 Ingress 控制器不需要定义默认的 <code>IngressClass</code>。比如：Ingress-NGINX 控制器可以通过<a class="link" href="https://kubernetes.github.io/ingress-nginx/#what-is-the-flag-watch-ingress-without-class"  target="_blank" rel="noopener"
    >参数</a> <code>--watch-ingress-without-class</code> 来配置。 不过仍然推荐创建默认的<code>ingressClass</code></p>
<blockquote>
<p>可以看一下简单地ingress-controller请求流程</p>
</blockquote>
<ol>
<li>客户端首先对 <code>ngdemo.qikqiak.com</code> 执行 DNS 解析，得到 Ingress Controller 所在节点的 IP</li>
<li>后客户端向 Ingress Controller 发送 HTTP 请求</li>
<li>根据 Ingress 对象里面的描述匹配域名，找到对应的 Service 对象，并获取关联的 Endpoints 列表，将客户端的请求转发给其中一个 Pod</li>
</ol>
<h3 id="创建todo-app测试暂时废弃">创建Todo-app测试(暂时废弃)</h3>
<ol>
<li>首先部署<code>MongoDB</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mongo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">mongo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">mongo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">emptyDir</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">resolv-conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">cache-dns</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">items</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">resolv.conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">resolv.conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mongo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mongo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">27017</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/data/db</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">resolv-conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/resolv.conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">resolv.conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mongo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">mongo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">db</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">27017</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">27017</span><span class="w">
</span></span></span></code></pre></div><ol>
<li>创建Todo</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">todo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">todo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">todo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">cnych/todo:v1.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;DBHOST&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mongodb://mongo.default.svc.cluster.local:27017&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">todo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">todo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">todo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">nginx.qingyang.com</span><span class="w"> </span><span class="c"># 将域名映射到后端服务</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">todo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span></span></span></code></pre></div><h3 id="url-rewrite">URL Rewrite</h3>
<p>Rewrite的Ingress注解</p>
<table>
  <thead>
      <tr>
          <th><a class="link" href="http://nginx.ingress.kubernetes.io/rewrite-target"  target="_blank" rel="noopener"
    >nginx.ingress.kubernetes.io/rewrite-target</a></th>
          <th>Target URI where the traffic must be redirected</th>
          <th>string</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><a class="link" href="http://nginx.ingress.kubernetes.io/ssl-redirect"  target="_blank" rel="noopener"
    >nginx.ingress.kubernetes.io/ssl-redirect</a></td>
          <td>Indicates if the location section is only accessible via SSL (defaults to True when Ingress contains a Certificate)</td>
          <td>bool</td>
      </tr>
      <tr>
          <td><a class="link" href="http://nginx.ingress.kubernetes.io/force-ssl-redirect"  target="_blank" rel="noopener"
    >nginx.ingress.kubernetes.io/force-ssl-redirect</a></td>
          <td>Forces the redirection to HTTPS even if the Ingress is not TLS Enabled</td>
          <td>bool</td>
      </tr>
      <tr>
          <td><a class="link" href="http://nginx.ingress.kubernetes.io/app-root"  target="_blank" rel="noopener"
    >nginx.ingress.kubernetes.io/app-root</a></td>
          <td>Defines the Application Root that the Controller must redirect if it’s in <code>/</code> context</td>
          <td>string</td>
      </tr>
      <tr>
          <td><a class="link" href="http://nginx.ingress.kubernetes.io/use-regex"  target="_blank" rel="noopener"
    >nginx.ingress.kubernetes.io/use-regex</a></td>
          <td>Indicates if the paths defined on an Ingress use regular expressions</td>
          <td>bool</td>
      </tr>
  </tbody>
</table>
<p>现在我们需要对访问的 URL 路径做一个 Rewrite，比如在 PATH 中添加一个 app 的前缀，关于 Rewrite 的操作在 <a class="link" href="https://kubernetes.github.io/ingress-nginx/examples/rewrite/"  target="_blank" rel="noopener"
    >ingress-nginx 官方文档</a>中也给出对应的说明。</p>
<ul>
<li><code>nginx.ingress.kubernetes.io/rewrite-target</code>: 流量必须重定向的目标URI(Target URI where the traffic must be redirected)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">todo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nginx.ingress.kubernetes.io/rewrite-target</span><span class="p">:</span><span class="w"> </span><span class="l">/$2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">nginx.qingyang.com </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/something(/|$)(.*)</span><span class="w"> </span><span class="c"># 匹配/something和/something/*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">todo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">3000</span><span class="w">
</span></span></span></code></pre></div><p>在此入口定义中，捕获的任何字符都<code>(.*)</code>将分配给占位符<code>$2</code>，然后将其用作注释中的参数<code>rewrite-target</code>。</p>
<p>例如，上面的入口定义将导致以下重写：</p>
<ul>
<li><code>nginx.qingyang.com/something</code>改写为<code>nginx.qingyang.com/</code></li>
<li><code>nginx.qingyang.com/something/</code>改写为<code>nginx.qingyang.com/</code></li>
<li><code>nginx.qingyang.com/something/new</code>改写为<code>nginx.qingyang.com/new</code></li>
</ul>
<blockquote>
<p>使用此方法可能会导致部分<code>css、js</code>等内容无法找到,可以使用以下方法实现</p>
</blockquote>
<ol>
<li>通过<code>configuration-snippet</code>注解</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">todo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nginx.ingress.kubernetes.io/rewrite-target</span><span class="p">:</span><span class="w"> </span><span class="l">/$2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nginx.ingress.kubernetes.io/configuration-snippet</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        rewrite ^/css/(.*)$ /something/css/$1  redirect; # 为css样式添加/something前缀
</span></span></span><span class="line"><span class="cl"><span class="sd">        rewrite ^/js/(.*)$ /something/js/$1</span><span class="w">        
</span></span></span></code></pre></div><h2 id="basic-auth">Basic Auth</h2>
<p>们还可以在 Ingress Controller 上面配置一些基本的 Auth 认证，比如 Basic Auth，可以用 htpasswd 生成一个密码文件来验证身份验证。</p>
<pre tabindex="0"><code>[root@Online-Beijing-master1 ~]# htpasswd -c auth admin
</code></pre><p>创建一个<code>secret</code></p>
<pre tabindex="0"><code>[root@Online-Beijing-master1 ~]# kubectl create secret generic basic-auth --from-file=authBasic Auth 的 Ingress 对象：
</code></pre><p>创建一个具有 <code>Basic Auth</code> 的 Ingress 对象</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">basic-auth-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/auth-type</span><span class="p">:</span><span class="w"> </span><span class="l">basic</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/auth-secret</span><span class="p">:</span><span class="w"> </span><span class="l">basic-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/auth-realm</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Authentication Required - admin&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">nginx.qingyang.com </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">os-vue-comment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div><p>正常会弹出来认证窗口，进行认证就行。</p>
<h2 id="灰度应用">灰度应用</h2>
<p>在日常工作中我们经常需要对服务进行版本更新升级，所以我们经常会使用到滚动升级、蓝绿发布、灰度发布等不同的发布操作。而 <code>ingress-nginx</code> 支持通过 Annotations 配置来实现不同场景下的灰度发布和测试，可以满足金丝雀发布、蓝绿部署与 A/B 测试等业务场景。</p>
<p>在某些情况下，您可能希望通过向与生产服务不同的服务发送少量请求来<code>金丝雀</code>一组新的更改。Canary 注释使 Ingress 规范可以充当请求路由到的替代服务，具体取决于应用的规则。</p>
<p><a class="link" href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#canary"  target="_blank" rel="noopener"
    >ingress-nginx 的 Annotations</a> 支持以下 4 种 Canary 规则：</p>
<ul>
<li><code>nginx.ingress.kubernetes.io/canary-by-header</code>: 基于 Request Header 的流量切分，适用于灰度发布以及 A/B 测试。当 Request Header 设置为 always 时，请求将会被一直发送到 Canary 版本；当 Request Header 设置为 never时，请求不会被发送到 Canary 入口；对于任何其他 Header 值，将忽略 Header，并通过优先级将请求与其他金丝雀规则进行优先级的比较。</li>
<li><code>nginx.ingress.kubernetes.io/canary-by-header-value</code>: 要匹配的 Request Header 的值，用于通知 Ingress 将请求路由到 Canary Ingress 中指定的服务。当 Request Header 设置为此值时，它将被路由到 Canary 入口。该规则允许用户自定义 Request Header 的值。此注释必须与 一起使用<code>nginx.ingress.kubernetes.io/canary-by-header</code>。如果未定义<code>canary-by-header</code>,那么该注解没有任何效果。</li>
<li><code>nginx.ingress.kubernetes.io/canary-weight</code>: 基于服务权重的流量切分，适用于蓝绿部署，权重范围 0 - 100 按百分比将请求路由到 Canary Ingress 中指定的服务。权重为 0 意味着该金丝雀规则不会向 Canary 入口的服务发送任何请求，权重为 100 意味着所有请求都将被发送到 Canary 入口。</li>
<li><code>nginx.ingress.kubernetes.io/canary-by-cookie</code>: 基于 cookie 的流量切分，适用于灰度发布与 A/B 测试。用于通知 Ingress 将请求路由到 Canary Ingress 中指定的服务的cookie。当 cookie 值设置为 always 时，它将被路由到 Canary 入口；当 cookie 值设置为 never 时，请求不会被发送到 Canary 入口；对于任何其他值，将忽略 cookie 并将请求与其他金丝雀规则进行优先级的比较。</li>
</ul>
<blockquote>
<p>Canary 规则按优先顺序进行评估。优先级如下：<code>canary-by-header -&gt; canary-by-cookie -&gt; canary-weight</code></p>
</blockquote>
<p>把以上的四个 annotation 规则可以总体划分为以下两类：</p>
<h3 id="基于权重的的canary规则">基于权重的的Canary规则</h3>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="img" loading="lazy" src="https://pek3b.qingstor.com/kubesphere-docs/png/20190826201233.png"></p>
<h3 id="基于用户请求的canary规则">基于用户请求的Canary规则</h3>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="img" loading="lazy" src="https://pek3b.qingstor.com/kubesphere-docs/png/20190826204915.png"></p>
<h3 id="灰度验证">灰度验证</h3>
<ol>
<li>首先我们先创建一个基于<code>Producation</code>版本的应用</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">production-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">production </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">production-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mirrorgooglecontainers/echoserver:1.10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">NODE_NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">spec.nodeName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_NAMESPACE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_IP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">status.podIP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">production-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span></code></pre></div><ol>
<li>创建Production 版本的应用路由 (Ingress)。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">production-ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">prod.qingyang.com </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">production-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div><ol>
<li>创建Canary版本的应用上线</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">canary-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">canary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">canary-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">canary-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mirrorgooglecontainers/echoserver:1.10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">NODE_NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">spec.nodeName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_NAMESPACE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_IP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">status.podIP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">canary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">canary-app</span><span class="w">
</span></span></span></code></pre></div><h4 id="基于权重的canary规则">基于权重的Canary规则</h4>
<p>基于权重的流量切分的典型应用场景就是<code>蓝绿部署</code>，可通过将权重设置为 0 或 100 来实现。例如，可将 Green 版本设置为主要部分，并将 Blue 版本的入口配置为 Canary。最初，将权重设置为 0，因此不会将流量代理到 Blue 版本。一旦新版本测试和验证都成功后，即可将 Blue 版本的权重设置为 100，即所有流量从 Green 版本转向 Blue。</p>
<blockquote>
<p>以下 Ingress 示例的 Canary 版本使用了<strong>基于权重进行流量切分</strong>的 annotation 规则，将分配 <strong>30%</strong> 的流量请求发送至 Canary 版本。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w"> </span><span class="c"># 开启canary机制</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary-weight</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30&#34;</span><span class="w"> </span><span class="c"># 切分30的流量到canary版本中</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">prod.qingyang.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>应用的 Canary 版本基于权重 (30%) 进行流量切分后，访问到 Canary 版本的概率接近 30%，流量比例可能会有小范围的浮动。</p>
</blockquote>
<h4 id="基于-request-header">基于 Request Header</h4>
<p>基于 Request Header 进行流量切分的典型应用场景即<code>灰度发布或 A/B 测试场景</code>。参考以下截图，在 KubeSphere 给 Canary 版本的应用路由 (Ingress) 新增一条 annotation <code>nginx.ingress.kubernetes.io/canary-by-header: canary</code>(这里的 annotation 的 value 可以是任意值)，使当前的 Ingress 实现基于 Request Header 进行流量切分。</p>
<blockquote>
<p>金丝雀规则按优先顺序 <code>canary-by-header - &gt; canary-by-cookie - &gt; canary-weight</code>进行如下排序，因此以下情况将忽略原有 canary-weight 的规则。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary-by-header</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;canary-header&#34;</span><span class="w"> </span><span class="c"># 添加header</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w"> </span><span class="c"># 开启canary机制</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary-weight</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30&#34;</span><span class="w"> </span><span class="c"># 切分30的流量到canary版本中</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">prod.qingyang.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div><p>我们尝试访问一下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># for i in $(seq 1 10); do curl -s prod.qingyang.com | grep &#34;Hostname&#34;; done</span>
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: canary-demo-54dfb9bd-n2zlg
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span></code></pre></div><p>尝试加入请求头访问</p>
<ul>
<li>如果你的<code>canary-header</code>的值为<code>never</code>则表示请求永远不会请求到当前版本,如果你的<code>canary-header</code>的值设置为<code>always</code>的话则表示永远请求当前版本</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># for i in $(seq 1 10); do curl -s -H &#34;canary-header: never&#34; prod.qingyang.com | grep &#34;Hostname&#34;; done</span>
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">Hostname: production-app-678488687f-s4sbd
</span></span><span class="line"><span class="cl">------------------------------------------------
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># for i in $(seq 1 10); do curl -s -H &#34;canary-header: always&#34; prod.qingyang.com | grep &#34;Hostname&#34;; done</span>
</span></span><span class="line"><span class="cl">Hostname: canary-demo-54dfb9bd-n2zlg
</span></span><span class="line"><span class="cl">Hostname: canary-demo-54dfb9bd-n2zlg
</span></span><span class="line"><span class="cl">Hostname: canary-demo-54dfb9bd-n2zlg
</span></span><span class="line"><span class="cl">Hostname: canary-demo-54dfb9bd-n2zlg
</span></span><span class="line"><span class="cl">Hostname: canary-demo-54dfb9bd-n2zlg
</span></span><span class="line"><span class="cl">Hostname: canary-demo-54dfb9bd-n2zlg
</span></span><span class="line"><span class="cl">Hostname: canary-demo-54dfb9bd-n2zlg
</span></span><span class="line"><span class="cl">Hostname: canary-demo-54dfb9bd-n2zlg
</span></span><span class="line"><span class="cl">Hostname: canary-demo-54dfb9bd-n2zlg
</span></span><span class="line"><span class="cl">Hostname: canary-demo-54dfb9bd-n2zlg
</span></span></code></pre></div><p>如果你想让用户请求到指定的服务上可以添加<code>ginx.ingress.kubernetes.io/canary-by-header-value: user-value</code>,当请求访问携带<code>canary-header: user-value</code>的时候,那么该请求会被转发到<code>canary</code>版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary-by-header-value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;user-value&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary-by-header</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;canary-header&#34;</span><span class="w"> </span><span class="c"># 添加header</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w"> </span><span class="c"># 开启canary机制</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary-weight</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30&#34;</span><span class="w"> </span><span class="c"># 切分30的流量到canary版本中</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">prod.qingyang.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div><h4 id="基于-cookie的canary">基于 Cookie的canary</h4>
<p>与基于 Request Header 的 annotation 用法规则类似。例如在 <code>A/B 测试场景</code>下，需要让地域为北京的用户访问 Canary 版本。那么当 cookie 的 annotation 设置为 <code>nginx.ingress.kubernetes.io/canary-by-cookie: &quot;users_from_beijing&quot;</code>，此时后台可对登录的用户请求进行检查，如果该用户访问源来自北京则设置 cookie <code>users_from_beijing</code>的值为 <code>always</code>，这样就可以确保北京的用户仅访问 Canary 版本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary-by-cookie</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;user_from_beijing&#34;</span><span class="w"> </span><span class="c"># 添加cookie</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w"> </span><span class="c"># 开启canary机制</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary-weight</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30&#34;</span><span class="w"> </span><span class="c"># 切分30的流量到canary版本中</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">prod.qingyang.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div><h2 id="自签https">自签HTTPS</h2>
<p>如果我们需要用 HTTPS 来访问我们这个应用的话，就需要监听 443 端口了，同样用 HTTPS 访问应用必然就需要证书，这里我们用 <code>openssl</code> 来创建一个自签名的证书：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">openssl req -x509 -nodes -days <span class="m">365</span> -newkey rsa:2048 -keyout tls.key -out tls.crt -subj <span class="s2">&#34;/CN=prod.qingyang.com&#34;</span>
</span></span></code></pre></div><p>创建<code>tls</code>类型的<code>secret</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create secret tls self-sign-nginx --cert<span class="o">=</span>tls.crt --key<span class="o">=</span>tls.key
</span></span></code></pre></div><p>创建带<code>tls</code>的<code>ingress</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">canary-ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w"> </span><span class="c"># 开启canary机制</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nginx.ingress.kubernetes.io/canary-weight</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30&#34;</span><span class="w"> </span><span class="c"># 切分30的流量到canary版本中</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">prod.qingyang.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">prod.qingyang.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">self-sign-nginx</span><span class="w">
</span></span></span></code></pre></div><h2 id="certmanager-自动-https">CertManager 自动 HTTPS</h2>
<p>cert-manager 将证书和证书颁发者作为资源类型添加到 Kubernetes 集群中，并简化了这些证书的获取、更新和使用过程。</p>
<p>它可以从各种受支持的来源颁发证书，包括 <a class="link" href="https://letsencrypt.org/"  target="_blank" rel="noopener"
    >Let’s Encrypt</a>、<a class="link" href="https://www.vaultproject.io/"  target="_blank" rel="noopener"
    >HashiCorp Vault</a>和<a class="link" href="https://www.venafi.com/"  target="_blank" rel="noopener"
    >Venafi</a>以及私有 PKI。</p>
<p>它将确保证书有效且最新，并尝试在到期前的配置时间更新证书。</p>
<p>它大致基于 <a class="link" href="https://github.com/jetstack/kube-lego"  target="_blank" rel="noopener"
    >kube-lego</a>的工作，并借鉴了其他类似项目（例如 <a class="link" href="https://github.com/PalmStoneGames/kube-cert-manager"  target="_blank" rel="noopener"
    >kube-cert-manager）</a>的一些智慧。</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="CertManager工作原理" loading="lazy" src="https://cert-manager.io/images/high-level-overview.svg"></p>
<ul>
<li><code>Issuers</code>: 代表的是证书颁发者，可以定义各种提供者的证书颁发者，当前支持基于 <code>Let's Encrypt/HashiCorp/Vault</code> 和 CA 的证书颁发者，还可以定义不同环境下的证书颁发者。</li>
<li><code>Certificates</code>: 代表的是生成证书的请求.</li>
</ul>
<h3 id="部署cert-manager">部署cert-manager</h3>
<p>好像这个<code>quay.io</code>能拉下来了…</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml
</span></span></code></pre></div><p>正常部署完成可以看到Pod正在运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get pods -n cert-manager</span>
</span></span><span class="line"><span class="cl">NAME                                       READY   STATUS    RESTARTS   AGE
</span></span><span class="line"><span class="cl">cert-manager-6499989f7-m6vdj               1/1     Running   <span class="m">0</span>          2m30s
</span></span><span class="line"><span class="cl">cert-manager-cainjector-645b688547-xjcb8   1/1     Running   <span class="m">0</span>          2m30s
</span></span><span class="line"><span class="cl">cert-manager-webhook-6b7f49999f-mcnf7      1/1     Running   <span class="m">0</span>          2m30s
</span></span></code></pre></div><p>我们可以通过下面的测试来验证下是否可以签发基本的证书类型，创建一个 Issuer 资源对象来测试 webhook 工作是否正常(在开始签发证书之前，必须在群集中至少配置一个 Issuer 或 ClusterIssuer 资源)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager-test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Issuer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-selfsigned</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager-test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selfSigned</span><span class="p">:</span><span class="w"> </span>{}<span class="w">  </span><span class="c"># 配置自签名的证书机构类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Certificate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">selfsigned-cert</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager-test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dnsNames</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">selfsigned-cert-tls</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">issuerRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">test-selfsigned</span><span class="w">
</span></span></span></code></pre></div><h3 id="自动https">自动HTTPS</h3>
<p><code>Let's Encrypt</code> 使用 <code>ACME</code> 协议来校验域名是否真的属于你，校验成功后就可以自动颁发免费证书，证书有效期只有 90 天，在到期前需要再校验一次来实现续期，而 cert-manager 是可以自动续期的，所以事实上并不用担心证书过期的问题。目前主要有 HTTP 和 DNS 两种校验方式。</p>
<h4 id="http-01-校验">HTTP-01 校验</h4>
<p><code>HTTP-01</code> 的校验是通过给你域名指向的 HTTP 服务增加一个临时 location，在校验的时候 <code>Let's Encrypt</code> 会发送 http 请求到 <code>http://&lt;YOUR_DOMAIN&gt;/.well-known/acme-challenge/&lt;TOKEN&gt;</code>，其中 <code>YOUR_DOMAIN</code> 就是被校验的域名，<code>TOKEN</code> 是 cert-manager 生成的一个路径，它通过修改 Ingress 规则来增加这个临时校验路径并指向提供 TOKEN 的服务。<code>Let's Encrypt</code> 会对比 TOKEN 是否符合预期，校验成功后就会颁发证书了，不过这种方法不支持泛域名证书。</p>
<p>使用 HTTP 校验这种方式，首先需要将域名解析配置好，也就是需要保证 ACME 服务端可以正常访问到你的 HTTP 服务。这里我们以上面的 TODO 应用为例，我们已经将 <code>demo.qingyang.com</code> 域名做好了正确的解析。</p>
<p>由于 Let’s Encrypt 的生产环境有着严格的接口调用限制，所以一般我们需要先在 staging 环境测试通过后，再切换到生产环境。首先我们创建一个全局范围 staging 环境使用的 HTTP-01 校验方式的证书颁发机构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIssuer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-staging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">acme</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ACME服务端地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">https://acme-staging-v02.api.letsencrypt.org/directory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 注册ACME的邮箱</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">ailunbolinkenasi@gmail.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 用于存放ACME帐号privateKey的secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">privateKeySecretRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example-issuer-account-key</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">solvers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">http01</span><span class="p">:</span><span class="w">  </span><span class="c"># ACME的类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">class</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w"> </span><span class="c"># 指定ingress的名称</span><span class="w">
</span></span></span></code></pre></div><p>接下来我们就可以生成免费证书了，cert-manager 给我们提供了 <code>Certificate</code> 这个用于生成证书的自定义资源对象，不过这个对象需要在一个具体的命名空间下使用，证书最终会在这个命名空间下以 Secret 的资源对象存储。我们这里是要结合 ingress-nginx 一起使用，实际上我们只需要修改 Ingress 对象，添加上 cert-manager 的相关注解即可，不需要手动创建 Certificate 对象了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">https-ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cert-manager.io/cluster-issuer</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;letsencrypt-staging&#34;</span><span class="w">  </span><span class="c"># 使用哪个issuer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">demo.qingyang.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">demo-qingyang-com-tls  </span><span class="w"> </span><span class="c"># 用于存储证书的Secret对象名字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">demo.qingyang.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vue-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div><p>创建完成后会多出一个<code>ingress</code>对象,主要是为了让<code>acme</code>可以访问到当前的的<code>token</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get ingress</span>
</span></span><span class="line"><span class="cl">NAME                        CLASS    HOSTS               ADDRESS                         PORTS     AGE
</span></span><span class="line"><span class="cl">cm-acme-http-solver-xpxm7   &lt;none&gt;   demo.qingyang.com   10.1.6.24,10.1.6.45,10.1.6.48   <span class="m">80</span>        7m51s
</span></span><span class="line"><span class="cl">https-ingress               nginx    demo.qingyang.com   10.1.6.24,10.1.6.45,10.1.6.48   80, <span class="m">443</span>   7m55s
</span></span></code></pre></div><p>可以查看当前的<code>acme</code>认证,其中<code>/.well-known/acme-challenge/pVY-ihomZPdlWDMt44cV9qZUwMQScjHvd3Zkf_FDLRI</code>是被验证对象</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl describe ingress cm-acme-http-solver-xpxm7</span>
</span></span><span class="line"><span class="cl">Name:             cm-acme-http-solver-xpxm7
</span></span><span class="line"><span class="cl">Labels:           acme.cert-manager.io/http-domain<span class="o">=</span><span class="m">1002178207</span>
</span></span><span class="line"><span class="cl">                  acme.cert-manager.io/http-token<span class="o">=</span><span class="m">1266355919</span>
</span></span><span class="line"><span class="cl">                  acme.cert-manager.io/http01-solver<span class="o">=</span><span class="nb">true</span>
</span></span><span class="line"><span class="cl">Namespace:        default
</span></span><span class="line"><span class="cl">Address:          10.1.6.24,10.1.6.45,10.1.6.48
</span></span><span class="line"><span class="cl">Ingress Class:    &lt;none&gt;
</span></span><span class="line"><span class="cl">Default backend:  &lt;default&gt;
</span></span><span class="line"><span class="cl">Rules:
</span></span><span class="line"><span class="cl">  Host               Path  Backends
</span></span><span class="line"><span class="cl">  ----               ----  --------
</span></span><span class="line"><span class="cl">  demo.qingyang.com
</span></span><span class="line"><span class="cl">                     /.well-known/acme-challenge/pVY-ihomZPdlWDMt44cV9qZUwMQScjHvd3Zkf_FDLRI   cm-acme-http-solver-f4ntj:8089 <span class="o">(</span>10.10.180.124:8089<span class="o">)</span>
</span></span><span class="line"><span class="cl">Annotations:         kubernetes.io/ingress.class: nginx
</span></span><span class="line"><span class="cl">                     nginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0,::/0
</span></span><span class="line"><span class="cl">Events:
</span></span><span class="line"><span class="cl">  Type    Reason  Age                    From                      Message
</span></span><span class="line"><span class="cl">  ----    ------  ----                   ----                      -------
</span></span><span class="line"><span class="cl">  Normal  Sync    7m46s <span class="o">(</span>x2 over 8m13s<span class="o">)</span>  nginx-ingress-controller  Scheduled <span class="k">for</span> sync
</span></span><span class="line"><span class="cl">  Normal  Sync    7m46s <span class="o">(</span>x2 over 8m13s<span class="o">)</span>  nginx-ingress-controller  Scheduled <span class="k">for</span> sync
</span></span><span class="line"><span class="cl">  Normal  Sync    7m46s <span class="o">(</span>x2 over 8m13s<span class="o">)</span>  nginx-ingress-controller  Scheduled <span class="k">for</span> sync
</span></span></code></pre></div><p>你可以尝试访问<code>https://demo.qingyang.com/.well-known/acme-challenge/pVY-ihomZPdlWDMt44cV9qZUwMQScjHvd3Zkf_FDLRI</code>。正常会出现具体的<code>验证密钥</code>即成功.</p>
<blockquote>
<p>由于我的是本地自己搭建的kubernetes集群,没有外部解析的访问权限所以这个地方就没办法给大家演示了。</p>
</blockquote>
<h4 id="dns-01-校验">DNS-01 校验</h4>
<p><code>NS-01</code> 的校验是通过 DNS 提供商的 API 拿到你的 DNS 控制权限， 在 <code>Let's Encrypt</code> 为 cert-manager 提供 TOKEN 后，cert-manager 将创建从该 TOKEN 和你的帐户密钥派生的 <code>TXT</code> 记录，并将该记录放在 <code>_acme-challenge.&lt;YOUR_DOMAIN&gt;</code>。然后 <code>Let's Encrypt</code> 将向 DNS 系统查询该记录，如果找到匹配项，就可以颁发证书，这种方法是支持泛域名证书的。</p>
<p>DNS-01 支持多种不同的服务提供商，直接在 Issuer 或者 ClusterIssuer 中可以直接配置，对于一些不支持的 DNS 服务提供商可以使用外部 webhook 来提供支持，比如阿里云的 DNS 解析默认情况下是不支持的，我们可以使用阿里云这个 webhook 来提供支持。</p>
<ul>
<li><a class="link" href="https://github.com/pragkent/alidns-webhook"  target="_blank" rel="noopener"
    >alidns-webhook</a></li>
</ul>
<ol>
<li>安装<code>alidns-webhook</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -f https://raw.githubusercontent.com/pragkent/alidns-webhook/master/deploy/bundle.yaml
</span></span></code></pre></div><ol>
<li>接着创建一个包含访问阿里云 DNS 认证密钥信息的 Secret 对象，对应的 <code>accessk-key</code> 和 <code>secret-key</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create secret generic alidns-secret --from-literal<span class="o">=</span>access-key<span class="o">=</span>YOUR_ACCESS_KEY --from-literal<span class="o">=</span>secret-key<span class="o">=</span>YOUR_SECRET_KEY -n cert-manager
</span></span></code></pre></div><ol>
<li>接下来同样首先创建一个 staging 环境的 DNS 类型的证书机构资源对象</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIssuer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-staging-dns01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">acme</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">https://acme-staging-v02.api.letsencrypt.org/directory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">beilanzhisen@163.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">privateKeySecretRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-staging-dns01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">solvers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">dns01</span><span class="p">:</span><span class="w">   </span><span class="c"># ACME DNS-01 类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">webhook</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">groupName</span><span class="p">:</span><span class="w"> </span><span class="l">acme.yourcompany.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">solverName</span><span class="p">:</span><span class="w"> </span><span class="l">alidns</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">region</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">accessKeySecretRef</span><span class="p">:</span><span class="w">  </span><span class="c"># 引用 ak</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">alidns-secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">access-key</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">secretKeySecretRef</span><span class="p">:</span><span class="w">  </span><span class="c"># 引用 sk</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">alidns-secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">secret-key</span><span class="w">
</span></span></span></code></pre></div><p>接下来我们就可以使用上面的 ClusterIssuer 对象来或者证书数据了，创建如下所示的 Certificate 资源对象</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Certificate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">qingyang-com-cert</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">qingyang-com-tls</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">commonName</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*.qingyang.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dnsNames</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">qingyang.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="s2">&#34;*.qingyang.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">issuerRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-staging-dns01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIssuer</span><span class="w">
</span></span></span></code></pre></div><p>后我们就可以直接在 Ingress 资源对象中使用上面的 Secret 对象了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">https-ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cert-manager.io/cluster-issuer</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;letsencrypt-staging&#34;</span><span class="w">  </span><span class="c"># 使用哪个issuer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingressClassName</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">hosts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;*.qingyang.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">qingyang-com-tls  </span><span class="w"> </span><span class="c"># 用于存储证书的Secret对象名字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">demo.qingyang.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">paths</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">Prefix</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">backend</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vue-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>CacheDNS和DNS缓存</title>
      <link>https://blog.mletter.cn/tech/kubernetes/nodelocaldns/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/nodelocaldns/</guid>
      <description>如果在集群规模较大并发较高的情况下我们仍然需要对 DNS 进行优化，典型的就是大家比较熟悉的 CoreDNS 会出现超时5s的情况。</description>
      <content:encoded><![CDATA[<p>如果在集群规模较大并发较高的情况下我们仍然需要对 DNS 进行优化，典型的就是大家比较熟悉的 CoreDNS 会出现超时5s的情况。</p>
<h2 id="超时原因">超时原因</h2>
<p>在 iptables 模式下（默认情况下），每个服务的 kube-proxy 在主机网络名称空间的 nat 表中创建一些 iptables 规则。 比如在集群中具有两个 DNS 服务器实例的 kube-dns 服务，其相关规则大致如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>1<span class="o">)</span> -A PREROUTING -m comment --comment <span class="s2">&#34;kubernetes service portals&#34;</span> -j KUBE-SERVICES
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl"><span class="o">(</span>2<span class="o">)</span> -A KUBE-SERVICES -d 10.96.0.10/32 -p udp -m comment --comment <span class="s2">&#34;kube-system/kube-dns:dns cluster IP&#34;</span> -m udp --dport <span class="m">53</span> -j KUBE-SVC-TCOU7JCQXEZGVUNU
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl"><span class="o">(</span>3<span class="o">)</span> -A KUBE-SVC-TCOU7JCQXEZGVUNU -m comment --comment <span class="s2">&#34;kube-system/kube-dns:dns&#34;</span> -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-LLLB6FGXBLX6PZF7
</span></span><span class="line"><span class="cl"><span class="o">(</span>4<span class="o">)</span> -A KUBE-SVC-TCOU7JCQXEZGVUNU -m comment --comment <span class="s2">&#34;kube-system/kube-dns:dns&#34;</span> -j KUBE-SEP-LRVEW52VMYCOUSMZ
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl"><span class="o">(</span>5<span class="o">)</span> -A KUBE-SEP-LLLB6FGXBLX6PZF7 -p udp -m comment --comment <span class="s2">&#34;kube-system/kube-dns:dns&#34;</span> -m udp -j DNAT --to-destination 10.32.0.6:53
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl"><span class="o">(</span>6<span class="o">)</span> -A KUBE-SEP-LRVEW52VMYCOUSMZ -p udp -m comment --comment <span class="s2">&#34;kube-system/kube-dns:dns&#34;</span> -m udp -j DNAT --to-destination 10.32.0.7:53
</span></span></code></pre></div><p>我们知道每个 Pod 的 <code>/etc/resolv.conf</code> 文件中都有填充的 <code>nameserver 10.96.0.10</code> 这个条目。所以来自 Pod 的 DNS 查找请求将发送到 <code>10.96.0.10</code>，这是 kube-dns 服务的 ClusterIP 地址。 由于 <code>(1)</code> 请求进入 <code>KUBE-SERVICE</code> 链，然后匹配规则 <code>(2)</code>，最后根据 <code>(3)</code> 的 random 随机模式，跳转到 (5) 或 (6) 条目，将请求 UDP 数据包的目标 IP 地址修改为 DNS 服务器的<code>实际</code> IP 地址，这是通过 <code>DNAT</code> 完成的。其中 <code>10.32.0.6</code> 和 <code>10.32.0.7</code> 是我们集群中 CoreDNS 的两个 Pod 副本的 IP 地址。</p>
<h2 id="内核中的dnat">内核中的DNAT</h2>
<p><code>DNAT</code> 的主要职责是同时更改传出数据包的目的地，响应数据包的源，并确保对所有后续数据包进行相同的修改。后者严重依赖于连接跟踪机制，也称为 <code>conntrack</code>，它被实现为内核模块。<code>conntrack</code> 会跟踪系统中正在进行的网络连接。</p>
<p><code>conntrack</code> 中的每个连接都由两个元组表示，一个元组用于原始请求（IP_CT_DIR_ORIGINAL），另一个元组用于答复（IP_CT_DIR_REPLY）。对于 UDP，每个元组都由源 IP 地址，源端口以及目标 IP 地址和目标端口组成，答复元组包含存储在src 字段中的目标的真实地址。</p>
<p>例如，如果 IP 地址为 <code>10.40.0.17</code> 的 Pod 向 kube-dns 的 ClusterIP 发送一个请求，该请求被转换为 <code>10.32.0.6</code>，则将创建以下元组：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">原始：src <span class="o">=</span> 10.40.0.17 <span class="nv">dst</span> <span class="o">=</span> 10.96.0.10 <span class="nv">sport</span> <span class="o">=</span> <span class="m">53378</span> <span class="nv">dport</span> <span class="o">=</span> <span class="m">53</span>
</span></span><span class="line"><span class="cl">回复：src <span class="o">=</span> 10.32.0.6 <span class="nv">dst</span> <span class="o">=</span> 10.40.0.17 <span class="nv">sport</span> <span class="o">=</span> <span class="m">53</span> <span class="nv">dport</span> <span class="o">=</span> <span class="m">53378</span>
</span></span></code></pre></div><p>通过这些条目内核可以相应地修改任何相关数据包的目的地和源地址，而无需再次遍历 DNAT 规则，此外，它将知道如何修改回复以及应将回复发送给谁。创建 <code>conntrack</code> 条目后，将首先对其进行确认，然后如果没有已确认的 <code>conntrack</code> 条目具有相同的原始元组或回复元组，则内核将尝试确认该条目。</p>
<blockquote>
<p>具体原因可以参考 weave works 总结的文章 <a class="link" href="https://www.weave.works/blog/racy-conntrack-and-dns-lookup-timeouts"  target="_blank" rel="noopener"
    >Racy conntrack and DNS lookup timeouts</a></p>
</blockquote>
<ul>
<li>只有多个线程或进程，并发从同一个 socket 发送相同五元组的 UDP 报文时，才有一定概率会发生</li>
<li>glibc、musl（alpine linux 的 libc 库）都使用 <code>parallel query</code>, 就是并发发出多个查询请求，因此很容易碰到这样的冲突，造成查询请求被丢弃</li>
<li>由于 ipvs 也使用了 conntrack, 使用 kube-proxy 的 ipvs 模式，并不能避免这个问题</li>
</ul>
<h3 id="解决方法">解决方法</h3>
<p>要彻底解决这个问题最好当然是内核上去 FIX 掉这个 BUG，除了这种方法之外我们还可以使用其他方法来进行规避，我们可以避免相同五元组 DNS请求的并发。</p>
<p>在 <code>resolv.conf</code> 中就有两个相关的参数可以进行配置：</p>
<ul>
<li><code>single-request-reopen</code>：发送 A 类型请求和 AAAA 类型请求使用不同的源端口，这样两个请求在 conntrack 表中不占用同一个表项，从而避免冲突。</li>
<li><code>single-request</code>：避免并发，改为串行发送 A 类型和 AAAA 类型请求。没有了并发，从而也避免了冲突。</li>
</ul>
<ol>
<li>Pod 的 postStart hook 中添加</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">lifecycle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">postStart</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/bin/sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- -<span class="l">c </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;/bin/echo &#39;options single-request-reopen&#39; &gt;&gt; /etc/resolv.conf&#34;</span><span class="w">
</span></span></span></code></pre></div><ol start="2">
<li>使用 <code>template.spec.dnsConfig</code> 配置</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dnsConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">options</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">single-request-reopen	</span><span class="w">
</span></span></span></code></pre></div><ol start="3">
<li>使用 ConfigMap 覆盖 Pod 里面的 <code>/etc/resolv.conf</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># configmap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resolv.conf</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    nameserver 1.2.3.4
</span></span></span><span class="line"><span class="cl"><span class="sd">    search default.svc.cluster.local svc.cluster.local cluster.local
</span></span></span><span class="line"><span class="cl"><span class="sd">    options ndots:5 single-request-reopen timeout:1</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">resolvconf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Pod Spec</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">resolv-conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/resolv.conf   </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="l">resolv.conf </span><span class="w"> </span><span class="c"># 在某个目录下面挂载一个文件（保证不覆盖当前目录）需要使用subPath -&gt; 不支持热更新</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">resolv-conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">resolvconf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">items</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">resolv.conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">resolv.conf</span><span class="w">
</span></span></span></code></pre></div><h2 id="nodelocal-dnscache">NodeLocal DNSCache</h2>
<p>NodeLocal DNSCache 通过在集群节点上作为 DaemonSet 运行 DNS 缓存代理来提高集群 DNS 性能。 在当今的体系结构中，运行在 <code>ClusterFirst</code> DNS 模式下的 Pod 可以连接到 kube-dns <code>serviceIP</code> 进行 DNS 查询。 通过 kube-proxy 添加的 iptables 规则将其转换为 kube-dns/CoreDNS 端点。 借助这种新架构，Pod 将可以访问在同一节点上运行的 DNS 缓存代理，从而避免 iptables DNAT 规则和连接跟踪。 本地缓存代理将查询 kube-dns 服务以获取集群主机名的缓存缺失（默认为 “<code>cluster.local</code>” 后缀）。</p>
<h3 id="动机">动机</h3>
<ul>
<li>使用当前的 DNS 体系结构，如果没有本地 kube-dns/CoreDNS 实例，则具有最高 DNS QPS 的 Pod 可能必须延伸到另一个节点。 在这种场景下，拥有本地缓存将有助于改善延迟。</li>
<li>跳过 iptables DNAT 和连接跟踪将有助于减少 <a class="link" href="https://github.com/kubernetes/kubernetes/issues/56903"  target="_blank" rel="noopener"
    >conntrack 竞争</a>并避免 UDP DNS 条目填满 conntrack 表。</li>
<li>从本地缓存代理到 kube-dns 服务的连接可以升级为 TCP。 TCP conntrack 条目将在连接关闭时被删除，相反 UDP 条目必须超时 （<a class="link" href="https://www.kernel.org/doc/Documentation/networking/nf_conntrack-sysctl.txt"  target="_blank" rel="noopener"
    >默认</a> <code>nf_conntrack_udp_timeout</code> 是 30 秒）。</li>
<li>将 DNS 查询从 UDP 升级到 TCP 将减少由于被丢弃的 UDP 包和 DNS 超时而带来的尾部等待时间； 这类延时通常长达 30 秒（3 次重试 + 10 秒超时）。 由于 nodelocal 缓存监听 UDP DNS 查询，应用不需要变更。</li>
<li>在节点级别对 DNS 请求的度量和可见性。</li>
<li>可以重新启用负缓存，从而减少对 kube-dns 服务的查询数量。</li>
</ul>
<p>工作原理如下</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="NodeLocal DNSCache 流" loading="lazy" src="https://d33wubrfki0l68.cloudfront.net/bf8e5eaac697bac89c5b36a0edb8855c860bfb45/6944f/images/docs/nodelocaldns.svg"></p>
<p>此图显示了 NodeLocal DNSCache 如何处理 DNS 查询</p>
<h3 id="安装nodelocaldns">安装NodeLocalDNS</h3>
<p>直接从官方的资源清单当中获取即可</p>
<ul>
<li><code>image</code>：默认镜像国内是下载不了的请更换地址</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/nodelocaldns/nodelocaldns.yaml
</span></span><span class="line"><span class="cl"><span class="c1"># 下载完成请更换image地址： registry.cn-beijing.aliyuncs.com/custom_img/k8s-dns-node-cache:1.22.18</span>
</span></span></code></pre></div><p>注意资源清单中的几个变量信息</p>
<ul>
<li><code>__PILLAR__DNS__SERVER__</code>：表示 kube-dns 这个 Service 的 ClusterIP。</li>
<li><code>__PILLAR__LOCAL__DNS__</code>: 表示 DNSCache 本地的 IP，默认为 <code>169.254.20.10</code></li>
<li><code>__PILLAR__DNS__DOMAIN__</code>: 表示集群域，默认就是 <code>cluster.local</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 通过以下命令进行获取</span>
</span></span><span class="line"><span class="cl">kubectl get svc kube-dns -n kube-system -o <span class="nv">jsonpath</span><span class="o">={</span>.spec.clusterIP<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 修改部分变量信息</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/__PILLAR__DNS__SERVER__/10.10.0.10/g
</span></span></span><span class="line"><span class="cl"><span class="s1">s/__PILLAR__LOCAL__DNS__/169.254.20.10/g
</span></span></span><span class="line"><span class="cl"><span class="s1">s/__PILLAR__DNS__DOMAIN__/cluster.local/g&#39;</span> nodelocaldns.yaml 
</span></span><span class="line"><span class="cl"><span class="c1"># 创建资源配置清单</span>
</span></span><span class="line"><span class="cl">kubectl apply -f nodelocaldns.yaml
</span></span></code></pre></div><ul>
<li>如果 kube-proxy 运行在 IPVS 模式(因为我是<code>ipvs</code>的模式)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i <span class="s2">&#34;s/__PILLAR__LOCAL__DNS__/</span><span class="nv">$localdns</span><span class="s2">/g; s/__PILLAR__DNS__DOMAIN__/</span><span class="nv">$domain</span><span class="s2">/g; s/,__PILLAR__DNS__SERVER__//g; s/__PILLAR__CLUSTER__DNS__/</span><span class="nv">$kubedns</span><span class="s2">/g&#34;</span> nodelocaldns.yaml
</span></span></code></pre></div><p>在此模式下，node-local-dns Pod 只会侦听 <code>&lt;node-local-address&gt;</code> 的地址。 node-local-dns 接口不能绑定 kube-dns 的集群 IP 地址，因为 IPVS 负载均衡使用的接口已经占用了该地址。 node-local-dns Pod 会设置 <code>__PILLAR__UPSTREAM__SERVERS__</code>。</p>
<p>查看Pod是否运行成功</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get pods -n kube-system | grep node-local-dns</span>
</span></span><span class="line"><span class="cl">node-local-dns-578vf                             1/1     Running   <span class="m">0</span>             5m23s
</span></span><span class="line"><span class="cl">node-local-dns-5jhcl                             1/1     Running   <span class="m">0</span>             5m23s
</span></span><span class="line"><span class="cl">node-local-dns-8hz5j                             1/1     Running   <span class="m">0</span>             5m23s
</span></span><span class="line"><span class="cl">node-local-dns-ch44w                             1/1     Running   <span class="m">0</span>             5m23s
</span></span><span class="line"><span class="cl">node-local-dns-jbg2p                             1/1     Running   <span class="m">0</span>             5m23s
</span></span><span class="line"><span class="cl">node-local-dns-t92ww                             1/1     Running   <span class="m">0</span>             5m23s
</span></span></code></pre></div><p>如果 kube-proxy 组件使用的是 ipvs 模式的话我们还需要修改 kubelet 的 <code>--cluster-dns</code> 参数，将其指向 <code>169.254.20.10</code>，Daemonset 会在每个节点创建一个网卡来绑这个 IP，Pod 向本节点这个 IP 发 DNS 请求，缓存没有命中的时候才会再代理到上游集群 DNS 进行查询。</p>
<blockquote>
<p>如果担心线上环境修改 <code>--cluster-dns</code> 参数会产生影响，我们也可以直接在新部署的 Pod 中通过 dnsConfig 配置使用新的 localdns 的地址来进行解析。</p>
</blockquote>
<ol>
<li>通过修改<code>--cluster-dns</code>实现</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 1. 首先查看当前的proxy模式</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get cm kube-proxy -n kube-system -o yaml | grep mode</span>
</span></span><span class="line"><span class="cl">    mode: <span class="s2">&#34;ipvs&#34;</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/10.10.0.10/169.254.20.10/g&#39;</span> /var/lib/kubelet/config.yaml
</span></span><span class="line"><span class="cl">systemctl daemon-reload <span class="o">&amp;&amp;</span> systemctl restart kubelet
</span></span></code></pre></div><ol start="2">
<li>Pod中通过dnsConfig配置使用localdns</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">dnsConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nameservers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="m">169.254.20.10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">searches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">default.svc.cluster.local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">svc.cluster.local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">cluster.local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">options</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ndots</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">dnsPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>由于指定<code>nameservers</code>属于<code>append</code>操作，如果需要忽略原来的dns地址请使用<code>dnsPolicy: None</code></p>
</blockquote>
<h2 id="coredns的性能优化">CoreDns的性能优化</h2>
<ol>
<li>合理控制CoreDNS的副本数量</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl -n kube-system scale --replicas<span class="o">=</span><span class="m">10</span> deployment/coredns
</span></span></code></pre></div><ol start="2">
<li>为 coredns 定义 HPA 自动扩缩容。</li>
<li>安装 <a class="link" href="https://github.com/kubernetes-sigs/cluster-proportional-autoscaler"  target="_blank" rel="noopener"
    >cluster-proportional-autoscaler</a> 以实现更精确的扩缩容(推荐)。</li>
<li>禁用IPv6</li>
</ol>
<p>如果 K8S 节点没有禁用 IPV6 的话，容器内进程请求 coredns 时的默认行为是同时发起 IPV4 和 IPV6 解析，而通常我们只需要用到 IPV4，当容器请求某个域名时，coredns 解析不到 IPV6 记录，就会 forward 到 upstream 去解析，如果到 upstream 需要经过较长时间(比如跨公网，跨机房专线)，就会拖慢整个解析流程的速度，业务层面就会感知 DNS 解析慢。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl edit cm coredns -n kube-system
</span></span></code></pre></div><p>Corefile中添加禁用IPv6</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">Corefile</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    .:53 {
</span></span></span><span class="line"><span class="cl"><span class="sd">        errors
</span></span></span><span class="line"><span class="cl"><span class="sd">        health {
</span></span></span><span class="line"><span class="cl"><span class="sd">           lameduck 5s
</span></span></span><span class="line"><span class="cl"><span class="sd">        }
</span></span></span><span class="line"><span class="cl"><span class="sd">        # 添加此内容
</span></span></span><span class="line"><span class="cl"><span class="sd">        template ANY AAAA {
</span></span></span><span class="line"><span class="cl"><span class="sd">           rcode NXDOMAIN
</span></span></span><span class="line"><span class="cl"><span class="sd">        }
</span></span></span><span class="line"><span class="cl"><span class="sd">        ...</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w"></span>}<span class="w">
</span></span></span></code></pre></div><ol>
<li>优化ndots</li>
</ol>
<p>默认情况下，Kubernetes 集群中的域名解析往往需要经过多次请求才能解析到。查看 pod 内 的 <code>/etc/resolv.conf</code> 可以知道 <code>ndots</code> 选项默认为 5</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">root@nginxv1-56f77cbc67-4v4fp:/# cat /etc/resolv.conf 
</span></span><span class="line"><span class="cl">search default.svc.cluster.local svc.cluster.local cluster.local
</span></span><span class="line"><span class="cl">nameserver 10.10.0.10
</span></span><span class="line"><span class="cl">options ndots:5
</span></span></code></pre></div><p>意思是: 如果域名中 <code>.</code> 的数量小于 5，就依次遍历 <code>search</code> 中的后缀并拼接上进行 DNS 查询。</p>
<p>举个例子，在 debug 命名空间查询 <code>kubernetes.default.svc.cluster.local</code> 这个 service:</p>
<ol>
<li>域名中有4个<code>.</code>小于5尝试拼接上第一个 search 进行查询,也就是查询即<code>kubernetes.default.svc.cluster.local.debug.svc.cluster.local</code>查不到该域名。</li>
<li>继续尝试 <code>kubernetes.default.svc.cluster.local.svc.cluster.local</code>，查不到该域名。</li>
<li>继续尝试 <code>kubernetes.default.svc.cluster.local.cluster.local</code>，仍然查不到该域名。</li>
<li>尝试不加后缀，即 <code>kubernetes.default.svc.cluster.local</code>，查询成功，返回响应的 ClusterIP。</li>
</ol>
<p>可以看到一个简单的 service 域名解析需要经过 4 轮解析才能成功，集群中充斥着大量无用的 DNS 请求。</p>
<p>我们可以设置较小的 ndots，在 Pod 的 <code>dnsConfig</code> 中可以设置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginxv1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">terminationMessagePath</span><span class="p">:</span><span class="w"> </span><span class="l">/dev/termination-log</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">terminationMessagePolicy</span><span class="p">:</span><span class="w"> </span><span class="l">File</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">privileged</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 加入dnsConfig进行设置 </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dnsConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">options</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ndots</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2&#34;</span><span class="w">
</span></span></span></code></pre></div><p>然后业务发请求时尽量将 service 域名拼完整，这样就不会经过 search 拼接造成大量多余的 DNS 请求。</p>
<p>不过这样会比较麻烦，有没有更好的办法呢？有的！请看下面的 <code>autopath</code> 方式。</p>
<ol>
<li>启用autopath</li>
</ol>
<p>启用 CoreDNS 的 autopath 插件可以避免每次域名解析经过多次请求才能解析到，原理是 CoreDNS 智能识别拼接过 search 的 DNS 解析，直接响应 CNAME 并附上相应的 ClusterIP，一步到位，可以极大减少集群内 DNS 请求数量。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">kubectl -n kube-system edit configmap coredns</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>{<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;Corefile&#34;: </span><span class="l">&#34;.:53 {</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">errors</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">health {</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="l">lameduck 5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">ready</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">kubernetes cluster.local in-addr.arpa ip6.arpa {</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="l">pods insecure</span><span class="w"> </span><span class="c"># 修改为 pods verified</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="l">fallthrough in-addr.arpa ip6.arpa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="l">ttl 30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">autopath @kubernetes</span><span class="w"> </span><span class="c"># 添加autopath @kubernetes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">prometheus :9153</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">forward . /etc/resolv.conf {</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="l">max_concurrent 1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">template ANY AAAA {</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="l">rcode NXDOMAIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">cache 30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">loop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">reload</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">loadbalance</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>}<span class="w">
</span></span></span></code></pre></div><p>需要注意的是，启用 autopath 后，由于 coredns 需要 watch 所有的 pod，会增加 coredns 的内存消耗，根据情况适当调节 coredns 的 <code>memory request</code> 和 limit。</p>
<ul>
<li>有兴趣的可以去看看这篇文章：<a class="link" href="https://draveness.me/dns-coredns/"  target="_blank" rel="noopener"
    >详解DNS和CoreDNS</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>使用Kubeadm创建一个高可用的ETCD集群</title>
      <link>https://blog.mletter.cn/tech/kubernetes/install-etcd-ha/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/install-etcd-ha/</guid>
      <description>默认情况下，kubeadm 在每个控制平面节点上运行一个本地 etcd 实例。也可以使用外部的 etcd 集群，并在不同的主机上提供 etcd 实例。 这两种方法的区别在 高可用拓扑的选项 页面中阐述。这个任务将指导你创建一个由三个成员组成的高可用外部 etcd 集群，该集群在创建过程中可被 kubeadm 使用。</description>
      <content:encoded><![CDATA[<h2 id="使用kubeadm创建一个高可用的etcd集群">使用Kubeadm创建一个高可用的Etcd集群</h2>
<p>默认情况下，kubeadm 在每个控制平面节点上运行一个本地 etcd 实例。也可以使用外部的 etcd 集群，并在不同的主机上提供 etcd 实例。 这两种方法的区别在 高可用拓扑的选项 页面中阐述。</p>
<p>这个任务将指导你创建一个由三个成员组成的高可用外部 etcd 集群，该集群在创建过程中可被 kubeadm 使用。</p>
<h2 id="准备开始">准备开始</h2>
<ul>
<li>三个可以通过 2379 和 2380 端口相互通信的主机。本文档使用这些作为默认端口。不过，它们可以通过 kubeadm 的配置文件进行自定义。</li>
<li>每个主机必须安装 systemd 和 bash 兼容的 shell。</li>
<li>每台主机必须安装<code>有容器运行时</code>、<code>kubelet</code> 和 <code>kubeadm</code></li>
<li>每个主机都应该能够访问 Kubernetes 容器镜像仓库 (<a class="link" href="http://registry.k8s.io/"  target="_blank" rel="noopener"
    >registry.k8s.io</a>)， 或者使用 kubeadm config images list/pull 列出/拉取所需的 etcd 镜像。 本指南将把 etcd 实例设置为由 kubelet 管理的静态 Pod。</li>
<li>一些可以用来在主机间复制文件的基础设施。例如 ssh 和 scp 就可以满足需求。</li>
</ul>
<blockquote>
<p>本次容器运行时采用<code>Containerd</code>作为Runtime</p>
</blockquote>
<h3 id="将kubelet配置为etcd的服务启动管理器">将Kubelet配置为Etcd的服务启动管理器</h3>
<blockquote>
<p>你必须在要运行 etcd 的所有主机上执行此操作。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat <span class="s">&lt;&lt; EOF &gt; /usr/lib/systemd/system/kubelet.service.d/20-etcd-service-manager.conf 
</span></span></span><span class="line"><span class="cl"><span class="s">[Service]
</span></span></span><span class="line"><span class="cl"><span class="s">ExecStart=
</span></span></span><span class="line"><span class="cl"><span class="s">ExecStart=/usr/bin/kubelet --address=127.0.0.1 --pod-manifest-path=/etc/kubernetes/manifests --cgroup-driver=systemd  --container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock
</span></span></span><span class="line"><span class="cl"><span class="s">Restart=always
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><p>启动kubelet</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl daemon-reload
</span></span><span class="line"><span class="cl">systemctl restart kubelet
</span></span></code></pre></div><blockquote>
<p>注意: 请执行完毕后务必确保<code>kubelet</code>处于<code>running</code>状态。</p>
</blockquote>
<h3 id="为kubeadm创建配置文件">为Kubeadm创建配置文件</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 使用你的主机 IP 替换 HOST0、HOST1 和 HOST2 的 IP 地址</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HOST0</span><span class="o">=</span>10.1.6.48
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HOST1</span><span class="o">=</span>10.1.6.24
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HOST2</span><span class="o">=</span>10.1.6.45
</span></span><span class="line"><span class="cl"><span class="c1"># 使用你的主机名更新 NAME0、NAME1 和 NAME2</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">NAME0</span><span class="o">=</span><span class="s2">&#34;containerd-master1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">NAME1</span><span class="o">=</span><span class="s2">&#34;containerd-master2&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">NAME2</span><span class="o">=</span><span class="s2">&#34;containerd-master3&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 创建临时目录来存储将被分发到其它主机上的文件</span>
</span></span><span class="line"><span class="cl">mkdir -p /tmp/<span class="si">${</span><span class="nv">HOST0</span><span class="si">}</span>/ /tmp/<span class="si">${</span><span class="nv">HOST1</span><span class="si">}</span>/ /tmp/<span class="si">${</span><span class="nv">HOST2</span><span class="si">}</span>/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">HOSTS</span><span class="o">=(</span><span class="si">${</span><span class="nv">HOST0</span><span class="si">}</span> <span class="si">${</span><span class="nv">HOST1</span><span class="si">}</span> <span class="si">${</span><span class="nv">HOST2</span><span class="si">}</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">NAMES</span><span class="o">=(</span><span class="si">${</span><span class="nv">NAME0</span><span class="si">}</span> <span class="si">${</span><span class="nv">NAME1</span><span class="si">}</span> <span class="si">${</span><span class="nv">NAME2</span><span class="si">}</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="s2">&#34;</span><span class="si">${</span><span class="p">!HOSTS[@]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl"><span class="nv">HOST</span><span class="o">=</span><span class="si">${</span><span class="nv">HOSTS</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="si">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">NAME</span><span class="o">=</span><span class="si">${</span><span class="nv">NAMES</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt; EOF &gt; /tmp/${HOST}/kubeadmcfg.yaml
</span></span></span><span class="line"><span class="cl"><span class="s">---
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: &#34;kubeadm.k8s.io/v1beta3&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">kind: InitConfiguration
</span></span></span><span class="line"><span class="cl"><span class="s">nodeRegistration:
</span></span></span><span class="line"><span class="cl"><span class="s">    name: ${NAME}
</span></span></span><span class="line"><span class="cl"><span class="s">localAPIEndpoint:
</span></span></span><span class="line"><span class="cl"><span class="s">    advertiseAddress: ${HOST}
</span></span></span><span class="line"><span class="cl"><span class="s">---
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: &#34;kubeadm.k8s.io/v1beta3&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">kind: ClusterConfiguration
</span></span></span><span class="line"><span class="cl"><span class="s">etcd:
</span></span></span><span class="line"><span class="cl"><span class="s">    local:
</span></span></span><span class="line"><span class="cl"><span class="s">        dataDir: /var/lib/etcds
</span></span></span><span class="line"><span class="cl"><span class="s">        serverCertSANs:
</span></span></span><span class="line"><span class="cl"><span class="s">        - &#34;${HOST}&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">        peerCertSANs:
</span></span></span><span class="line"><span class="cl"><span class="s">        - &#34;${HOST}&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">        extraArgs:
</span></span></span><span class="line"><span class="cl"><span class="s">            initial-cluster: ${NAMES[0]}=https://${HOSTS[0]}:2380,${NAMES[1]}=https://${HOSTS[1]}:2380,${NAMES[2]}=https://${HOSTS[2]}:2380
</span></span></span><span class="line"><span class="cl"><span class="s">            initial-cluster-state: new
</span></span></span><span class="line"><span class="cl"><span class="s">            name: ${NAME}
</span></span></span><span class="line"><span class="cl"><span class="s">            listen-peer-urls: https://${HOST}:2380
</span></span></span><span class="line"><span class="cl"><span class="s">            listen-client-urls: https://${HOST}:2379
</span></span></span><span class="line"><span class="cl"><span class="s">            advertise-client-urls: https://${HOST}:2379
</span></span></span><span class="line"><span class="cl"><span class="s">            initial-advertise-peer-urls: https://${HOST}:2380
</span></span></span><span class="line"><span class="cl"><span class="s">imageRepository: registry.aliyuncs.com/google_containers
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></div><h3 id="生成证书颁发机构">生成证书颁发机构</h3>
<p>如果你还没有 CA，则在 $HOST0（你为 kubeadm 生成配置文件的位置）上运行此命令。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubeadm init phase certs etcd-ca
</span></span></code></pre></div><ul>
<li>这一操作将会生成
<ul>
<li><code>/etc/kubernetes/pki/etcd/ca.crt</code></li>
<li><code>/etc/kubernetes/pki/etcd/ca.key</code></li>
</ul>
</li>
</ul>
<h3 id="为每个成员创建证书">为每个成员创建证书</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubeadm init phase certs etcd-server --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST2</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span><span class="line"><span class="cl">kubeadm init phase certs etcd-peer --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST2</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span><span class="line"><span class="cl">kubeadm init phase certs etcd-healthcheck-client --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST2</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span><span class="line"><span class="cl">kubeadm init phase certs apiserver-etcd-client --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST2</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span><span class="line"><span class="cl">cp -R /etc/kubernetes/pki /tmp/<span class="si">${</span><span class="nv">HOST2</span><span class="si">}</span>/
</span></span><span class="line"><span class="cl"><span class="c1"># 清理不可重复使用的证书</span>
</span></span><span class="line"><span class="cl">find /etc/kubernetes/pki -not -name ca.crt -not -name ca.key -type f -delete
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubeadm init phase certs etcd-server --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST1</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span><span class="line"><span class="cl">kubeadm init phase certs etcd-peer --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST1</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span><span class="line"><span class="cl">kubeadm init phase certs etcd-healthcheck-client --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST1</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span><span class="line"><span class="cl">kubeadm init phase certs apiserver-etcd-client --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST1</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span><span class="line"><span class="cl">cp -R /etc/kubernetes/pki /tmp/<span class="si">${</span><span class="nv">HOST1</span><span class="si">}</span>/
</span></span><span class="line"><span class="cl">find /etc/kubernetes/pki -not -name ca.crt -not -name ca.key -type f -delete
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># HOST0不需要进行移动</span>
</span></span><span class="line"><span class="cl">kubeadm init phase certs etcd-server --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST0</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span><span class="line"><span class="cl">kubeadm init phase certs etcd-peer --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST0</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span><span class="line"><span class="cl">kubeadm init phase certs etcd-healthcheck-client --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST0</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span><span class="line"><span class="cl">kubeadm init phase certs apiserver-etcd-client --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST0</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span></code></pre></div><h3 id="复制证书和-kubeadm-配置">复制证书和 kubeadm 配置</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">scp -r /tmp/<span class="si">${</span><span class="nv">HOST1</span><span class="si">}</span>/* root@<span class="si">${</span><span class="nv">HOST1</span><span class="si">}</span>:
</span></span><span class="line"><span class="cl">scp -r /tmp/<span class="si">${</span><span class="nv">HOST2</span><span class="si">}</span>/* root@<span class="si">${</span><span class="nv">HOST2</span><span class="si">}</span>:
</span></span><span class="line"><span class="cl">chown -R root:root pki/
</span></span><span class="line"><span class="cl">mv pki /etc/kubernetes/
</span></span></code></pre></div><h3 id="请检查证书文件是否都存在">请检查证书文件是否都存在</h3>
<p>检查<code>$HOST0</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-master1 ~<span class="o">]</span><span class="c1"># tree /etc/kubernetes/pki/</span>
</span></span><span class="line"><span class="cl">/etc/kubernetes/pki/
</span></span><span class="line"><span class="cl">├── apiserver-etcd-client.crt
</span></span><span class="line"><span class="cl">├── apiserver-etcd-client.key
</span></span><span class="line"><span class="cl">└── etcd
</span></span><span class="line"><span class="cl">    ├── ca.crt
</span></span><span class="line"><span class="cl">    ├── ca.key
</span></span><span class="line"><span class="cl">    ├── healthcheck-client.crt
</span></span><span class="line"><span class="cl">    ├── healthcheck-client.key
</span></span><span class="line"><span class="cl">    ├── peer.crt
</span></span><span class="line"><span class="cl">    ├── peer.key
</span></span><span class="line"><span class="cl">    ├── server.crt
</span></span><span class="line"><span class="cl">    └── server.key
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">1</span> directory, <span class="m">10</span> files
</span></span></code></pre></div><p>检查<code>$HOST1</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-master2 ~<span class="o">]</span><span class="c1"># tree /etc/kubernetes/pki/</span>
</span></span><span class="line"><span class="cl">/etc/kubernetes/pki/
</span></span><span class="line"><span class="cl">├── apiserver-etcd-client.crt
</span></span><span class="line"><span class="cl">├── apiserver-etcd-client.key
</span></span><span class="line"><span class="cl">└── etcd
</span></span><span class="line"><span class="cl">    ├── ca.crt
</span></span><span class="line"><span class="cl">    ├── healthcheck-client.crt
</span></span><span class="line"><span class="cl">    ├── healthcheck-client.key
</span></span><span class="line"><span class="cl">    ├── peer.crt
</span></span><span class="line"><span class="cl">    ├── peer.key
</span></span><span class="line"><span class="cl">    ├── server.crt
</span></span><span class="line"><span class="cl">    └── server.key
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">1</span> directory, <span class="m">9</span> files
</span></span></code></pre></div><p>检查<code>$HOST2</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-master3 ~<span class="o">]</span><span class="c1"># tree /etc/kubernetes/pki/</span>
</span></span><span class="line"><span class="cl">/etc/kubernetes/pki/
</span></span><span class="line"><span class="cl">├── apiserver-etcd-client.crt
</span></span><span class="line"><span class="cl">├── apiserver-etcd-client.key
</span></span><span class="line"><span class="cl">└── etcd
</span></span><span class="line"><span class="cl">    ├── ca.crt
</span></span><span class="line"><span class="cl">    ├── healthcheck-client.crt
</span></span><span class="line"><span class="cl">    ├── healthcheck-client.key
</span></span><span class="line"><span class="cl">    ├── peer.crt
</span></span><span class="line"><span class="cl">    ├── peer.key
</span></span><span class="line"><span class="cl">    ├── server.crt
</span></span><span class="line"><span class="cl">    └── server.key
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">1</span> directory, <span class="m">9</span> files
</span></span></code></pre></div><h3 id="创建etcd的pod清单">创建Etcd的Pod清单</h3>
<p>请在<code>$HOST0</code>进行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubeadm init phase etcd <span class="nb">local</span> --config<span class="o">=</span>/tmp/<span class="si">${</span><span class="nv">HOST0</span><span class="si">}</span>/kubeadmcfg.yaml
</span></span></code></pre></div><p>请在<code>$HOST1</code>进行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubeadm init phase etcd <span class="nb">local</span> --config<span class="o">=</span><span class="nv">$HOME</span>/kubeadmcfg.yaml
</span></span></code></pre></div><p>请在<code>$HOST2</code>进行执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubeadm init phase etcd <span class="nb">local</span> --config<span class="o">=</span><span class="nv">$HOME</span>/kubeadmcfg.yaml
</span></span></code></pre></div><h3 id="检查etcd的pod是否运行">检查Etcd的Pod是否运行</h3>
<ul>
<li>三台Etcd主机全部使用<code>crictl ps -a </code>进行查看EtcdPod是否处于<code>running</code>状态</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-master1 ~<span class="o">]</span><span class="c1"># crictl ps -a</span>
</span></span><span class="line"><span class="cl">CONTAINER           IMAGE               CREATED             STATE               NAME                ATTEMPT             POD ID              POD
</span></span><span class="line"><span class="cl">0a183925d2542       <span class="m">0048118155842</span>       <span class="m">52</span> seconds ago      Running     
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>ConfigMap和Secret的使用</title>
      <link>https://blog.mletter.cn/tech/kubernetes/configmap-or-service/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/configmap-or-service/</guid>
      <description>ConfigMap 是一种 API 对象，用来将非机密性的数据保存到键值对中。使用时， Pods 可以将其用作环境变量、命令行参数或者存储卷中的配置文件。</description>
      <content:encoded><![CDATA[<h2 id="configmap">ConfigMap</h2>
<p>ConfigMap 是一种 API 对象，用来将非机密性的数据保存到键值对中。使用时， <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/"  target="_blank" rel="noopener"
    >Pods</a> 可以将其用作环境变量、命令行参数或者存储卷中的配置文件。</p>
<p>ConfigMap 将你的环境配置信息和 <a class="link" href="https://kubernetes.io/zh-cn/docs/reference/glossary/?all=true#term-image"  target="_blank" rel="noopener"
    >容器镜像</a> 解耦，便于应用配置的修改。
ConfigMap 在设计上不是用来保存大量数据的。在 ConfigMap 中保存的数据不可超过1MiB(这其实是ETCD的要求哈哈哈)。如果你需要保存超出此尺寸限制的数据，你可能希望考虑挂载存储卷 或者使用独立的数据库或者文件服务。</p>
<p>这是一个 ConfigMap 的示例，它的一些键只有一个值，其他键的值看起来像是 配置的片段格式。</p>
<ul>
<li>通过<code>Key</code>和<code>Value</code>这种键值对来进行写入数据</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">game-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 类属性键；每一个键都映射到一个简单的值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">player_initial_lives</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ui_properties_file_name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;user-interface.properties&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 类文件键,一般用来保存一个文件到指定目录</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">game.properties</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    enemy.types=aliens,monsters
</span></span></span><span class="line"><span class="cl"><span class="sd">    player.maximum-lives=5    </span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">user-interface.properties</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    color.good=purple
</span></span></span><span class="line"><span class="cl"><span class="sd">    color.bad=yellow
</span></span></span><span class="line"><span class="cl"><span class="sd">    allow.textmode=true</span><span class="w">    
</span></span></span></code></pre></div><p>你可以使用四种方式来使用 ConfigMap 配置 Pod 中的容器：</p>
<ol>
<li>在容器命令和参数内</li>
<li>容器的环境变量</li>
<li>在只读卷里面添加一个文件，让应用来读取</li>
<li>编写代码在 Pod 中运行，使用 Kubernetes API 来读取 ConfigMap</li>
</ol>
<h3 id="通过环境变量的方式使用configmap">通过环境变量的方式使用ConfigMap</h3>
<p>首先我们创建一个<code>Deployment</code>然后通过Env环境变量的方式进行使用<code>ConfigMap</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web-beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">zone</span><span class="p">:</span><span class="w"> </span><span class="l">beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web-beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vue-shop-beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">100Mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">10m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># 通过环境变量的方式进行挂载</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">PLAYER_INITIAL_LIVES</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">configMapKeyRef</span><span class="p">:</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">game-demo </span><span class="w"> </span><span class="c"># 表示当前键来自game-demo这个ConfigMap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">player_initial_lives</span><span class="w"> </span><span class="c"># 表示取player_initial_lives这个键的内容</span><span class="w">
</span></span></span></code></pre></div><p>然后我们可以进入到Pod内部进行<code>echo</code>挂载的变量名查看是否有输出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">root@nginx-web-beijing-d6d994854-d6tjk:/# <span class="nb">echo</span> <span class="nv">$PLAYER_INITIAL_LIVES</span>
</span></span><span class="line"><span class="cl"><span class="m">3</span>
</span></span></code></pre></div><h3 id="将configmap当做文件使用">将ConfigMap当做文件使用</h3>
<ol>
<li>创建一个 ConfigMap 对象或者使用现有的 ConfigMap 对象。多个 Pod 可以引用同一个 ConfigMap。</li>
<li>修改 Pod 定义，在 <code>spec.volumes[]</code> 下添加一个卷。 为该卷设置任意名称，之后将 <code>spec.volumes[].configMap.name</code> 字段设置为对你的 ConfigMap 对象的引用。</li>
<li>为每个需要该 ConfigMap 的容器添加一个 <code>.spec.containers[].volumeMounts[]</code>。 设置 <code>.spec.containers[].volumeMounts[].readOnly=true</code> 并将 <code>.spec.containers[].volumeMounts[].mountPath</code> 设置为一个未使用的目录名， ConfigMap 的内容将出现在该目录中。</li>
<li>更改你的镜像或者命令行，以便程序能够从该目录中查找文件。ConfigMap 中的每个 <code>data</code> 键会变成 <code>mountPath</code> 下面的一个文件名。</li>
</ol>
<p>创建一个挂载ConfigMap的<code>Deployment</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web-beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">zone</span><span class="p">:</span><span class="w"> </span><span class="l">beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web-beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vue-shop-beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">100Mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">10m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vue-config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/etc/vue-config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vue-config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">game-demo</span><span class="w">
</span></span></span></code></pre></div><p>进入容器中查看<code>/etc/vue-config</code>目录下是否有配置文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">root@nginx-web-beijing-5649b8f646-pzmm4:/etc/vue-config# ls
</span></span><span class="line"><span class="cl">service-interface.properties
</span></span><span class="line"><span class="cl">root@nginx-web-beijing-5649b8f646-pzmm4:/etc/vue-config# cat service-interface.properties  
</span></span><span class="line"><span class="cl">port: <span class="m">4000</span>
</span></span></code></pre></div><p>如果 Pod 中有多个容器，则每个容器都需要自己的 <code>volumeMounts</code> 块，但针对每个 ConfigMap，你只需要设置一个 <code>spec.volumes</code> 块。</p>
<h3 id="被挂载的configmap内容会被自动更新">被挂载的ConfigMap内容会被自动更新</h3>
<p>当卷中使用的 ConfigMap 被更新时，所投射的键最终也会被更新。 kubelet 组件会在每次周期性同步时检查所挂载的 ConfigMap 是否为最新。 不过，kubelet 使用的是其本地的高速缓存来获得 ConfigMap 的当前值。 高速缓存的类型可以通过 <a class="link" href="https://kubernetes.io/zh-cn/docs/reference/config-api/kubelet-config.v1beta1/"  target="_blank" rel="noopener"
    >KubeletConfiguration 结构</a>. 的 <code>ConfigMapAndSecretChangeDetectionStrategy</code> 字段来配置。</p>
<p>ConfigMap 既可以通过 watch 操作实现内容传播（默认形式），也可实现基于 TTL 的缓存，还可以直接经过所有请求重定向到 API 服务器。 因此，从 ConfigMap 被更新的那一刻算起，到新的主键被投射到 Pod 中去， 这一时间跨度可能与 kubelet 的同步周期加上高速缓存的传播延迟相等。 这里的传播延迟取决于所选的高速缓存类型 （分别对应 watch 操作的传播延迟、高速缓存的 TTL 时长或者 0）。</p>
<blockquote>
<p>以环境变量方式使用的 ConfigMap 数据不会被自动更新。 更新这些数据需要重新启动 Pod。</p>
</blockquote>
<h2 id="secret">Secret</h2>
<p>Secret 是一种包含少量敏感信息例如密码、令牌或密钥的对象。 这样的信息可能会被放在 <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/"  target="_blank" rel="noopener"
    >Pod</a> 规约中或者镜像中。 使用 Secret 意味着你不需要在应用程序代码中包含机密数据。</p>
<p>由于创建 Secret 可以独立于使用它们的 Pod， 因此在创建、查看和编辑 Pod 的工作流程中暴露 Secret（及其数据）的风险较小。 Kubernetes 和在集群中运行的应用程序也可以对 Secret 采取额外的预防措施， 例如避免将机密数据写入非易失性存储。</p>
<p>Secret 类似于 <a class="link" href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-pod-configmap/"  target="_blank" rel="noopener"
    >ConfigMap</a> 但专门用于保存机密数据。</p>
<blockquote>
<p><strong>注意</strong>: 默认情况下，Kubernetes Secret 未加密地存储在 API 服务器的底层数据存储（etcd）中。 任何拥有 API 访问权限的人都可以检索或修改 Secret，任何有权访问 etcd 的人也可以。 此外，任何有权限在命名空间中创建 Pod 的人都可以使用该访问权限读取该命名空间中的任何 Secret； 这包括间接访问，例如创建 Deployment 的能力。</p>
</blockquote>
<p>为了安全地使用 Secret，请至少执行以下步骤：</p>
<ol>
<li>为 Secret <a class="link" href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/encrypt-data/"  target="_blank" rel="noopener"
    >启用静态加密</a>。</li>
<li>以最小特权访问 Secret 并<a class="link" href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/authorization/"  target="_blank" rel="noopener"
    >启用或配置 RBAC 规则</a>。</li>
<li>限制 Secret 对特定容器的访问。</li>
<li><a class="link" href="https://secrets-store-csi-driver.sigs.k8s.io/concepts.html#provider-for-the-secrets-store-csi-driver"  target="_blank" rel="noopener"
    >考虑使用外部 Secret 存储驱动</a>。</li>
</ol>
<h3 id="secret的使用">Secret的使用</h3>
<p>Pod 可以用三种方式之一来使用 Secret：</p>
<ul>
<li>作为挂载到一个或多个容器上的<a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/storage/volumes/"  target="_blank" rel="noopener"
    >卷</a> 中的<a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/#using-secrets-as-files-from-a-pod"  target="_blank" rel="noopener"
    >文件</a>。</li>
<li>作为<a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/#using-secrets-as-environment-variables"  target="_blank" rel="noopener"
    >容器的环境变量</a>。</li>
<li>由 <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/#using-imagepullsecrets"  target="_blank" rel="noopener"
    >kubelet 在为 Pod 拉取镜像时使用</a>。</li>
</ul>
<p>Kubernetes控制面也使用 Secret； 例如，<a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/#bootstrap-token-secrets"  target="_blank" rel="noopener"
    >引导令牌 Secret</a> 是一种帮助自动化节点注册的机制。</p>
<p><code>Secret</code> 主要使用的有以下三种类型：</p>
<ul>
<li><code>Opaque</code>：base64 编码格式的 Secret，用来存储密码、密钥等；但数据也可以通过<code>base64 –decode</code>解码得到原始数据，所有加密性很弱。</li>
<li><code>kubernetes.io/dockerconfigjson</code>：用来存储私有<code>docker registry</code>的认证信息。</li>
<li><code>kubernetes.io/service-account-token</code>：用于 <code>ServiceAccount</code>, ServiceAccount 创建时 Kubernetes 会默认创建一个对应的 Secret 对象，Pod 如果使用了 ServiceAccount，对应的 Secret 会自动挂载到 Pod 目录 <code>/run/secrets/kubernetes.io/serviceaccount</code> 中。</li>
<li><code>bootstrap.kubernetes.io/token</code>：用于节点接入集群的校验的 Secret</li>
</ul>
<h3 id="opaque-secret的使用">Opaque Secret的使用</h3>
<p><code>Opaque</code> 类型的数据是一个 map 类型，要求 value 必须是 <code>base64</code> 编码格式，比如我们来创建一个用户名为 admin，密码为 admin321 的 <code>Secret</code> 对象，首先我们需要先把用户名和密码做 <code>base64</code> 编码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># echo -n &#34;admin321&#34; | base64</span>
</span></span><span class="line"><span class="cl"><span class="nv">YWRtaW4zMjE</span><span class="o">=</span>
</span></span></code></pre></div><p>然后我们就可以利用上面编码过后的数据来编写一个 YAML 文件：(opaque-demo.yaml)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">base-user-info</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Opaque</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">YWRtaW4=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">YWRtaW4zMjE=</span><span class="w">
</span></span></span></code></pre></div><p>创建好 <code>Secret</code>对象后，有两种方式来使用它：</p>
<ul>
<li>以环境变量的形式</li>
<li>以Volume的形式挂载</li>
</ul>
<h3 id="通过环境变量挂载secret">通过环境变量挂载Secret</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web-beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">zone</span><span class="p">:</span><span class="w"> </span><span class="l">beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web-beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vue-shop-beijing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">100Mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">10m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">USERNAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">base-user-info</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">username</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">PASSWORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">secretKeyRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">base-user-info</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">password</span><span class="w">
</span></span></span></code></pre></div><h3 id="通过volume挂载">通过Volume挂载</h3>
<p>Secret 把两个 key 挂载成了两个对应的文件。当然如果想要挂载到指定的文件上面，是不是也可以使用上一节课的方法：在 <code>secretName</code> 下面添加 <code>items</code> 指定 <code>key</code> 和 <code>path</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">secret2-pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">secret2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/bin/sh&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;-c&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;ls /etc/secrets&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">secrets</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/secrets</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">secrets</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secret</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">base-user-info</span><span class="w">
</span></span></span></code></pre></div><p>一般来说Pod默认的访问<code>API Server</code>的Token都会挂载到<code>/var/run/secrets/kubernetes.io/serviceaccount</code>当中,利用自带的<code>token</code>和<code>ca.crt</code>，默认情况下所有的Pod都会被注入当前<code>namespace</code>下的<code>token</code>和<code>ca.crt</code>这样以来就可以去访问APIServer了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">root@nginx-web-beijing-87c9f478f-knrfp:/var/run/secrets/kubernetes.io/serviceaccount# ls
</span></span><span class="line"><span class="cl">ca.crt  namespace  token
</span></span></code></pre></div><h3 id="kubernetesiodockerconfigjsonhttpkubernetesiodockerconfigjson"><a class="link" href="http://kubernetes.io/dockerconfigjson"  target="_blank" rel="noopener"
    >kubernetes.io/dockerconfigjson</a></h3>
<p>除了上面的 <code>Opaque</code> 这种类型外，我们还可以来创建用户 <code>docker registry</code> 认证的 <code>Secret</code>，直接使用<code>kubectl create</code> 命令创建即可，如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create secret docker-registry beijing-harbor --docker-server<span class="o">=</span>DOCKER_SERVER --docker-username<span class="o">=</span>DOCKER_USER --docker-password<span class="o">=</span>DOCKER_PASSWORD --docker-email<span class="o">=</span>DOCKER_EMAIL
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl create secret docker-registry beijing-harbor --docker-server<span class="o">=</span>127.0.0.1 --docker-username<span class="o">=</span>admin --docker-password<span class="o">=</span><span class="m">123123</span> --docker-email<span class="o">=</span>beilanzhisen@163.com
</span></span></code></pre></div><p>除了上面这种方法之外，我们也可以通过指定文件的方式来创建镜像仓库认证信息，需要注意对应的 <code>KEY</code> 和 <code>TYPE</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create secret generic beijing-harbor --from-file<span class="o">=</span>.dockerconfigjson<span class="o">=</span>/root/.docker/config.json --type<span class="o">=</span>kubernetes.io/dockerconfigjson
</span></span></code></pre></div><p>如果我们需要拉取私有仓库中的 Docker 镜像的话就需要使用到上面的 myregistry 这个 <code>Secret</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">piVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">foo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">foo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="m">192.168.1.100</span><span class="p">:</span><span class="m">5000</span><span class="l">/test:v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">imagePullSecrets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">beijing-harbor</span><span class="w">
</span></span></span></code></pre></div><p><code>ImagePullSecrets</code> 与 <code>Secrets</code> 不同，因为 <code>Secrets</code> 可以挂载到 Pod 中，但是 <code>ImagePullSecrets</code> 只能由 Kubelet 访问。</p>
<h2 id="serviceaccount">ServiceAccount</h2>
<p><code>ServiceAccount</code> 主要是用于解决 Pod 在集群中的身份认证问题的。认证使用的授权信息其实就是利用前面我们讲到的一个类型为 <code>kubernetes.io/service-account-token</code> 进行管理的。</p>
<p><code>ServiceAccount</code> 是命名空间级别的，每一个命名空间创建的时候就会自动创建一个名为 <code>default</code> 的 <code>ServiceAccount</code> 对象:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create ns kube-test
</span></span><span class="line"><span class="cl">kubectl get secret -n kube-test
</span></span><span class="line"><span class="cl">NAME                  TYPE                                  DATA   AGE
</span></span><span class="line"><span class="cl">default-token-vn4tr   kubernetes.io/service-account-token   <span class="m">3</span>      2m27s
</span></span></code></pre></div><h3 id="实现原理">实现原理</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ca.crt</span><span class="p">:</span><span class="w"> </span><span class="l">LS0tLS...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">a3ViZS10ZXN0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">token</span><span class="p">:</span><span class="w"> </span><span class="l">ZXlKaG...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kubernetes.io/service-account.name</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kubernetes.io/service-account.uid</span><span class="p">:</span><span class="w"> </span><span class="l">75b3314b-e949-4f7b-9450-9bcd89c8c972</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">creationTimestamp</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2019-11-23T04:19:47Z&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">default-token-vn4tr</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resourceVersion</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;4297521&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selfLink</span><span class="p">:</span><span class="w"> </span><span class="l">/api/v1/namespaces/kube-test/secrets/default-token-vn4tr</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">e3e60f95-f255-471b-a6c0-600a3c0ee53a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes.io/service-account-token</span><span class="w">
</span></span></span></code></pre></div><p>在 <code>data</code> 区域我们可以看到有3个信息：</p>
<ul>
<li><code>ca.crt</code>：用于校验服务端的证书信息</li>
<li><code>namespace</code>：表示当前管理的命名空间</li>
<li><code>token</code>：用于 Pod 身份认证的 Token</li>
</ul>
<p>前面我们也提到了默认情况下当前 namespace 下面的 Pod 会默认使用 <code>default</code> 这个 ServiceAccount，对应的 <code>Secret</code> 会自动挂载到 Pod 的 <code>/var/run/secrets/kubernetes.io/serviceaccount/</code> 目录中，这样我们就可以在 Pod 里面获取到用于身份认证的信息了。</p>
<p>实际上这个自动挂载过程是在 Pod 创建的时候通过 <code>Admisson Controller（准入控制器）</code> 来实现的，关于准入控制器的详细信息我们会在后面的安全章节中和大家继续学习。</p>
<blockquote>
<p><code>Admission Controller（准入控制）</code>是 Kubernetes API Server 用于拦截请求的一种手段。<code>Admission</code> 可以做到对请求的资源对象进行校验，修改，Pod 创建时 <code>Admission Controller</code> 会根据指定的的 <code>ServiceAccount</code>（默认的 default）把对应的 <code>Secret</code> 挂载到容器中的固定目录下 <code>/var/run/secrets/kubernetes.io/serviceaccount/</code>。</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>HorizontalPodAutoscaler</title>
      <link>https://blog.mletter.cn/tech/kubernetes/horizontal-pod-autoscaler/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/horizontal-pod-autoscaler/</guid>
      <description>在Kubernetes 中HorizontalPodAutoscaler自动更新工作负载资源 （例如 Deployment 或者 StatefulSet）， 目的是自动扩缩工作负载以满足需求。</description>
      <content:encoded><![CDATA[<h2 id="horizontalpodautoscaler">HorizontalPodAutoscaler</h2>
<ul>
<li><a class="link" href="https://kubernetes.io/zh-cn/docs/tasks/run-application/horizontal-pod-autoscale/"  target="_blank" rel="noopener"
    >HPA官方文档</a></li>
</ul>
<p>在Kubernetes 中<code>HorizontalPodAutoscaler</code>自动更新工作负载资源 （例如 <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/deployment/"  target="_blank" rel="noopener"
    >Deployment</a> 或者 <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/statefulset/"  target="_blank" rel="noopener"
    >StatefulSet</a>）， 目的是自动扩缩工作负载以满足需求。</p>
<p>水平扩缩意味着对增加的负载的响应是部署更多的 <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/"  target="_blank" rel="noopener"
    >Pod</a>。 这与垂直(Vertical)扩缩不同，对于 Kubernetes， 垂直扩缩意味着将更多资源（例如：内存或 CPU）分配给已经为工作负载运行的 Pod。</p>
<p>如果负载减少，并且Pod的数量高于配置的最小值，<code>HorizontalPodAutoscaler</code> 会指示工作负载资源（Deployment、StatefulSet 或其他类似资源）缩减。</p>
<blockquote>
<p>水平Pod自动扩缩不适用于无法扩缩的对象: 例如DemonSet这种</p>
</blockquote>
<p>我们可以简单的通过 <code>kubectl autoscale</code> 命令来创建一个 HPA 资源对象，<code>HPA Controller</code>默认<code>30s</code>轮询一次（可通过 <code>kube-controller-manager</code> 的<code>--horizontal-pod-autoscaler-sync-period</code> 参数进行设置），查询指定的资源中的 Pod 资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。</p>
<h3 id="horizontalpodautoscaler-是如何工作的">HorizontalPodAutoscaler 是如何工作的</h3>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="工作图" loading="lazy" src="https://bj.bcebos.com/baidu-rmb-video-cover-1/2f7f46bc72825e43f55f683e9ebefdd3.png"></p>
<p>Kubernetes 将水平 Pod 自动扩缩实现为一个间歇运行的控制回路（它不是一个连续的过程）。间隔由 <a class="link" href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-controller-manager/"  target="_blank" rel="noopener"
    ><code>kube-controller-manager</code></a> 的 <code>--horizontal-pod-autoscaler-sync-period</code> 参数设置（默认间隔为 15 秒）。</p>
<p>在每个时间段内，控制器管理器都会根据每个 HorizontalPodAutoscaler 定义中指定的指标查询资源利用率。 控制器管理器找到由 <code>scaleTargetRef</code> 定义的目标资源，然后根据目标资源的 <code>.spec.selector</code> 标签选择 Pod， 并从资源指标 API（针对每个 Pod 的资源指标）或自定义指标获取指标 API（适用于所有其他指标）</p>
<ul>
<li>对于按 Pod 统计的资源指标（如 CPU），控制器从资源指标 API 中获取每一个 HorizontalPodAutoscaler 指定的 Pod 的度量值，如果设置了目标使用率，控制器获取每个 Pod 中的容器<a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/configuration/manage-resources-containers/#requests-and-limits"  target="_blank" rel="noopener"
    >资源使用</a>情况， 并计算资源使用率。如果设置了 target 值，将直接使用原始数据（不再计算百分比）。 接下来，控制器根据平均的资源使用率或原始值计算出扩缩的比例，进而计算出目标副本数。</li>
<li>如果 Pod 使用自定义指示，控制器机制与资源指标类似，区别在于自定义指标只使用原始值，而不是使用率。</li>
<li>如果 Pod 使用对象指标和外部指标（每个指标描述一个对象信息）。 这个指标将直接根据目标设定值相比较，并生成一个上面提到的扩缩比例。 在 <code>autoscaling/v2</code> 版本 API 中，这个指标也可以根据 Pod 数量平分后再计算。</li>
</ul>
<p><code>HorizontalPodAutoscaler</code>的常见用途是将其配置为从<a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/api-extension/apiserver-aggregation/"  target="_blank" rel="noopener"
    >聚合 API</a> （<code>metrics.k8s.io</code>、<code>custom.metrics.k8s.io</code> 或 <code>external.metrics.k8s.io</code>）获取指标。 <code>metrics.k8s.io</code> API 通常由名为<code>Metrics Server</code>的插件提供，需要单独启动。有关资源指标的更多信息， 请参阅 <a class="link" href="https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/resource-metrics-pipeline/#metrics-server"  target="_blank" rel="noopener"
    >Metrics Server</a>。</p>
<h3 id="metrics-server">Metrics-Server</h3>
<p>在 HPA 的第一个版本中，我们需要 <code>Heapster</code> 提供 CPU 和内存指标，在 HPA v2 过后就需要安装 Metrcis Server 了，<code>Metrics Server</code> 可以通过标准的 Kubernetes API 把监控数据暴露出来，有了 <code>Metrics Server</code> 之后，我们就完全可以通过标准的 Kubernetes API 来访问我们想要获取的监控数据了：</p>
<pre tabindex="0"><code class="language-bahs" data-lang="bahs">https://api.k8s.io:8443/metrics.k8s.io/v1beta1/namespaces/&lt;namespace-name&gt;/pods/&lt;pod-name&gt;
</code></pre><p>比如当我们访问上面的 API 的时候，我们就可以获取到该 Pod 的资源数据，这些数据其实是来自于 kubelet 的 <code>Summary API</code> 采集而来的。不过需要说明的是我们这里可以通过标准的 API 来获取资源监控数据，并不是因为 <code>Metrics Server</code> 就是 APIServer 的一部分，而是通过 Kubernetes 提供的 <code>Aggregator</code> 汇聚插件来实现的，是独立于 APIServer 之外运行的。</p>
<h3 id="聚合-api">聚合 API</h3>
<p><code>Aggregator</code> 允许开发人员编写一个自己的服务，把这个服务注册到 Kubernetes 的 APIServer 里面去，这样我们就可以像原生的 APIServer 提供的 API 使用自己的 API 了，我们把自己的服务运行在 Kubernetes 集群里面，然后 Kubernetes 的 <code>Aggregator</code> 通过 Service 名称就可以转发到我们自己写的 Service 里面去了。这样这个聚合层就带来了很多好处：</p>
<ul>
<li>增加了 API 的扩展性，开发人员可以编写自己的 API 服务来暴露他们想要的 API。</li>
<li>丰富了 API，核心 kubernetes 团队阻止了很多新的 API 提案，通过允许开发人员将他们的 API 作为单独的服务公开，这样就无须社区繁杂的审查了。</li>
<li>开发分阶段实验性 API，新的 API 可以在单独的聚合服务中开发，当它稳定之后，在合并会 APIServer 就很容易了。</li>
<li>确保新 API 遵循 Kubernetes 约定，如果没有这里提出的机制，社区成员可能会被迫推出自己的东西，这样很可能造成社区成员和社区约定不一致。</li>
</ul>
<h3 id="部署hpa">部署HPA</h3>
<p>我们要使用 HPA，就需要在集群中安装 <code>Metrics Server</code> 服务，要安装 <code>Metrics Server</code> 就需要开启 <code>Aggregator</code>，因为 <code>Metrics Server</code> 就是通过该代理进行扩展的，不过我们集群是通过 Kubeadm 搭建的，默认已经开启了，如果是二进制方式安装的集群，需要单独配置 kube-apsierver 添加如下所示的参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">--<span class="l">requestheader-client-ca-file=&lt;path to aggregator CA cert&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>--<span class="l">requestheader-allowed-names=aggregator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>--<span class="l">requestheader-extra-headers-prefix=X-Remote-Extra-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>--<span class="l">requestheader-group-headers=X-Remote-Group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>--<span class="l">requestheader-username-headers=X-Remote-User</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>--<span class="l">proxy-client-cert-file=&lt;path to aggregator proxy cert&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>--<span class="l">proxy-client-key-file=&lt;path to aggregator proxy key&gt;</span><span class="w">
</span></span></span></code></pre></div><p><code>Aggregator</code> 聚合层启动完成后，就可以来安装 <code>Metrics Server</code> 了，我们可以获取该仓库的官方安装资源清单：</p>
<ul>
<li>官方仓库地址：https://github.com/kubernetes-sigs/metrics-server</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 请修改镜像为: registry.aliyuncs.com/google_containers/metrics-server:v0.6.2</span>
</span></span><span class="line"><span class="cl">wget https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.6.2/components.yaml
</span></span></code></pre></div><p>如果出现<code>x509: cannot validate certificate for 10.151.30.22 because it doesn’t contain any IP SANs</code>这种错误,因为部署集群的时候，CA 证书并没有把各个节点的 IP 签上去，所以这里 <code>Metrics Server</code> 通过 IP 去请求时，提示签的证书没有对应的IP所导致的,我们可以添加一个<code>--kubelet-insecure-tls</code>参数跳过证书校验：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- --<span class="l">cert-dir=/tmp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- --<span class="l">secure-port=4443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- --<span class="l">kubelet-preferred-address-types=InternalIP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- --<span class="l">kubelet-use-node-status-port</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- --<span class="l">metric-resolution=15s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- --<span class="l">kubelet-insecure-tls</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 修改完成后记得部署</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">kubectl apply -f components.yaml</span><span class="w">
</span></span></span></code></pre></div><p>验证HPA是否安装成功,现在我们可以通过 <code>kubectl top</code> 命令来获取到资源数据了，证明 <code>Metrics Server</code> 已经安装成功了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl top nodes</span>
</span></span><span class="line"><span class="cl">NAME                     CPU<span class="o">(</span>cores<span class="o">)</span>   CPU%   MEMORY<span class="o">(</span>bytes<span class="o">)</span>   MEMORY%   
</span></span><span class="line"><span class="cl">online-beijing-master1   82m          1%     1970Mi          12%       
</span></span><span class="line"><span class="cl">online-beijing-master2   59m          0%     1379Mi          8%        
</span></span><span class="line"><span class="cl">online-beijing-master3   61m          0%     1389Mi          8%        
</span></span><span class="line"><span class="cl">online-beijing-node1     35m          0%     1957Mi          12%       
</span></span><span class="line"><span class="cl">online-beijing-node2     33m          0%     1875Mi          11%       
</span></span><span class="line"><span class="cl">online-beijing-node3     35m          0%     1045Mi          6% 
</span></span></code></pre></div><p>首先我们先创建一个<code>deployment</code>，准备对他进行HPA</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-demo-nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-demo-nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-demo-nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-demo-nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-demo-nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-demo-nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">10m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">100Mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">privileged</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span></code></pre></div><h3 id="创建基于cpu的自动扩容">创建基于CPU的自动扩容</h3>
<blockquote>
<p>我们这次只针对CPU进行操作,后续我们会根据更多的自定义资源来进行扩缩容。</p>
</blockquote>
<p>现在我们来创建一个<code>HPA</code>，可以使用<code>kubectl autoscale</code>命令来创建：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl autoscale deployment hpa-demo-nginx --cpu-percent<span class="o">=</span><span class="m">10</span> --min<span class="o">=</span><span class="m">1</span> --max<span class="o">=</span><span class="m">6</span>
</span></span></code></pre></div><p>此命令创建了一个关联资源<code>hpa-demo-nginx</code> 的<code>HPA</code>，最小的 pod 副本数为3，最大为6。<code>HPA</code>会根据设定的 cpu使用率（10%）动态的增加或者减少pod数量。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get hpa</span>
</span></span><span class="line"><span class="cl">NAME               REFERENCE                     TARGETS         MINPODS   MAXPODS   REPLICAS   AGE
</span></span><span class="line"><span class="cl">hpa-demo-nginx   Deployment/hpa-demo-nginx   &lt;unknown&gt;/10%   <span class="m">1</span>         <span class="m">6</span>         <span class="m">0</span>          8s
</span></span></code></pre></div><p>接下来对Pod进行压力测试,不断的去请求当前<code>hpa-demo-nginx</code>Pod的IP</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl run -i --tty load-generator --image<span class="o">=</span>busybox /bin/sh
</span></span><span class="line"><span class="cl"><span class="k">while</span> true<span class="p">;</span> <span class="k">do</span> wget -q -O- http://10.10.180.71<span class="p">;</span> <span class="k">done</span>
</span></span></code></pre></div><p>正常可以看到<code>HPA</code>已经正常工作了，Pod的副本数量已经分配到了我们当时指定的6个</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get hpa</span>
</span></span><span class="line"><span class="cl">NAME             REFERENCE                   TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
</span></span><span class="line"><span class="cl">hpa-demo-nginx   Deployment/hpa-demo-nginx   78%/10%   <span class="m">1</span>         <span class="m">6</span>         <span class="m">6</span>          4m20s
</span></span></code></pre></div><p>从kubernetes<code>v1.12</code>版本开始,我们可以通过设置<code>kube-controller-manager</code>的<code>--horizontal-pod-autoscaler-downscale-stabilization</code>参数来设置一个持续时间,指的是用于当前扩容操作完成后,多久以后才进行一次缩放操作。默认为5分钟,也就是五分钟后才会进行缩放。</p>
<h3 id="创建一个基于内存的自动扩容">创建一个基于内存的自动扩容</h3>
<p>跟CPU是一样的,都是基于<code>metrics-server</code>获取指标然后进行扩容。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-mem-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-mem-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-mem-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-mem-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-mem-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">hpa-mem-demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">20Mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">10m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">privileged</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mount-configmap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/script</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mount-configmap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">configMap</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">increase-mem-config</span><span class="w">
</span></span></span></code></pre></div><p>这里和前面普通的应用有一些区别，我们将一个名为 <code>increase-mem-config</code> 的 ConfigMap 资源对象挂载到了容器中，该配置文件是用于后面增加容器内存占用的脚本，配置文件如下所示：（increase-mem-cm.yaml）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">increase-mem-config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">increase-mem.sh</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    #!/bin/bash  
</span></span></span><span class="line"><span class="cl"><span class="sd">    mkdir /tmp/memory  
</span></span></span><span class="line"><span class="cl"><span class="sd">    mount -t tmpfs -o size=40M tmpfs /tmp/memory  
</span></span></span><span class="line"><span class="cl"><span class="sd">    dd if=/dev/zero of=/tmp/memory/block  
</span></span></span><span class="line"><span class="cl"><span class="sd">    sleep 60 
</span></span></span><span class="line"><span class="cl"><span class="sd">    rm /tmp/memory/block  
</span></span></span><span class="line"><span class="cl"><span class="sd">    umount /tmp/memory  
</span></span></span><span class="line"><span class="cl"><span class="sd">    rmdir /tmp/memory</span><span class="w">    
</span></span></span></code></pre></div><p>由于这里增加内存的脚本需要使用到 <code>mount</code> 命令，这需要声明为特权模式，所以我们添加了 <code>securityContext.privileged=true</code> 这个配置。现在我们直接创建上面的资源对象即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -f hpa-demo-mem.yaml
</span></span><span class="line"><span class="cl">kubectl apply -f increase-mem-config.yaml 
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Kubernetes中Api-Server简单解读</title>
      <link>https://blog.mletter.cn/tech/kubernetes/apiserver-read/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/apiserver-read/</guid>
      <description>Kubernetes API的每个请求都会经过多阶段的访问控制之后才会被接受,这一阶段包括认证、授权、以及准入控制(Admission Control)等</description>
      <content:encoded><![CDATA[<p><strong>访问控制概览</strong>
Kubernetes API的每个请求都会经过多阶段的访问控制之后才会被接受,这一阶段包括认证、授权、以及准入控制(Admission Control)等</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="img" loading="lazy" src="https://bj.bcebos.com/baidu-rmb-video-cover-1/2b6495c8749e3f4e4369e28cb50eeb87.png"></p>
<h2 id="认证插件">认证插件</h2>
<ul>
<li>x509证书：使用x509证书只需要API Server启动的时候配置 <code>--client-ca-file=SOMEFILE</code>。在证书认证的时候,其CN域名做用户名,而组织机构用作group名。</li>
<li>静态Token文件：使用静态Token文件认证只需要在API Server启动的时候配置 <code>--token-auth-file=SOMEFILE</code>。该文件为<code>csv</code>格式,每行至少包括三列<code>token</code>、<code>username</code>、<code>user id</code></li>
<li>引导Token
<ul>
<li>为了支持平滑的启动和引导新的集群,kubernetes包含了一种动态管理的持有令牌类型,称作启动引导令牌(Bootstrap Token)</li>
<li>这些令牌以<code>Secret</code>的形式保存在<code>kube-system</code>的名称空间中,可以动态的管理和创建。</li>
<li>控制器管理器包含的TokenCleaner控制器能够在启动引导令牌过期时将其删除。</li>
<li>在使用kubeadm部署kubernetes的时候,可以通过<code>kubeadm token list</code>进行查询。</li>
</ul>
</li>
<li>ServiceAccount：是kubernetes自动生成的,并且会自动挂载到容器的<code>/run/secrets/kubernetes.io/serviceaccount</code>目录当中</li>
<li>Webhook令牌身份认证
<ul>
<li><code>--authentication-token-webhook-config-file</code>：指向一个配置文件,其中描述如何访问远程的Webhook服务</li>
<li><code>--authentication-token-webhook-cache-ttl</code>：用来设定身份认证决定的缓存时间。默认为2分钟。</li>
</ul>
</li>
</ul>
<h3 id="静态token用法">静态Token用法</h3>
<ol>
<li>新建一个存放静态Token的目录</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p /etc/kubernetes/auth
</span></span></code></pre></div><ol start="2">
<li>将Token内容写入到文件当中</li>
</ol>
<blockquote>
<p>注意：该文件格式为CSV格式，其实你也可以随便写:happy:</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">描述： Token值  用户名称  用户ID 可选组名
</span></span><span class="line"><span class="cl">kube-token,kubeadminer,1000,<span class="s2">&#34;group1,group2,group3&#34;</span>
</span></span></code></pre></div><p>假设这是我们请求名称空间的请求: <code>curl -k -v -XGET -H &quot;Authrization: Bearer kube-token&quot; https://api.k8s.version.cn:6443/api/v1/namespaces/default</code></p>
<p>正常请求会返回，因为我没有创建这个<code>kube-token</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;kind&#34;</span><span class="p">:</span> <span class="s2">&#34;Status&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s2">&#34;v1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;metadata&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="s2">&#34;Failure&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;namespaces \&#34;default\&#34; is forbidden: User \&#34;system:anonymous\&#34; cannot get resource \&#34;namespaces\&#34; in API group \&#34;\&#34; in the namespace \&#34;default\&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;reason&#34;</span><span class="p">:</span> <span class="s2">&#34;Forbidden&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;details&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;kind&#34;</span><span class="p">:</span> <span class="s2">&#34;namespaces&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;code&#34;</span><span class="p">:</span> <span class="mi">403</span>
</span></span></code></pre></div><ol start="3">
<li>设置<code>API Server</code></li>
</ol>
<blockquote>
<p>注意： 操作的时候请备份你的API Server文件，这是一个好习惯.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c">#  vim /etc/kubernetes/manifests/kube-apiserver.yaml </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 挂载本地的/etc/basic-auth路径</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/basic-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">auth-files</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span>- <span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/basic-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">DirectoryOrCreate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">auth-files</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 修改API Server启动参数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- --<span class="l">token-auth-file=/etc/basic-auth/kube-token.csv</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>请您等待APIServer重启完成</p>
</blockquote>
<p>当我们再次通过<code>kube-token</code>进行请求API Server 如果能成功识别到我们的用户即可，也就知道我们当前的用户为<code>kubeadminer</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;kind&#34;</span><span class="p">:</span> <span class="s2">&#34;Status&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s2">&#34;v1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;metadata&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="s2">&#34;Failure&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;namespaces \&#34;default\&#34; is forbidden: User \&#34;kubeadminer\&#34; cannot get resource \&#34;namespaces\&#34; in API group \&#34;\&#34; in the namespace \&#34;default\&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;reason&#34;</span><span class="p">:</span> <span class="s2">&#34;Forbidden&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;details&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;kind&#34;</span><span class="p">:</span> <span class="s2">&#34;namespaces&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;code&#34;</span><span class="p">:</span> <span class="mi">403</span>
</span></span></code></pre></div><h3 id="useraccount和serviceaccount的区别">UserAccount和ServiceAccount的区别</h3>
<ol>
<li>UserAccount是与外部认证二次开发对接实现的,签发的Token是外部系统,每次APIServer需要带此Token请求外部认证服务器。</li>
</ol>
<h3 id="构建符合kubernetes规范的认证服务">构建符合Kubernetes规范的认证服务</h3>
<p>需要依照kubernetes规范，来构建认证服务进行认证</p>
<ol>
<li>URL：http://api.k8s.verbos/authenticate</li>
<li>Method: POST(需要携带请求数据等等…)</li>
<li>Input：</li>
<li>Output：</li>
</ol>
<h3 id="webhook认证用法">WebHook认证用法</h3>
<ol>
<li>新建一个webhook-config.json</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;kind&#34;</span><span class="p">:</span> <span class="s2">&#34;Config&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s2">&#34;v1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;preferences&#34;</span><span class="p">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;clusters&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;github-authn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;cluster&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;server&#34;</span><span class="p">:</span> <span class="s2">&#34;https://192.168.1.100:8443/authenticate&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;users&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;authn-apiserver&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;user&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;token&#34;</span><span class="p">:</span> <span class="s2">&#34;secret&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;contexts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;webhook&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;context&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;cluster&#34;</span><span class="p">:</span> <span class="s2">&#34;github-authn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;user&#34;</span><span class="p">:</span> <span class="s2">&#34;authn-apiserver&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;current-context&#34;</span><span class="p">:</span> <span class="s2">&#34;webhook&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="授权">授权</h2>
<p>授权主要是用于对于集群资源的访问控制，通过检查请求包含的相关属性值，与相对应的访问策略进行比较，API请求必须满足某些策略才能被处理。跟认证类似，kubernetes也支持多种授权机制，并支持同时开启多个插件授权（只要有一个通过即可）。如果授权成功，则用户的请求会发送到准入控制模块进行下一步处理。</p>
<p>kubernetes授权仅处理以下请求属性</p>
<ul>
<li>user、group、extra</li>
<li>API、请求方法、请求路径</li>
<li>请求资源和子资源</li>
<li>Namespace</li>
<li>API Group</li>
</ul>
<p>kubernetes支持以下授权插件</p>
<ul>
<li>ABAC</li>
<li>RBAC</li>
<li>WebHook</li>
<li>Node</li>
</ul>
<h3 id="rbac和abac">RBAC和ABAC</h3>
<p>ABAC(Attribute Based Access Control)本来是不错的概念，但是在kubernetes中实现的比较难于管理和理解，而且需要对master所在节点进行SSH和文件系统权限，要使得对授权的变更生效还需要重启API Server</p>
<p>而RBAC的策略可以利用kubelet或者kubernetes API进行配置。RBAC可以授权给用户，让用户有权进行授权管理，这样就可以无需接触节点，直接进行授权管理。RBAC在kubernetes中被映射为API资源和操作。</p>
<h3 id="role和clusterrole">Role和ClusterRole</h3>
<p>Role(角色)是一系列特定角色权限的集合，例如一个角色可以包含读取Pod的权限和列出Pod的权限。</p>
<p>Role只能用来给某个特定的namespace中的资源作鉴权，对多namespace和集群级的资源活着是非资源类的API(如/healthz)使用ClusterRole</p>
<blockquote>
<p>下面是一个简单的Role配置</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Role</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">reader-pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;pods&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">,</span><span class="s2">&#34;watch&#34;</span><span class="p">,</span><span class="s2">&#34;list&#34;</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>下面是一个简单地ClusterRole配置</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">reader-pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;pods&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">,</span><span class="s2">&#34;watch&#34;</span><span class="p">,</span><span class="s2">&#34;list&#34;</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></div><h3 id="binding">Binding</h3>
<p>如果你想使全局生效可以使用<code>kind: ClusterRoleBingding</code>并且不写<code>namespace</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">RoleBingding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">reader-pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 当前用户只有development的读取权限</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">development</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">User</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">guest01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">reader-pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span></code></pre></div><h3 id="账户组的管理">账户/组的管理</h3>
<p>角色绑定(Role Bingding)是将角色中定义的权限赋予一个或者一组用户。
它包含主体(用户、组或服务账户)的列表和对这些主体所获得的角色的引用
组的概念</p>
<ul>
<li>当外部系统认证对接的时候,用户信息可包含组信息，授权可以针对用户群组进行</li>
<li>当对<code>Service Account</code>授权的时候,Group代表某个Namespace下的所有<code>Service Account</code>
如果针对群组授权</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBingding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">reader-pods-global</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">guest01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">reader-pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span></code></pre></div><p><code>name: system:serviceaccounts</code>表示当前是一个serviceaccount的格式进行命名的,并且授权给development这个Namespace里面所有的ServiceAccount</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBingding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">reader-pods-global</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">system:serviceaccounts:development</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">reader-pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span></code></pre></div><h3 id="规划系统角色">规划系统角色</h3>
<p>User:</p>
<ul>
<li>管理员：管理所有资源的权限</li>
<li>普通用户
<ul>
<li>是否有该用户创建的namespace下的所有object的操作权限？</li>
<li>对其他用户的namespace资源是否可读、是否可写
SystemAccount</li>
</ul>
</li>
<li>System是开发者创建应用后，应用于apiserver通讯需要的身份</li>
<li>用户可以创建自定的ServiceAccount，kubernetes也为每个namespace创建default <code>ServiceAccount</code></li>
<li><code>Default ServiceAccount</code>通常需要给定权限以后才能对API Server进行写操作</li>
</ul>
<h3 id="与权限相关的其他最佳实践">与权限相关的其他最佳实践</h3>
<p>ClusterRole是非namespace绑定的,针对整个集群生效。
通常需要创建一个管理员角色，并且绑定给开发运营团队的成员
<code>ThirdPartyResource</code>和<code>CustomResourceDefinition</code>是全局资源，普通用户创建以后需要管理员授权才能真正操作该对象。</p>
<blockquote>
<p>ssh到master节点通过<code>insecure port</code>访问apiserver可以绕过鉴权,当需要做管理操作又没有权限的时候可以使用(不推荐)</p>
</blockquote>
<h2 id="准入">准入</h2>
<h3 id="准入控制">准入控制</h3>
<p>准入控制(Admission Control)在授权后对请求做进一步的验证或添加默认参数。不同于授权和认证只关心请求的用户和操作，准入控制还处理请求的内容，并且仅对创建、更新、删除或连接等有效，而对读操作无效。
准入控制支持同时开启多个插件，它们依次调用，只有全部插件都通过请求才可以进入系统。
配额管理</p>
<ul>
<li>原因：资源有限，如何限定某个用户有多少资源
方案</li>
<li>预定义每个<code>Namespace</code>的<code>ResourceQuota</code>,并且把<code>spec</code>保存为<code>ConfigMap</code></li>
<li>用户可以创建多少个Pod?
<ul>
<li>BestEffortPod</li>
<li>QuSPod</li>
</ul>
</li>
<li>创建<code>ResourceQuota Controller</code>: 一般用于监控<code>namespace</code>创建事件，当namespace创建的时候，在该namespace创建对应的ResourceQuota对象</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 限制default namespace只能创建3个configmap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ResourceQuota</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">default-counts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hard</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">configmaps</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span></code></pre></div><h3 id="准入控制插件">准入控制插件</h3>
<ul>
<li>AlwaysAdmit: 接受所有请求</li>
<li>AlwaysPullImages: 总是拉新的镜像。一般用多租户场景</li>
<li>DenyEscalatingExec: 禁止特权容器的exec和attach操作</li>
<li>ImagePolicyWebhook: 通过webhook决定image策略,需要同时配置<code>--admission-control-config-file</code></li>
<li>ServiceAccount: 自动创建默认Service Account，并确保Pods引用的ServiceAccount已经存在</li>
<li>SecurityContextDeny: 拒绝包含非法SecurityContext配置的容器</li>
<li>ResourceQuota：限制Pod的请求不会超过配额，需要在namespace中创建<code>ResourceQuota</code>对象</li>
<li>MutatingWebhookConfiguration: 变形插件，支持对准入对象的修改</li>
<li>ValidatingWebhoookConfiguration: 校验插件，只能对准入对象合法性进行校验</li>
</ul>
<blockquote>
<p>太多了 我就不一个一个写了…除了默认的准入控制插件以外，kubernetes预留了准入控制插件的扩展点，用户可以自定义准入控制插件</p>
</blockquote>
<h3 id="准入控制插件的演示">准入控制插件的演示</h3>
<ul>
<li>MutatingWebhookConfiguration: 说白了就是对准入控制的对象内容进行修改</li>
<li>确保启用 MutatingAdmissionWebhook 和 ValidatingAdmissionWebhook 控制器。 <a class="link" href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/admission-controllers/#is-there-a-recommended-set-of-admission-controllers-to-use"  target="_blank" rel="noopener"
    >这里</a> 是一组推荐的 admission 控制器，通常可以启用。</li>
<li>确保启用了<code>admissionregistration.k8s.io/v1</code>的API</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/cncamp/admission-controller-webhook-demo.git
</span></span></code></pre></div><blockquote>
<p>这个暂且先不演示了…我也在研究哈哈</p>
</blockquote>
<h2 id="限流">限流</h2>
<h3 id="漏斗算法">漏斗算法</h3>
<p>漏洞算法也很容易理解，请求进来以后首先进入漏斗里面，然后漏斗以恒定的速率将请求流出进行处理，从而起到平滑流量的作用。
当请求量过大，漏斗达到最大容量的时候会溢出，此时请求被丢弃
在系统看来，请求永远是以平滑的速率过来，从而起到了保护系统的作用</p>
<h3 id="令牌桶算法">令牌桶算法</h3>
<ol>
<li>令牌桶算法是对漏斗算法的一种改进，除了能够起到限流的作用外，还允许一定程度的流量突发
在令牌桶算法中，存在一个令牌桶，算法中存在一种机制以恒定的速率向令牌桶中放入令牌。</li>
<li>令牌桶也有一定的容量，如果满了的话令牌也无法放进去</li>
<li>当有请求进入的时候，会首先到令牌桶中去那令牌，则该请求会被处理，并消耗掉拿到的令牌，如果令牌桶为空，则请求会被丢弃。</li>
</ol>
<h3 id="api-server的限流">API Server的限流</h3>
<ul>
<li><code>max-requests-inflight</code>: 在给定的时间内的最大的<code>non-mutating</code>请求数</li>
<li><code>max-mutating-requests-inflight</code>: 在给定时间内的最大<code>mutating</code>请求数，调整apiserver的流控qos</li>
</ul>
<p><strong>反应出来的问题</strong></p>
<ol>
<li>粒度粗: 无法为不同用户，不同场景设置不同的限流</li>
<li>单队列：共享限流的窗口/桶，一个坏用户可能将整个系统堵塞</li>
<li>不公平：正常用户的请求会被排到队尾，无法及时处理请求而饿死</li>
<li>无优先级: 重要的系统指令一并被限流，系统故障难以恢复</li>
</ol>
<table>
  <thead>
      <tr>
          <th></th>
          <th>默认值</th>
          <th>节点数1000-3000</th>
          <th>节点数&gt;3000</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>max-requests-inflight</td>
          <td>400</td>
          <td>1500</td>
          <td>3000</td>
      </tr>
      <tr>
          <td>max-mutating-requests-inflight</td>
          <td>200</td>
          <td>500</td>
          <td>1000</td>
      </tr>
  </tbody>
</table>
<h3 id="api-priority-and-fairness">API Priority and Fairness</h3>
<ul>
<li>APF以更细颗粒度的方式对请求进行分类和隔离。</li>
<li>它还引入了空间有限的排队机制，因此在非常短暂的突发情况下，API服务器不会拒绝任何请求</li>
<li>通过使用公平排队技术从队列中分发请求，这样一个行为不佳的控制器就不会饿死其他控制器</li>
<li>APF的核心
<ul>
<li>多等级</li>
<li>多队列</li>
</ul>
</li>
<li>APF 的实现依赖两个非常重要的资源 <code>FlowSchema</code>, <code>PriorityLevelConfiguration</code></li>
<li>APF 对请求进行更细粒度的分类，每一个请求分类对应一个 FlowSchema (FS)</li>
<li>FS 内的请求又会根据 distinguisher 进一步划分为不同的 Flow.</li>
<li>FS 会设置一个优先级 (Priority Level, PL)，不同优先级的并发资源是隔离的。所以不同优先级的资源不会相互排挤。特定优先级的请求可以被高优处理。</li>
<li>一个 PL 可以对应多个 FS，PL 中维护了一个 <code>QueueSet</code>，用于缓存不能及时处理的请求，请求不会因为超出 PL 的并发限制而被丢弃。</li>
<li>FS 中的每个 Flow 通过 shuffle sharding 算法从 QueueSet 选取特定的 queues 缓存请求。</li>
<li>每次从 QueueSet 中取请求执行时，会先应用 fair queuing 算法从 QueueSet 中选中一个 queue，然后从这个 queue 中取出 oldest 请求执行。所以即使是同一个 PL 内的请求，也不会出现一个 Flow 内的请求一直占用资源的不公平现象。</li>
</ul>
<p>通过<code> kubectl get flowschema</code>查看当前的<code>flow</code></p>
<h3 id="flow-schema">Flow Schema</h3>
<p><code>FlowSchema</code>会匹配一些入站请求,并将他们分配给优先级
每个入站请求都会有对应的<code>FlowSchema</code>测试是否匹配，首先从<code>matchingPrecedence</code>数值最低的匹配开始(我们认为这是逻辑上匹配最高)，然后依次进行匹配，直到首个匹配出现.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">flowcontrol.apiserver.k8s.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">FlowSchema</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kube-scheduler</span><span class="w"> </span><span class="c"># FlowSchema名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">distinguisherMethod</span><span class="p">:</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ByNamespace </span><span class="w"> </span><span class="c"># Distinguisher 区分器</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">matchingPrecedence</span><span class="p">:</span><span class="w"> </span><span class="m">800</span><span class="w">  </span><span class="c"># 规则优先级,数字越小级别越高</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">priorityLevelConfiguration</span><span class="p">:</span><span class="w"> </span><span class="c"># 对应的优先级队列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">workload-high </span><span class="w"> </span><span class="c"># 优先级队列名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">resourceRules</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">resources</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;*&#39;</span><span class="w">   </span><span class="c"># 对应的资源和请求类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;*&#39;</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">subjects</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">User</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">user</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">system:kube-scheduler</span><span class="w">
</span></span></span></code></pre></div><h3 id="prioritylevelconfiguration优先级队列">PriorityLevelConfiguration(优先级队列)</h3>
<p>一个<code>PriorityLevelConfiguration</code>表示单个隔离类型。
每个<code>PriorityLevelConfiguration</code>对未完成的请求数有各自的限制,对排队中的请求数也有限制。</p>
<blockquote>
<p>PriorityLevelConfiguration是可以被多个FlowSchema进行复用的</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">flowcontrol.apiserver.k8s.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PriorityLevelConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">global-default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">limited</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">assuredConcurrencyShares</span><span class="p">:</span><span class="w"> </span><span class="m">20</span><span class="w"> </span><span class="c"># 允许的并发请求</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">limitResponse</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">queuing</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">handSize</span><span class="p">:</span><span class="w"> </span><span class="m">6</span><span class="w"> </span><span class="c"># shuffle sharding配置,每个flowschmea+distinguisher的请求会被enqueue到多少个队列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">queueLengthLimit</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w"> </span><span class="c"># 每个队列中的对象数量</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">queues</span><span class="p">:</span><span class="w"> </span><span class="m">128</span><span class="w">  </span><span class="c"># 当前PriorityLevel的队列总数</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Queue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Limited</span><span class="w">
</span></span></span></code></pre></div><p>可以通过<code>kubectl get PriorityLevelConfiguration</code>查看当前kubernetes中的优先级队列</p>
<ul>
<li>system: 用于 system:nodes 组（即 kubelet）的请求； kubelet 必须能连上 API 服务器，以便工作负载能够调度到其上。</li>
<li>leader-election:
<ul>
<li>用于内置控制器的领导选举的请求 （特别是来自 kube-system 名称空间中 system:kube- controller-manager 和 system:kube-scheduler 用户和服务账号，针对 endpoints、 configmaps 或 leases 的请求）。</li>
<li>将这些请求与其他流量相隔离非常重要，因为领导者选举失败会导致控制器发生故障并重新启动，这反过来会导致新启动的控制器在同步信息时，流量开销更大。</li>
</ul>
</li>
<li>workload-high: 优先级用于内置控制器的请求</li>
<li>workload-low: 优先级适用于来自任何服务帐户的请求，通常包括来自 Pods 中运行的控制器的所有请求。</li>
<li>global-default: 优先级可处理所有其他流量，例如：非特权用户运行的交互式 kubectl 命令。</li>
<li>exempt: 优先级的请求完全不受流控限制：它们总是立刻被分发。 特殊的 exempt FlowSchema把 system:masters 组的所有请求都归入该优先级组。</li>
<li>catch-all:
<ul>
<li>优先级与特殊的 catch-all FlowSchema 结合使用，以确保每个请求都分类。</li>
<li>一般不应该依赖于 catch-all 的配置，而应适当地创建自己的 catch-all FlowSchema 和PriorityLevelConfigurations（或使用默认安装的 global-default 配置）。</li>
<li>为了帮助捕获部分请求未分类的配置错误，强制要求 catch-all 优先级仅允许5个并发份额，并且不对请求进行排队，使得仅与 catch-all FlowSchema 匹配的流量被拒绝的可能性更高，并显示 HTTP 429 错误。</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl get PriorityLevelConfiguration</span>
</span></span><span class="line"><span class="cl">NAME              TYPE      ASSUREDCONCURRENCYSHARES   QUEUES   HANDSIZE   QUEUELENGTHLIMIT   AGE
</span></span><span class="line"><span class="cl">catch-all         Limited   <span class="m">5</span>                          &lt;none&gt;   &lt;none&gt;     &lt;none&gt;             13h
</span></span><span class="line"><span class="cl">exempt            Exempt    &lt;none&gt;                     &lt;none&gt;   &lt;none&gt;     &lt;none&gt;             13h
</span></span><span class="line"><span class="cl">global-default    Limited   <span class="m">20</span>                         <span class="m">128</span>      <span class="m">6</span>          <span class="m">50</span>                 13h
</span></span><span class="line"><span class="cl">leader-election   Limited   <span class="m">10</span>                         <span class="m">16</span>       <span class="m">4</span>          <span class="m">50</span>                 13h
</span></span><span class="line"><span class="cl">node-high         Limited   <span class="m">40</span>                         <span class="m">64</span>       <span class="m">6</span>          <span class="m">50</span>                 13h
</span></span><span class="line"><span class="cl">system            Limited   <span class="m">30</span>                         <span class="m">64</span>       <span class="m">6</span>          <span class="m">50</span>                 13h
</span></span><span class="line"><span class="cl">workload-high     Limited   <span class="m">40</span>                         <span class="m">128</span>      <span class="m">6</span>          <span class="m">50</span>                 13h
</span></span><span class="line"><span class="cl">workload-low      Limited   <span class="m">100</span>                        <span class="m">128</span>      <span class="m">6</span>          <span class="m">50</span>                 13h
</span></span></code></pre></div><p>详细说一下分流策略</p>
<ol>
<li>根据<code>service-accounts</code>的flow进行限制,<code>distinguisherMethod</code>根据不同的用户进行限流。</li>
<li>这一类的flow应该通过<code>priorityLevelConfiguration</code>中定义的<code>workload-low</code>进行限流</li>
<li>通过<code>workload-low</code>中定义的<code>assuredConcurrencyShares</code>设置当前请求的最大并发数量</li>
</ol>
<h2 id="高可用apiserver">高可用APIServer</h2>
<h3 id="搭建多租户的kubernetes集群">搭建多租户的kubernetes集群</h3>
<p>授信</p>
<ul>
<li>认证: 禁止匿名访问，只允许可信用户做操作。</li>
<li>授权：基于授信的操作，防止多用户之间互相影响，比如普通用户删除Kubernetes核心服务，或者A用户删除或修改B用户 的应用。</li>
</ul>
<p>隔离</p>
<ul>
<li>可见行隔离：用户只关心自己的应用，无需看到其他用户的服务和部署。</li>
<li>资源隔离：有些关键项目对资源需求较高，需要有专业设备，不与其他人共享。</li>
<li>应用访问隔离：用户创建的服务，按照既定规则允许其他用户访问。</li>
</ul>
<p>资源管理</p>
<ul>
<li>Quota管理: 谁能用多少资源</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>kubernetes-dashboard</title>
      <link>https://blog.mletter.cn/tech/kubernetes/kube-dashboard/</link>
      <pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/kube-dashboard/</guid>
      <description>kubernetes官方dashboard部署方案</description>
      <content:encoded><![CDATA[<h2 id="官方webui部署">官方WebUI部署</h2>
<ul>
<li><a class="link" href="https://github.com/kubernetes/dashboard"  target="_blank" rel="noopener"
    >Dashboard</a></li>
</ul>
<h3 id="安装部署">安装部署</h3>
<p>从官方仓库部署</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.6.1/aio/deploy/recommended.yaml</span>
</span></span></code></pre></div><p>如果无法下载请新建<code>dashboard.yaml</code>复制以下内容进行应用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># Copyright 2017 The Kubernetes Authors.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># you may not use this file except in compliance with the License.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># You may obtain a copy of the License at</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#     http://www.apache.org/licenses/LICENSE-2.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Unless required by applicable law or agreed to in writing, software</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># distributed under the License is distributed on an &#34;AS IS&#34; BASIS,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See the License for the specific language governing permissions and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># limitations under the License.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">8443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard-certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Opaque</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard-csrf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Opaque</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">csrf</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard-key-holder</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Opaque</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard-settings</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Role</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Allow Dashboard to get, update and delete Dashboard exclusive secrets.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;secrets&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resourceNames</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;kubernetes-dashboard-key-holder&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;kubernetes-dashboard-certs&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;kubernetes-dashboard-csrf&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;update&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;delete&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Allow Dashboard to get and update &#39;kubernetes-dashboard-settings&#39; config map.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;configmaps&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resourceNames</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;kubernetes-dashboard-settings&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;update&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Allow Dashboard to get metrics.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;services&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resourceNames</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;heapster&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;dashboard-metrics-scraper&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;proxy&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;services/proxy&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resourceNames</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;heapster&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;http:heapster:&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;https:heapster:&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;dashboard-metrics-scraper&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;http:dashboard-metrics-scraper&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Allow Metrics Scraper to get metrics from the Metrics server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;metrics.k8s.io&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;pods&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;nodes&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;list&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;watch&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">RoleBinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Role</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">revisionHistoryLimit</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">seccompProfile</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">RuntimeDefault</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetesui/dashboard:v2.6.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">8443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- --<span class="l">auto-generate-certificates</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- --<span class="l">namespace=kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># Uncomment the following line to manually specify Kubernetes API server Host</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># If not specified, Dashboard will attempt to auto discover the API server and connect</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># to it. Uncomment only if the default does not work.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># - --apiserver-host=http://my-address:port</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard-certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># Create on-disk volume to store exec logs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tmp-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">scheme</span><span class="p">:</span><span class="w"> </span><span class="l">HTTPS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">allowPrivilegeEscalation</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">readOnlyRootFilesystem</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">runAsUser</span><span class="p">:</span><span class="w"> </span><span class="m">1001</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">runAsGroup</span><span class="p">:</span><span class="w"> </span><span class="m">2001</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard-certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">secret</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard-certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tmp-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">emptyDir</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceAccountName</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nodeSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;kubernetes.io/os&#34;: </span><span class="l">linux</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Comment the following tolerations if Dashboard must not be deployed on master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tolerations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">node-role.kubernetes.io/master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">effect</span><span class="p">:</span><span class="w"> </span><span class="l">NoSchedule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">dashboard-metrics-scraper</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">dashboard-metrics-scraper</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">dashboard-metrics-scraper</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">dashboard-metrics-scraper</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">dashboard-metrics-scraper</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">revisionHistoryLimit</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">dashboard-metrics-scraper</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">dashboard-metrics-scraper</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">seccompProfile</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">RuntimeDefault</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">dashboard-metrics-scraper</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetesui/metrics-scraper:v1.0.8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">scheme</span><span class="p">:</span><span class="w"> </span><span class="l">HTTP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tmp-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">allowPrivilegeEscalation</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">readOnlyRootFilesystem</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">runAsUser</span><span class="p">:</span><span class="w"> </span><span class="m">1001</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">runAsGroup</span><span class="p">:</span><span class="w"> </span><span class="m">2001</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceAccountName</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nodeSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;kubernetes.io/os&#34;: </span><span class="l">linux</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Comment the following tolerations if Dashboard must not be deployed on master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tolerations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">node-role.kubernetes.io/master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">effect</span><span class="p">:</span><span class="w"> </span><span class="l">NoSchedule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tmp-volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">emptyDir</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></div><p>创建应用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -f dashboard.yaml
</span></span></code></pre></div><p>查看Dashboard的<code>Pod</code>是否运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># kubectl get pods --all-namespaces</span>
</span></span><span class="line"><span class="cl">NAMESPACE              NAME                                        READY   STATUS    RESTARTS   AGE
</span></span><span class="line"><span class="cl">kubernetes-dashboard   dashboard-metrics-scraper-8c47d4b5d-t92v9   1/1     Running   <span class="m">0</span>          26m
</span></span><span class="line"><span class="cl">kubernetes-dashboard   kubernetes-dashboard-6c75475678-zlqn7       1/1     Running   <span class="m">0</span>          26m
</span></span></code></pre></div><p>修改Dashboard的<code>Services</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="p">[</span><span class="l">root@containerd-kube-master ~]# kubectl edit services kubernetes-dashboard  -n kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Please edit the object below. Lines beginning with a &#39;#&#39; will be ignored,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># and an empty file will abort the edit. If an error occurs while saving this file will be</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># reopened with the relevant failures.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kubectl.kubernetes.io/last-applied-configuration</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      {&#34;apiVersion&#34;:&#34;v1&#34;,&#34;kind&#34;:&#34;Service&#34;,&#34;metadata&#34;:{&#34;annotations&#34;:{},&#34;labels&#34;:{&#34;k8s-app&#34;:&#34;kubernetes-dashboard&#34;},&#34;name&#34;:&#34;kubernetes-dashboard&#34;,&#34;namespace&#34;:&#34;kubernetes-dashboard&#34;},&#34;spec&#34;:{&#34;ports&#34;:[{&#34;port&#34;:443,&#34;targetPort&#34;:8443}],&#34;selector&#34;:{&#34;k8s-app&#34;:&#34;kubernetes-dashboard&#34;}}}</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">creationTimestamp</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2022-09-06T02:58:06Z&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resourceVersion</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;5359&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">31019fac-9b16-46e5-9172-2cc3f63f2c86</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clusterIP</span><span class="p">:</span><span class="w"> </span><span class="m">10.101.114.92</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clusterIPs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="m">10.101.114.92</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">internalTrafficPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Cluster</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ipFamilies</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">IPv4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ipFamilyPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">SingleStack</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">8443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">30000</span><span class="w"> </span><span class="c"># 添加一行nodePort</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">k8s-app</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sessionAffinity</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w"> </span><span class="c"># 修改为NodePort</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">loadBalancer</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></div><p>改完以后一定要看一眼生效无生效啊</p>
<ul>
<li>查看到<code>TYPE</code>如果是<code>NodePort</code></li>
<li>查看<code>PORT</code>对应443映射到了30000端口</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># kubectl get services --all-namespaces</span>
</span></span><span class="line"><span class="cl">NAMESPACE              NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>                  AGE
</span></span><span class="line"><span class="cl">default                kubernetes                  ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP                  98m
</span></span><span class="line"><span class="cl">kube-system            kube-dns                    ClusterIP   10.96.0.10       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   98m
</span></span><span class="line"><span class="cl">kubernetes-dashboard   dashboard-metrics-scraper   ClusterIP   10.103.193.200   &lt;none&gt;        8000/TCP                 43m
</span></span><span class="line"><span class="cl">kubernetes-dashboard   kubernetes-dashboard        NodePort    10.101.114.92    &lt;none&gt;        443:30000/TCP            43m
</span></span></code></pre></div><h3 id="访问页面">访问页面</h3>
<ul>
<li>访问<a class="link" href="https://ip/"  target="_blank" rel="noopener"
    >https://IP</a>:PORT 例如: <a class="link" href="https://blog.mletter.cn/posts/3ac849ff#/login"  target="_blank" rel="noopener"
    >https://10.1.6.45:30000/#/login</a></li>
</ul>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="img" loading="lazy" src="https://bj.bcebos.com/baidu-rmb-video-cover-1/de50d922a1520814268f0051945f2f46.png"></p>
<p>新版本中默认不存储<code>secret</code>的加密数据了,所以如果你想使用Token进行登录的话,你需要新建一个用户并且绑定角色</p>
<ul>
<li>新建一个<code>user.yaml</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">admin-user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">admin-user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">cluster-admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">admin-user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">[</span><span class="l">root@containerd-kube-master ~]# kubectl apply -f user.yaml</span><span class="w">
</span></span></span></code></pre></div><p>基于<code>admin-user</code>创建一个token,然后把输出的token粘贴到Dashboard</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@Online-Beijing-master1 ~<span class="o">]</span><span class="c1"># kubectl create token admin-user -n kubernetes-dashboard</span>
</span></span><span class="line"><span class="cl">eyJhbGciOiJSUzI1NiIsImtpZCI6InN2amtNUDdoaTRoU3VUVUw3aC1UTkVCRXlBRkhnQmlPTWMzWWZmbUhTd0kifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjc3NTk5NjEwLCJpYXQiOjE2Nzc1OTYwMTAsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiZGU3ZDYxNWItMDk5MC00ZjI3LTlkOGQtNzkwMzQyNjZjNjRlIn19LCJuYmYiOjE2Nzc1OTYwMTAsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.uvntmSuffTF8HGIZNacfmDJr8DdMTY4SR_H6Gyxck6Te_p2J4u5mNNmId2F5uWaoeySCYam-CUkkAO2F5Uh2WjxfD0wb2YI8-FRKic8n40n30TgKhdDeK-wlliDK5kVlf9yvy5uDEc8TWZhkXz-e9WLCMqta4J6_vc6t5PYJf8u1I_SYVOiC5fgP46z3W9bZMYeGV7xmKQGl9OeofQokC1TJCojtrt0AZJ0MW_2FQjZG7ONdiywaOYnST-Ii5rK12hJFoAjZem6aTzXikOJJ03zw7Kw4WqVdMAqnbs81Clkefi-ZPxReED2wi65RbLf8KVXFVWMn9EccX5IQC5Y49Q
</span></span></code></pre></div><h2 id="推荐几个其他的webui">推荐几个其他的WebUi</h2>
<p><a class="link" href="https://kubesphere.io/zh/"  target="_blank" rel="noopener"
    >KubeSphere</a>
<a class="link" href="https://www.kubegems.io/"  target="_blank" rel="noopener"
    >KubeGems</a>
<a class="link" href="https://kuboard.cn/,Kuboard"  target="_blank" rel="noopener"
    >Kuboard</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>kubernetes1.22.0单节点集群部署</title>
      <link>https://blog.mletter.cn/tech/kubernetes/install-kubernetes-1220/</link>
      <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/install-kubernetes-1220/</guid>
      <description>kubeadm版部署kubernetes方案</description>
      <content:encoded><![CDATA[<h2 id="kubernetes12210部署">kubernetes1.22.10部署</h2>
<h2 id="准备工作">准备工作</h2>
<ul>
<li>兼容的 Linux 主机。Kubernetes 项目为基于 Debian 和 Red Hat 的 Linux 发行版以及那些没有包管理器的发行版提供了通用说明。</li>
<li>每台机器 2 GB 或更多 RAM（任何更少都会为您的应用程序留下很小的空间）。</li>
<li>2 个 CPU 或更多。</li>
<li>集群中所有机器之间的完整网络连接（公共或专用网络都可以）。</li>
<li>每个节点的唯一主机名、MAC 地址和 product_uuid。有关更多详细信息，请参见<a class="link" href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#verify-mac-address"  target="_blank" rel="noopener"
    >此处</a>。</li>
<li>您的机器上的某些端口是开放的。有关更多详细信息，请参见<a class="link" href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports"  target="_blank" rel="noopener"
    >此处</a>。</li>
<li>交换Swap分区。必须禁用Swap才能使 kubelet 正常工作。</li>
</ul>
<h3 id="我的服务器配置列表">我的服务器配置列表</h3>
<p>没有必要按照我的这个配置去操作个人建议实验环境：正常演示环境2核2G就够了</p>
<h3 id="需要开放的端口">需要开放的端口</h3>
<p>虽然 etcd 端口包含在控制平面部分，但您也可以在外部或自定义端口上托管自己的 etcd 集群。
可以覆盖所有默认端口号。当使用自定义端口时，这些端口需要打开而不是此处提到的默认值。
一个常见的例子是 API 服务器端口，有时会切换到 443。或者，默认端口保持原样，API 服务器放在负载均衡器后面，该负载均衡器监听 443 并将请求路由到默认端口上的 API 服务器。</p>
<h3 id="准备主机地址">准备主机地址</h3>
<ul>
<li>修改每一台主机的<code>/etc/hosts</code>配置</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># vim /etc/hosts</span>
</span></span><span class="line"><span class="cl">10.1.6.45 containerd-kube-master
</span></span><span class="line"><span class="cl">10.1.6.46 containerd-kube-work1
</span></span><span class="line"><span class="cl">10.1.6.47 containerd-kube-work2
</span></span></code></pre></div><h3 id="关闭swap分区以及防火墙">关闭swap分区以及防火墙</h3>
<p>进入<code>fstab</code>后找到你挂载的swap分区注释即可.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>root@bogon ~<span class="o">]</span><span class="c1"># swapoff -a</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># echo &#34;vm.swappiness = 0&#34; &gt;&gt; /etc/sysctl.conf</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@bogon ~<span class="o">]</span><span class="c1"># vim /etc/fstab</span>
</span></span><span class="line"><span class="cl"><span class="c1"># /dev/mapper/rl-swap     none                    swap    defaults        0 0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># systemctl stop firewalld &amp;&amp; systemctl disable firewalld # 关闭并且禁用防火墙</span>
</span></span></code></pre></div><p>所有内容准备完成后重启三台服务器!</p>
<h2 id="containerd的基础安装和操作">Containerd的基础安装和操作</h2>
<p>本文档后续基于<code>Containerd</code>+<code>RockyLinux</code>+<code>Kubeadmin</code>部署Kubernetes1.24版本的环境。</p>
<ul>
<li><a class="link" href="https://containerd.io/"  target="_blank" rel="noopener"
    >containerd</a></li>
<li><a class="link" href="https://www.docker.com/"  target="_blank" rel="noopener"
    >Docker</a></li>
<li><a class="link" href="https://cri-o.io/"  target="_blank" rel="noopener"
    >CRI-O</a></li>
</ul>
<p>需要注意的是,根据Kubernetes官方给出的公告。Kubernetes 1.20x版本将会废弃对<code>Docker的支持</code></p>
<h3 id="通过阿里云镜像源安装">通过阿里云镜像源安装</h3>
<ul>
<li><a class="link" href="https://developer.aliyun.com/mirror/"  target="_blank" rel="noopener"
    >官方镜像站</a></li>
<li>三台主机全部执行此操作</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># yum install -y yum-utils device-mapper-persistent-data lvm2</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># yum -y install containerd.io</span>
</span></span></code></pre></div><p>查看一下<code>containerd</code>的版本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># containerd -v</span>
</span></span><span class="line"><span class="cl">containerd containerd.io 1.6.8 9cd3357b7fd7218e4aec3eae239db1f68a5a6ec6
</span></span></code></pre></div><h3 id="生成containerd的配置文件">生成containerd的配置文件</h3>
<ul>
<li>三台主机全部执行此操作
默认情况下在<code>/etc/containerd/config.toml</code>已经有这个文件了,但是里面是一些简短的配置.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># mkdir - /etc/containerd/</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># containerd config default | tee /etc/containerd/config.toml # 生成contained的默认配置</span>
</span></span></code></pre></div><h3 id="修改sandbox_img">修改sandbox_img</h3>
<ul>
<li><code>pause</code>： 此镜像是kubernetes的基础容器</li>
<li>三台主机全部执行此操作
由于部分用户无法进入<code>k8s.gcr.io</code>资源地址,需要对此地址进行替换.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">root</span><span class="err">@</span><span class="nx">containerd-kube-master</span> <span class="nx">containerd</span><span class="p">]</span><span class="c"># vim /etc/containerd/config.toml</span>
</span></span><span class="line"><span class="cl"><span class="nx">sandbox_image</span> <span class="p">=</span> <span class="s2">&#34;k8s.gcr.io/pause:3.6&#34;</span>  <span class="c"># 找到此选项并且修改为: registry.aliyuncs.com/google_containers/pause:3.6</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">plugins</span><span class="p">.</span><span class="s2">&#34;io.containerd.grpc.v1.cri&#34;</span><span class="p">.</span><span class="nx">containerd</span><span class="p">.</span><span class="nx">default_runtime</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">runtime_type</span> <span class="p">=</span> <span class="s2">&#34;io.containerd.runtime.v1.linux&#34;</span><span class="c"># 修改为io.containerd.runtime.v1.linux</span>
</span></span></code></pre></div><h3 id="修改systemd-cgroup驱动">修改Systemd Cgroup驱动</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">plugins</span><span class="p">.</span><span class="s2">&#34;io.containerd.grpc.v1.cri&#34;</span><span class="p">.</span><span class="nx">containerd</span><span class="p">.</span><span class="nx">runtimes</span><span class="p">.</span><span class="nx">runc</span><span class="p">.</span><span class="nx">options</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">SystemdCgroup</span> <span class="p">=</span> <span class="kc">true</span>
</span></span></code></pre></div><p>然后重启<code>containerd</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> systemctl restart containerd
</span></span></code></pre></div><h3 id="设置crictl-查找的容器运行时">设置Crictl 查找的容器运行时</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock
</span></span></code></pre></div><h3 id="额外-设置containerd的私有仓库">(额外) 设置Containerd的私有仓库</h3>
<p>如果你想用自己的私有仓库的话，可以通过如下方式进行设定</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">plugins</span><span class="p">.</span><span class="s2">&#34;io.containerd.grpc.v1.cri&#34;</span><span class="p">.</span><span class="nx">image_decryption</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">key_model</span> <span class="p">=</span> <span class="s2">&#34;node&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">plugins</span><span class="p">.</span><span class="s2">&#34;io.containerd.grpc.v1.cri&#34;</span><span class="p">.</span><span class="nx">registry</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">config_path</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">plugins</span><span class="p">.</span><span class="s2">&#34;io.containerd.grpc.v1.cri&#34;</span><span class="p">.</span><span class="nx">registry</span><span class="p">.</span><span class="nx">auths</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">plugins</span><span class="p">.</span><span class="s2">&#34;io.containerd.grpc.v1.cri&#34;</span><span class="p">.</span><span class="nx">registry</span><span class="p">.</span><span class="nx">configs</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">plugins</span><span class="p">.</span><span class="s2">&#34;io.containerd.grpc.v1.cri&#34;</span><span class="p">.</span><span class="nx">registry</span><span class="p">.</span><span class="nx">configs</span><span class="p">.</span><span class="s2">&#34;10.1.6.15&#34;</span><span class="p">.</span><span class="nx">auth</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	   <span class="nx">username</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span> <span class="c"># 私有仓库账号</span>
</span></span><span class="line"><span class="cl">	   <span class="nx">password</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span> <span class="c"># 私有仓库密码</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">plugins</span><span class="p">.</span><span class="s2">&#34;io.containerd.grpc.v1.cri&#34;</span><span class="p">.</span><span class="nx">registry</span><span class="p">.</span><span class="nx">headers</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">plugins</span><span class="p">.</span><span class="s2">&#34;io.containerd.grpc.v1.cri&#34;</span><span class="p">.</span><span class="nx">registry</span><span class="p">.</span><span class="nx">mirrors</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">plugins</span><span class="p">.</span><span class="s2">&#34;io.containerd.grpc.v1.cri&#34;</span><span class="p">.</span><span class="nx">registry</span><span class="p">.</span><span class="nx">mirrors</span><span class="p">.</span><span class="s2">&#34;10.1.6.15&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">endpoint</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span> <span class="c"># 私有仓库地址</span>
</span></span></code></pre></div><h3 id="启动containerd">启动containerd</h3>
<ul>
<li>三台主机全部执行此操作
保证<code>Active: active(running)</code>的状态即可</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># systemctl restart containerd</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># systemctl enable containerd</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># systemctl status containerd</span>
</span></span><span class="line"><span class="cl">● containerd.service - containerd container runtime
</span></span><span class="line"><span class="cl">   Loaded: loaded <span class="o">(</span>/usr/lib/systemd/system/containerd.service<span class="p">;</span> disabled<span class="p">;</span> vendor preset: disabled<span class="o">)</span>
</span></span><span class="line"><span class="cl">   Active: active <span class="o">(</span>running<span class="o">)</span> since Mon 2022-09-05 02:53:02 EDT<span class="p">;</span> 6s ago
</span></span><span class="line"><span class="cl">     Docs: &lt;https://containerd.io&gt;
</span></span><span class="line"><span class="cl">  Process: <span class="m">8465</span> <span class="nv">ExecStartPre</span><span class="o">=</span>/sbin/modprobe overlay <span class="o">(</span><span class="nv">code</span><span class="o">=</span>exited, <span class="nv">status</span><span class="o">=</span>0/SUCCESS<span class="o">)</span>
</span></span><span class="line"><span class="cl"> Main PID: <span class="m">8467</span> <span class="o">(</span>containerd<span class="o">)</span>
</span></span><span class="line"><span class="cl">    Tasks: <span class="m">12</span>
</span></span><span class="line"><span class="cl">   Memory: 25.2M
</span></span><span class="line"><span class="cl">   CGroup: /system.slice/containerd.service
</span></span><span class="line"><span class="cl">           └─8467 /usr/bin/containerd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Sep <span class="m">05</span> 02:53:02 containerd-kube-master containerd<span class="o">[</span>8467<span class="o">]</span>: <span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2022-09-05T02:53:02.159619104-04:00&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;Start subscribing containerd event&#34;</span>
</span></span><span class="line"><span class="cl">Sep <span class="m">05</span> 02:53:02 containerd-kube-master containerd<span class="o">[</span>8467<span class="o">]</span>: <span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2022-09-05T02:53:02.159662811-04:00&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;Start recovering state&#34;</span>
</span></span><span class="line"><span class="cl">Sep <span class="m">05</span> 02:53:02 containerd-kube-master containerd<span class="o">[</span>8467<span class="o">]</span>: <span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2022-09-05T02:53:02.159718042-04:00&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;Start event monitor&#34;</span>
</span></span><span class="line"><span class="cl">Sep <span class="m">05</span> 02:53:02 containerd-kube-master containerd<span class="o">[</span>8467<span class="o">]</span>: <span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2022-09-05T02:53:02.159737174-04:00&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;Start snapshots syncer&#34;</span>
</span></span><span class="line"><span class="cl">Sep <span class="m">05</span> 02:53:02 containerd-kube-master containerd<span class="o">[</span>8467<span class="o">]</span>: <span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2022-09-05T02:53:02.159750064-04:00&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;Start cni network conf syncer for default&#34;</span>
</span></span><span class="line"><span class="cl">Sep <span class="m">05</span> 02:53:02 containerd-kube-master containerd<span class="o">[</span>8467<span class="o">]</span>: <span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2022-09-05T02:53:02.159756351-04:00&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;Start streaming server&#34;</span>
</span></span><span class="line"><span class="cl">Sep <span class="m">05</span> 02:53:02 containerd-kube-master containerd<span class="o">[</span>8467<span class="o">]</span>: <span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2022-09-05T02:53:02.159868546-04:00&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span>serving... <span class="nv">address</span><span class="o">=</span>/run/containerd/containerd.sock.ttrpc
</span></span><span class="line"><span class="cl">Sep <span class="m">05</span> 02:53:02 containerd-kube-master containerd<span class="o">[</span>8467<span class="o">]</span>: <span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2022-09-05T02:53:02.159906215-04:00&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span>serving... <span class="nv">address</span><span class="o">=</span>/run/containerd/containerd.sock
</span></span><span class="line"><span class="cl">Sep <span class="m">05</span> 02:53:02 containerd-kube-master containerd<span class="o">[</span>8467<span class="o">]</span>: <span class="nv">time</span><span class="o">=</span><span class="s2">&#34;2022-09-05T02:53:02.160196660-04:00&#34;</span> <span class="nv">level</span><span class="o">=</span>info <span class="nv">msg</span><span class="o">=</span><span class="s2">&#34;containerd successfully booted in 0.021144s&#34;</span>
</span></span><span class="line"><span class="cl">Sep <span class="m">05</span> 02:53:02 containerd-kube-master systemd<span class="o">[</span>1<span class="o">]</span>: Started containerd container runtime.
</span></span></code></pre></div><h3 id="配置ipv4转发">配置IPV4转发</h3>
<ul>
<li>三台全部执行</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | tee /etc/modules-load.d/kubernetes1.24.conf
</span></span></span><span class="line"><span class="cl"><span class="s">overlay
</span></span></span><span class="line"><span class="cl"><span class="s">br_netfilter
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | tee /etc/sysctl.d/kubernetes1.24-forsys.conf
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-iptables = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-ip6tables = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.ipv4.ip_forward = 1
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># modprobe br_netfilter</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># sysctl --system</span>
</span></span></code></pre></div><h2 id="kubernetes安装">kubernetes安装</h2>
<p>kubernetes的安装依旧是基于aliyun</p>
<h3 id="通过阿里云镜像源安装-1">通过阿里云镜像源安装</h3>
<ul>
<li>三台全部安装
由于官网未开放同步方式, 可能会有索引gpg检查失败的情况, 这时请用 <code>yum install -y --nogpgcheck kubelet kubeadm kubectl</code> 安装</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo
</span></span></span><span class="line"><span class="cl"><span class="s">[kubernetes]
</span></span></span><span class="line"><span class="cl"><span class="s">name=Kubernetes
</span></span></span><span class="line"><span class="cl"><span class="s">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
</span></span></span><span class="line"><span class="cl"><span class="s">enabled=1
</span></span></span><span class="line"><span class="cl"><span class="s">gpgcheck=1
</span></span></span><span class="line"><span class="cl"><span class="s">repo_gpgcheck=1
</span></span></span><span class="line"><span class="cl"><span class="s">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-work1 ~<span class="o">]</span><span class="c1"># yum install -y kubelet-1.22.10 kubeadm-1.22.10 kubectl-1.22.10</span>
</span></span></code></pre></div><p>可以通过<code>yum --showduplicates list kubelet</code>查看当前仓库中可用的版本</p>
<h3 id="安装命令提示">安装命令提示</h3>
<p>安装后可以使用tab进行快捷提示</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># yum -y install bash-completion</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># source &lt;(kubeadm completion bash) &amp;&amp; source &lt;(kubectl completion bash)</span>
</span></span></code></pre></div><p>如果你想要<code>永久</code>的使其生效,请把他们加入到<code>.bashrc</code>当中</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># vim .bashrc</span>
</span></span><span class="line"><span class="cl"><span class="c1"># .bashrc</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># User specific aliases and functions</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">rm</span><span class="o">=</span><span class="s1">&#39;rm -i&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">cp</span><span class="o">=</span><span class="s1">&#39;cp -i&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">mv</span><span class="o">=</span><span class="s1">&#39;mv -i&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Source global definitions</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -f /etc/bashrc <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        . /etc/bashrc
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> &lt;<span class="o">(</span>kubeadm completion bash<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> &lt;<span class="o">(</span>kubectl completion bash<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> &lt;<span class="o">(</span>crictl completion bash<span class="o">)</span>
</span></span></code></pre></div><h3 id="启动kubelet">启动kubelet</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># systemctl enable kubelet</span>
</span></span></code></pre></div><h3 id="初始化集群配置信息">初始化集群配置信息</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># kubeadm config print init-defaults &gt; init.yaml</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kubeadm.k8s.io/v1beta3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">bootstrapTokens</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">groups</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">system:bootstrappers:kubeadm:default-node-token</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">token</span><span class="p">:</span><span class="w"> </span><span class="l">abcdef.0123456789abcdef</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ttl</span><span class="p">:</span><span class="w"> </span><span class="l">24h0m0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">usages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">signing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">authentication</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">InitConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">localAPIEndpoint</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">advertiseAddress</span><span class="p">:</span><span class="w"> </span><span class="m">10.1.6.45</span><span class="w"> </span><span class="c"># 初始化的第一台master主机的地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">bindPort</span><span class="p">:</span><span class="w"> </span><span class="m">6443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodeRegistration</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">criSocket</span><span class="p">:</span><span class="w"> </span><span class="l">unix:///var/run/containerd/containerd.sock</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes-master</span><span class="w"> </span><span class="c"># 定义主机的唯一名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">taints</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiServer</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">timeoutForControlPlane</span><span class="p">:</span><span class="w"> </span><span class="l">4m0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kubeadm.k8s.io/v1beta3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">certificatesDir</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/kubernetes/pki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clusterName</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">controllerManager</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">dns</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">etcd</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">local</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dataDir</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/etcd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">imageRepository</span><span class="p">:</span><span class="w"> </span><span class="l">registry.aliyuncs.com/google_containers</span><span class="w"> </span><span class="c"># 修改为阿里云地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kubernetesVersion</span><span class="p">:</span><span class="w"> </span><span class="m">1.22.10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networking</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dnsDomain</span><span class="p">:</span><span class="w"> </span><span class="l">cluster.local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">serviceSubnet</span><span class="p">:</span><span class="w"> </span><span class="m">10.96.0.0</span><span class="l">/12  </span><span class="w"> </span><span class="c"># Pod使用的子网地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">scheduler</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># kubeadm init --config=init.yaml   # 等待镜像Pull完成</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>init<span class="o">]</span> Using Kubernetes version: v1.24.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>preflight<span class="o">]</span> Running pre-flight checks
</span></span><span class="line"><span class="cl"><span class="o">[</span>preflight<span class="o">]</span> Pulling images required <span class="k">for</span> setting up a Kubernetes cluster
</span></span><span class="line"><span class="cl"><span class="o">[</span>preflight<span class="o">]</span> This might take a minute or two, depending on the speed of your internet connection
</span></span><span class="line"><span class="cl"><span class="o">[</span>preflight<span class="o">]</span> You can also perform this action in beforehand using <span class="s1">&#39;kubeadm config images pull&#39;</span>
</span></span></code></pre></div><h3 id="创建admin配置目录">创建admin配置目录</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># mkdir -p $HOME/.kube</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># sudo chown $(id -u):$(id -g) $HOME/.kube/config</span>
</span></span></code></pre></div><h3 id="创建集群网络">创建集群网络</h3>
<p>因为flannel不支持网络隔离,所以不想用了!</p>
<ul>
<li>不再基于<code>flannel</code>,而是基于<code>calico</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master .kube<span class="o">]</span><span class="c1"># curl https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml -O</span>
</span></span><span class="line"><span class="cl"><span class="c1"># --&gt;这个地址好像是用不了了,现在404了...</span>
</span></span><span class="line"><span class="cl">curl https://projectcalico.docs.tigera.io/manifests/calico.yaml -O
</span></span></code></pre></div><p>编辑<code>calico.yaml</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">CALICO_IPV4POOL_CIDR</span><span class="w"> </span><span class="c"># 修改CIDR为Kubernetes的子网地址,即初始化集群的serviceSubnet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;10.96.0.0/12&#34;</span><span class="w">
</span></span></span></code></pre></div><p>创建<code>calico</code>网络</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># kubectl apply -f calico.yaml</span>
</span></span></code></pre></div><h3 id="加入集群">加入集群</h3>
<p>如果初始化成功会出现<code>Your Kubernetes control-plane has initialized successfully!</code></p>
<ul>
<li>在node节点执行</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-work1 containerd<span class="o">]</span><span class="c1"># kubeadm join 10.1.6.45:6443 --token abcdef.0123456789abcdef \\</span>
</span></span><span class="line"><span class="cl">        --discovery-token-ca-cert-hash sha256:417d4385cc4f0cc572b106a6a13bf59fd865421f12a401f3660afa6ca19e500d
</span></span></code></pre></div><h3 id="验证集群">验证集群</h3>
<p>查看master节点的<code>Pod</code>是否全部启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># kubectl get pods --all-namespaces</span>
</span></span><span class="line"><span class="cl">NAMESPACE     NAME                                        READY   STATUS    RESTARTS   AGE
</span></span><span class="line"><span class="cl">kube-system   calico-kube-controllers-6799f5f4b4-pf8w8    1/1     Running   <span class="m">0</span>          2m16s
</span></span><span class="line"><span class="cl">kube-system   calico-node-lzcjk                           1/1     Running   <span class="m">0</span>          54s
</span></span><span class="line"><span class="cl">kube-system   calico-node-mrqkd                           1/1     Running   <span class="m">0</span>          2m16s
</span></span><span class="line"><span class="cl">kube-system   calico-node-r45bc                           1/1     Running   <span class="m">0</span>          71s
</span></span><span class="line"><span class="cl">kube-system   coredns-74586cf9b6-gkmbl                    1/1     Running   <span class="m">0</span>          2m37s
</span></span><span class="line"><span class="cl">kube-system   coredns-74586cf9b6-tgh6f                    1/1     Running   <span class="m">0</span>          2m37s
</span></span><span class="line"><span class="cl">kube-system   etcd-kubernetes-master                      1/1     Running   <span class="m">2</span>          2m42s
</span></span><span class="line"><span class="cl">kube-system   kube-apiserver-kubernetes-master            1/1     Running   <span class="m">2</span>          2m43s
</span></span><span class="line"><span class="cl">kube-system   kube-controller-manager-kubernetes-master   1/1     Running   <span class="m">2</span>          2m43s
</span></span><span class="line"><span class="cl">kube-system   kube-proxy-mx4bg                            1/1     Running   <span class="m">0</span>          54s
</span></span><span class="line"><span class="cl">kube-system   kube-proxy-ssw98                            1/1     Running   <span class="m">0</span>          71s
</span></span><span class="line"><span class="cl">kube-system   kube-proxy-tpgfj                            1/1     Running   <span class="m">0</span>          2m38s
</span></span><span class="line"><span class="cl">kube-system   kube-scheduler-kubernetes-master            1/1     Running   <span class="m">2</span>          2m43s
</span></span></code></pre></div><p>从master上查看节点是否已经全部<code>Ready</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># kubectl get nodes</span>
</span></span><span class="line"><span class="cl">NAME                    STATUS   ROLES           AGE     VERSION
</span></span><span class="line"><span class="cl">containerd-kube-work1   Ready    &lt;none&gt;          55s     v1.24.2
</span></span><span class="line"><span class="cl">containerd-kube-work2   Ready    &lt;none&gt;          38s     v1.24.2
</span></span><span class="line"><span class="cl">containerd-kube-master  Ready    control-plane   2m29s   v1.24.2
</span></span></code></pre></div><p>到此为止,1.24的kubernetes已经安装完毕</p>
<h3 id="提一个小问题">提一个小问题</h3>
<p>看一下你们的<code>coredns</code>是否在同一个节点上,如果在同一个节点上,建议重新分配一下coredns保证其高可用性</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># kubectl get pods --all-namespaces -o wide</span>
</span></span><span class="line"><span class="cl">NAMESPACE     NAME                                        READY   STATUS    RESTARTS   AGE   IP            NODE                    NOMINATED NODE   READINESS GATES
</span></span><span class="line"><span class="cl">kube-system   coredns-74586cf9b6-gkmbl                    1/1     Running   <span class="m">0</span>          32m   10.105.56.1   kubernetes-master       &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">kube-system   coredns-74586cf9b6-tgh6f                    1/1     Running   <span class="m">0</span>          32m   10.105.56.3   kubernetes-master       &lt;none&gt;           &lt;none&gt;
</span></span></code></pre></div><p>重新分配<code>coredns</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># kubectl --namespace kube-system rollout restart deployment coredns</span>
</span></span></code></pre></div><h2 id="问题解决">问题解决</h2>
<h3 id="使用crictl-image出现warn0000-image-connect-using-default-endpoints">使用crictl image出现<code>WARN[0000] image connect using default endpoints</code></h3>
<ul>
<li>出现该问题的原因是由于crictl不知道使用那个<code>sock</code>导致的</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master ~<span class="o">]</span><span class="c1"># crictl image</span>
</span></span><span class="line"><span class="cl">WARN<span class="o">[</span>0000<span class="o">]</span> image connect using default endpoints: <span class="o">[</span>unix:///var/run/dockershim.sock unix:///run/containerd/containerd.sock unix:///run/crio/crio.sock unix:///var/run/cri-dockerd.sock<span class="o">]</span>. As the default settings are now deprecated, you should <span class="nb">set</span> the endpoint instead.
</span></span></code></pre></div><blockquote>
<p>解决方法如下</p>
</blockquote>
<ul>
<li>默认情况下<code>containerd</code>的<code>sock</code>存放于<code>/run/containerd/containerd.sock</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># 重新设置一下使用的runtime-endpoint</span>
</span></span><span class="line"><span class="cl"><span class="nx">crictl</span> <span class="nx">config</span> <span class="nx">runtime-endpoint</span> <span class="nx">unix</span><span class="err">:///</span><span class="nx">run</span><span class="err">/</span><span class="nx">containerd</span><span class="err">/</span><span class="nx">containerd</span><span class="p">.</span><span class="nx">sock</span>
</span></span></code></pre></div><p>默认生成的<code>crictl</code>存放在<code>/etc/crictl.yaml</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># vim /etc/crictl.yaml</span>
</span></span></code></pre></div><p>编辑配置文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">runtime-endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;unix:///run/containerd/containerd.sock&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">image-endpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;unix:///run/containerd/containerd.sock&#34;</span><span class="w"> </span><span class="c"># 新版本增加了image-endpoint需要手动更改</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">debug</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">pull-image-on-create</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">disable-pull-on-run</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># systemctl daemon-reload</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master containerd<span class="o">]</span><span class="c1"># crictl image</span>
</span></span><span class="line"><span class="cl">IMAGE               TAG                 IMAGE ID            SIZE
</span></span></code></pre></div><h3 id="master主集群加入token过期如何处理">Master主集群加入token过期如何处理</h3>
<ul>
<li>默认情况下,该token只有24小时,如果token值过期的话需要重新生成</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">--discovery-token-ca-cert-hash sha256:793106d3b4305808d55c3cdb211f89a768bec86ecef64264b131dc8f2548da16
</span></span></code></pre></div><ol>
<li>查看当前master集群的token列表</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master .kube<span class="o">]</span><span class="c1"># kubeadm token list</span>
</span></span><span class="line"><span class="cl">TOKEN                     TTL         EXPIRES                USAGES                   DESCRIPTION                                                EXTRA GROUPS
</span></span><span class="line"><span class="cl">abcdef.0123456789abcdef   8h          2022-09-06T10:10:05Z   authentication,signing   &lt;none&gt;                                                     system:bootstrappers:kubeadm:default-node-token
</span></span></code></pre></div><ol start="2">
<li>重新生成一份token</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master .kube<span class="o">]</span><span class="c1"># kubeadm token create</span>
</span></span></code></pre></div><ol start="3">
<li>通过证书hashtokne</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master .kube<span class="o">]</span><span class="c1"># openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed &#39;s/^.* //&#39;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>利用Kubeadm进行多Master高可用部署</title>
      <link>https://blog.mletter.cn/tech/kubernetes/install-kubernetes-ha/</link>
      <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/install-kubernetes-ha/</guid>
      <description>如何使用kubeadm方案来安装高可用的kubernetes集群</description>
      <content:encoded><![CDATA[<h1 id="利用kubeadm创建高可用集群">利用Kubeadm创建高可用集群</h1>
<ul>
<li>使用具有堆叠的控制平面节点。这种方法所需基础设施较少。etcd 成员和控制平面节点位于同一位置。</li>
<li>使用外部 etcd 集群。这种方法所需基础设施较多。控制平面的节点和 etcd 成员是分开的。
在下一步之前，你应该仔细考虑哪种方法更好地满足你的应用程序和环境的需求。 高可用拓扑选项 讲述了每种方法的优缺点。</li>
<li><a class="link" href="https://blog.mletter.cn/kubernetes/InstallKubernetes1.22.10"  target="_blank" rel="noopener"
    >如何安装Kubectl和Kubeadm</a></li>
<li><a class="link" href="https://blog.mletter.cn/kubernetes/InstallEtcdHA"  target="_blank" rel="noopener"
    >如何安装外部的Etcd集群</a></li>
</ul>
<h2 id="参与主机列表">参与主机列表</h2>
<table>
  <thead>
      <tr>
          <th>IP</th>
          <th>CPU</th>
          <th>内存</th>
          <th style="text-align: left">硬盘</th>
          <th style="text-align: left">角色</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>10.1.6.48</td>
          <td>8</td>
          <td>16</td>
          <td style="text-align: left">100</td>
          <td style="text-align: left">control-plane1</td>
      </tr>
      <tr>
          <td>10.1.6.24</td>
          <td>8</td>
          <td>16</td>
          <td style="text-align: left">100</td>
          <td style="text-align: left">control-plane2</td>
      </tr>
      <tr>
          <td>10.1.6.45</td>
          <td>8</td>
          <td>16</td>
          <td style="text-align: left">100</td>
          <td style="text-align: left">control-plane3</td>
      </tr>
      <tr>
          <td>10.1.6.46</td>
          <td>8</td>
          <td>16</td>
          <td style="text-align: left">100</td>
          <td style="text-align: left">work1</td>
      </tr>
      <tr>
          <td>10.1.6.43</td>
          <td>8</td>
          <td>16</td>
          <td style="text-align: left">100</td>
          <td style="text-align: left">work2</td>
      </tr>
      <tr>
          <td>10.1.6.47</td>
          <td>8</td>
          <td>16</td>
          <td style="text-align: left">100</td>
          <td style="text-align: left">work3</td>
      </tr>
      <tr>
          <td>10.1.6.213</td>
          <td>4</td>
          <td>4</td>
          <td style="text-align: left">20</td>
          <td style="text-align: left">HA+KP1</td>
      </tr>
      <tr>
          <td>10.1.6.214</td>
          <td>4</td>
          <td>4</td>
          <td style="text-align: left">20</td>
          <td style="text-align: left">HA+KP2</td>
      </tr>
      <tr>
          <td>10.1.6.215</td>
          <td></td>
          <td></td>
          <td style="text-align: left"></td>
          <td style="text-align: left">Load_Balancer_IP</td>
      </tr>
      <tr>
          <td>10.1.6.51</td>
          <td>8</td>
          <td>16</td>
          <td style="text-align: left">100</td>
          <td style="text-align: left">Etcd1</td>
      </tr>
      <tr>
          <td>10.1.6.52</td>
          <td>8</td>
          <td>16</td>
          <td style="text-align: left">100</td>
          <td style="text-align: left">Etcd2</td>
      </tr>
      <tr>
          <td>10.1.6.53</td>
          <td>8</td>
          <td>16</td>
          <td style="text-align: left">100</td>
          <td style="text-align: left">Etcd3</td>
      </tr>
  </tbody>
</table>
<h2 id="为kube-apiserver创建负载均衡器">为Kube-apiserver创建负载均衡器</h2>
<p>Keepalived 提供 VRRP 实现，并允许您配置 Linux 机器使负载均衡，预防单点故障。HAProxy 提供可靠、高性能的负载均衡，能与 Keepalived 完美配合。</p>
<p>由于 lb1 和 lb2 上安装了 Keepalived 和 HAproxy，如果其中一个节点故障，虚拟 IP 地址（即浮动 IP 地址）将自动与另一个节点关联，使集群仍然可以正常运行，从而实现高可用。若有需要，也可以此为目的，添加更多安装 Keepalived 和 HAproxy 的节点。</p>
<p>先运行以下命令安装 <code>Keepalived</code> 和 <code>HAproxy</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum install keepalived haproxy psmisc -y
</span></span><span class="line"><span class="cl">dnf install keepalived haproxy psmisc -y
</span></span></code></pre></div><p>在两台用于负载均衡的机器上运行以下命令以配置 Proxy（两台机器的 Proxy 配置相同）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vi /etc/haproxy/haproxy.cfg
</span></span></code></pre></div><pre tabindex="0"><code class="language-conf" data-lang="conf">global
    log /dev/log  local0 warning
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

   stats socket /var/lib/haproxy/stats

defaults
  log global
  option  httplog
  option  dontlognull
        timeout connect 5000
        timeout client 50000
        timeout server 50000

frontend kube-apiserver
  bind *:8443
  mode tcp
  option tcplog
  default_backend kube-apiserver

backend kube-apiserver
    mode tcp
    option tcplog
    option tcp-check
    balance roundrobin
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
    server kube-apiserver-1 10.1.6.48:6443 check # Replace the IP address with your own.
    server kube-apiserver-2 10.1.6.24:6443 check # Replace the IP address with your own.
    server kube-apiserver-3 10.1.6.45:6443 check # Replace the IP address with your own.
</code></pre><p>启动Haproxy</p>
<blockquote>
<p>请确保你的LB2也已经进行如上配置</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl restart haproxy
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> haproxy
</span></span></code></pre></div><p>配置Keepalived
<code>KP1</code>配置如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/keepalived/keepalived.conf
</span></span></code></pre></div><pre tabindex="0"><code class="language-conf" data-lang="conf">global_defs {
  notification_email {
  }
  router_id LVS_DEVEL
  vrrp_skip_check_adv_addr
  vrrp_garp_interval 0
  vrrp_gna_interval 0
}

vrrp_script chk_haproxy {
  script &#34;killall -0 haproxy&#34;
  interval 2
  weight 2
}

vrrp_instance haproxy-vip {
  state BACKUP
  priority 100
  interface ens192                      # 网卡名称
  virtual_router_id 60
  advert_int 1
  authentication {
    auth_type PASS
    auth_pass 1111
  }
  unicast_src_ip 10.1.6.213      # The IP address of this machine
  unicast_peer {
    10.1.6.214                  # The IP address of peer machines
  }

  virtual_ipaddress {
    10.1.6.215/24                  # 虚拟IP地址
  }

  track_script {
    chk_haproxy
  }
}
</code></pre><p><code>KP2</code>配置如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/keepalived/keepalived.conf
</span></span></code></pre></div><pre tabindex="0"><code class="language-conf" data-lang="conf">global_defs {
  notification_email {
  }
  router_id LVS_DEVEL
  vrrp_skip_check_adv_addr
  vrrp_garp_interval 0
  vrrp_gna_interval 0
}

vrrp_script chk_haproxy {
  script &#34;killall -0 haproxy&#34;
  interval 2
  weight 2
}

vrrp_instance haproxy-vip {
  state BACKUP
  priority 90
  interface ens192                      # Network card
  virtual_router_id 60
  advert_int 1
  authentication {
    auth_type PASS
    auth_pass 1111
  }
  unicast_src_ip 10.1.6.214      # The IP address of this machine
  unicast_peer {
    10.1.6.214                         # The IP address of peer machines
  }

  virtual_ipaddress {
    10.1.6.215/24                  # The VIP address
  }

  track_script {
    chk_haproxy
  }
}
</code></pre><p>请确保你的<code>KP1</code>和<code>KP2</code>都完成了如上配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl start keepalived
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> keepalived
</span></span></code></pre></div><h2 id="配置master主机节点的hosts文件">配置Master主机节点的Hosts文件</h2>
<ul>
<li>
<p>所有的Master主机都需要进行配置,防止后续解析不到<code>api.k8s.verbos.com</code></p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">10.1.6.48 containerd-master1
10.1.6.24 containerd-master2
10.1.6.45 containerd-master3
10.1.6.46 containerd-work1
10.1.6.43 containerd-work2
10.1.6.47 containerd-work3
10.1.6.51 etcd1
10.1.6.52 etcd2
10.1.6.53 etcd3
10.1.6.215  api.k8s.verbos.com
</code></pre><h3 id="设置etcd集群证书">设置Etcd集群证书</h3>
<p>如果你使用的是工作在Work节点的Etcd或者其他单独的Etcd集群,请将Etcd的<code>ca</code>证书进行拷贝到Master节点当中.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CONTROL_PLANE</span><span class="o">=</span><span class="s2">&#34;root@10.1.6.48&#34;</span>
</span></span><span class="line"><span class="cl">scp /etc/kubernetes/pki/etcd/ca.crt <span class="s2">&#34;</span><span class="si">${</span><span class="nv">CONTROL_PLANE</span><span class="si">}</span><span class="s2">&#34;</span>:
</span></span><span class="line"><span class="cl">scp /etc/kubernetes/pki/apiserver-etcd-client.crt <span class="s2">&#34;</span><span class="si">${</span><span class="nv">CONTROL_PLANE</span><span class="si">}</span><span class="s2">&#34;</span>:
</span></span><span class="line"><span class="cl">scp /etc/kubernetes/pki/apiserver-etcd-client.key <span class="s2">&#34;</span><span class="si">${</span><span class="nv">CONTROL_PLANE</span><span class="si">}</span><span class="s2">&#34;</span>:
</span></span></code></pre></div><h2 id="设置第一个控制平面节点">设置第一个控制平面节点</h2>
<p>用以下内容创建一个名为 <code>kubeadm-config.yaml</code> 的文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kubeadm.k8s.io/v1beta3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kubernetesVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1.22.10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">controlPlaneEndpoint</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;api.k8s.verbos.com:8443&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiServer</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">certSANs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="m">10.1.6.48</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="m">10.1.6.24</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="m">10.1.6.45</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">etcd</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">external</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">endpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">https://10.1.6.51:2379</span><span class="w"> </span><span class="c"># 适当地更改 ETCD_0_IP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">https://10.1.6.52:2379</span><span class="w"> </span><span class="c"># 适当地更改 ETCD_1_IP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">https://10.1.6.53:2379</span><span class="w"> </span><span class="c"># 适当地更改 ETCD_2_IP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">caFile</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/kubernetes/pki/etcd/ca.crt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">certFile</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/kubernetes/pki/apiserver-etcd-client.crt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">keyFile</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/kubernetes/pki/apiserver-etcd-client.key</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">imageRepository</span><span class="p">:</span><span class="w"> </span><span class="l">registry.aliyuncs.com/google_containers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networking</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">podSubnet</span><span class="p">:</span><span class="w"> </span><span class="m">10.244.0.0</span><span class="l">/16</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">serviceSubnet</span><span class="p">:</span><span class="w"> </span><span class="m">10.10.0.0</span><span class="l">/16</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<p>在节点上运行如下命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubeadm init --config kubeadm-config.yaml --upload-certs --v<span class="o">=</span><span class="m">5</span>
</span></span></code></pre></div><blockquote>
<p>注意：如果你的集群初始化成功你将会看到如下信息.</p>
</blockquote>
<ul>
<li>请保存好<code>kubeadm join</code>的内容,默认2小时后过期,过期后重新生成即可</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Your Kubernetes control-plane has initialized successfully!
</span></span><span class="line"><span class="cl">To start using your cluster, you need to run the following as a regular user:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  mkdir -p <span class="nv">$HOME</span>/.kube
</span></span><span class="line"><span class="cl">  sudo cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
</span></span><span class="line"><span class="cl">  sudo chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Alternatively, <span class="k">if</span> you are the root user, you can run:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">export</span> <span class="nv">KUBECONFIG</span><span class="o">=</span>/etc/kubernetes/admin.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">You should now deploy a pod network to the cluster.
</span></span><span class="line"><span class="cl">Run <span class="s2">&#34;kubectl apply -f [podnetwork].yaml&#34;</span> with one of the options listed at:
</span></span><span class="line"><span class="cl">  https://kubernetes.io/docs/concepts/cluster-administration/addons/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">You can now join any number of the control-plane node running the following <span class="nb">command</span> on each as root:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  kubeadm join api.k8s.verbos.com:8443 --token 9oerz0.fw6s8ft9xa44i077 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        --discovery-token-ca-cert-hash sha256:be3c70562ae6bf8cfcfbbfa3bb8124fe63af3b1a0671e806a4ccf1bc243d5c6b <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        --control-plane --certificate-key cdf0f280f9e59e18e5f60d98b624008d828ba00ef096a2e38fd9b6b1463be152
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
</span></span><span class="line"><span class="cl">As a safeguard, uploaded-certs will be deleted in two hours<span class="p">;</span> If necessary, you can use
</span></span><span class="line"><span class="cl"><span class="s2">&#34;kubeadm init phase upload-certs --upload-certs&#34;</span> to reload certs afterward.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Then you can join any number of worker nodes by running the following on each as root:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubeadm join api.k8s.verbos.com:8443 --token 9oerz0.fw6s8ft9xa44i077 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        --discovery-token-ca-cert-hash sha256:be3c70562ae6bf8cfcfbbfa3bb8124fe63af3b1a0671e806a4ccf1bc243d5c6b 
</span></span></code></pre></div><p><strong>拷贝集群配置文件</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p <span class="nv">$HOME</span>/.kube
</span></span><span class="line"><span class="cl">sudo cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
</span></span><span class="line"><span class="cl">sudo chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config
</span></span></code></pre></div><h2 id="运行网络cni插件calico">运行网络CNI插件(Calico)</h2>
<blockquote>
<p>注意：此时你应当有一个CNI插件来提供网络服务,如果不安装CNI插件,那么集群将会处于<code>不可用</code>状态.</p>
</blockquote>
<p>如果你可以正常访问github</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-kube-master .kube<span class="o">]</span><span class="c1"># curl https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml -O</span>
</span></span></code></pre></div><p>国内用户</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl https://projectcalico.docs.tigera.io/manifests/calico.yaml -O
</span></span></code></pre></div><h3 id="修改calicoyaml配置">修改Calico.yaml配置</h3>
<p>修改CIDR为Kubernetes的子网地址,该地址为<code>serviceSubnet</code>的地址,也就是Pod运行的地址。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">CALICO_IPV4POOL_CIDR</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;10.10.0.0/16&#34;</span><span class="w">
</span></span></span></code></pre></div><p>执行<code>calico.yaml</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -f calico.yaml
</span></span></code></pre></div><h2 id="将其他控制平面节点加入集群">将其他控制平面节点加入集群</h2>
<p>当你已经确保你的<code>containerd-master1</code>完成初始化的时候,你可以将其他的master节点加入到此集群当中.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">  kubeadm join api.k8s.verbos.com:8443 --token 9oerz0.fw6s8ft9xa44i077 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        --discovery-token-ca-cert-hash sha256:be3c70562ae6bf8cfcfbbfa3bb8124fe63af3b1a0671e806a4ccf1bc243d5c6b <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        --control-plane --certificate-key cdf0f280f9e59e18e5f60d98b624008d828ba00ef096a2e38fd9b6b1463be152
</span></span></code></pre></div><p>加入集群成功后,请拷贝集群配置文件否则将影响<code>kubelet</code>的工作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p <span class="nv">$HOME</span>/.kube
</span></span><span class="line"><span class="cl">sudo cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
</span></span><span class="line"><span class="cl">sudo chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config
</span></span></code></pre></div><h2 id="将工作节点加入集群">将工作节点加入集群</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubeadm join api.k8s.verbos.com:8443 --token mck9bg.renw4t689mmx7oe1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        --discovery-token-ca-cert-hash sha256:ed51fca8615acf5f437f63f66a9709e43ef942caf19aea4c595cb905e4a9a00f
</span></span></code></pre></div><h2 id="可选项修改kubelet的数据存储目录">(可选项)修改Kubelet的数据存储目录</h2>
<p>如果你需要修改kubelet的数据存储目录,请按照如下方式进行操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/sysconfig/kubelet
</span></span></code></pre></div><p>设置你的kubelet的数据存储目录(建议单独的为kubelet挂载一块数据盘)</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">KUBELET_EXTRA_ARGS=&#34;--root-dir=/data/k8s/kubelet&#34;
</code></pre><p>重启kubelet</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl daemon-reloa
</span></span><span class="line"><span class="cl">systemctl restart kubelet
</span></span><span class="line"><span class="cl">umount <span class="k">$(</span>df -HT <span class="p">|</span> grep <span class="s1">&#39;/var/lib/kubelet/pods&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $7}&#39;</span><span class="k">)</span>
</span></span></code></pre></div><p>查看新的数据目录是否有kubelet的数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@containerd-master2 kubelet<span class="o">]</span><span class="c1"># ls /data/k8s/kubelet/</span>
</span></span><span class="line"><span class="cl">cpu_manager_state  memory_manager_state  plugins  plugins_registry  pod-resources  pods
</span></span></code></pre></div><h2 id="如何剔除一个master">如何剔除一个Master</h2>
<ul>
<li>先说一个问题,当我们正常如果一个Master要进行某种升级的时候,如何正确的安全的来进行删除该Master。</li>
</ul>
<ol>
<li>首先我们要将该Master设置为不可调度的状态,并且驱逐在其上面的Pod</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 设置Master为不可调度的状态</span>
</span></span><span class="line"><span class="cl">kubectl cordon online-beijing-master1
</span></span><span class="line"><span class="cl"><span class="c1"># 将Master剔除该集群</span>
</span></span><span class="line"><span class="cl">kubectl drain online-beijing-master1 --ignore-daemonsets
</span></span><span class="line"><span class="cl"><span class="c1"># 然后将其节点从集群中删除</span>
</span></span><span class="line"><span class="cl">kubectl delete node online-beijing-master1
</span></span></code></pre></div><blockquote>
<p>这里提一个小问题: 当你使用<code>kubectl drain</code>的时候,如果你当前的Master已经有挂载的<code>emptyDir</code>需要使用<code>--delete-emptydir-data </code>进行删除。
TODO: 删除前请注意备份您的数据。</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Kubernetes低版本中内存泄漏问题</title>
      <link>https://blog.mletter.cn/tech/kubernetes/memory-leakage-analysis/</link>
      <pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/memory-leakage-analysis/</guid>
      <description>绝大多数的kubernetes集群都有这个隐患。只不过一般情况下，泄漏得比较慢，还没有表现出来而已。</description>
      <content:encoded><![CDATA[<h2 id="kubernetes中cgroup泄漏问题">Kubernetes中Cgroup泄漏问题</h2>
<p>Cgorup文档: <a class="link" href="https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt"  target="_blank" rel="noopener"
    >https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt</a></p>
<p>绝大多数的kubernetes集群都有这个隐患。只不过一般情况下，泄漏得比较慢，还没有表现出来而已。</p>
<p>一个pod可能泄漏两个memory cgroup数量配额。即使pod百分之百发生泄漏， 那也需要一个节点销毁过三万多个pod之后，才会造成后续pod创建失败。</p>
<p>一旦表现出来，这个节点就彻底不可用了，必须重启才能恢复。</p>
<h2 id="故障表现">故障表现</h2>
<ul>
<li>该内容的故障信息已经提交给Github: <a class="link" href="https://github.com/kubernetes/kubernetes/issues/112940"  target="_blank" rel="noopener"
    >https://github.com/kubernetes/kubernetes/issues/112940</a></li>
</ul>
<p>我在服务器中更新Pod出现如下错误 <code>cannot allocate memory</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">unable to ensure pod container exists: failed to create container <span class="k">for</span> <span class="o">[</span>kubepods burstable podd5dafc96-2bcd-40db-90fd-c75758746a7a<span class="o">]</span> : mkdir /sys/fs/cgroup/memory/kubepods/burstable/podd5dafc96-2bcd-40db-90fd-c75758746a7a: cannot allocate memory
</span></span></code></pre></div><p>使用<code>dmesg</code>查看系统日志的错误内容信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">SLUB: Unable to allocate memory on node -1
</span></span></code></pre></div><h2 id="服务器配置信息">服务器配置信息</h2>
<ul>
<li>操作系统: <code>CentOS Linux release 7.9.2009 (Core)</code></li>
<li>系统内核: <code>3.10.0-1160.el7.x86_64</code></li>
<li>Kubernetes: <code>1.17.9</code></li>
<li>dockerVersion: <code>20.10.7</code></li>
</ul>
<h2 id="问题原因1">问题原因1</h2>
<p>Kubernetes在1.9版本开启了对kmem的支持,因此 1.9以后的所有版本都有该问题，但必须搭配3.x内核的机器才会出问题。一旦出现会导致新 pod 无法创建，已有 pod不受影响，但pod 漂移到有问题的节点就会失败，直接影响业务稳定性。因为是内存泄露，直接重启机器可以暂时解决，但还会再次出现。
cgroup的kmem account特性在3.x 内核上有内存泄露问题，如果开启了kmem account特性会导致可分配内存越来越少，直到无法创建新 pod 或节点异常。</p>
<ol>
<li>kmem account 是cgroup 的一个扩展，全称CONFIG_MEMCG_KMEM，属于机器默认配置，本身没啥问题，只是该特性在 3.10 的内核上存在漏洞有内存泄露问题，4.x的内核修复了这个问题。</li>
<li>因为 kmem account 是 cgroup 的扩展能力，因此runc、docker、k8s 层面也进行了该功能的支持，即默认都打开了kmem 属性。</li>
<li>因为3.10 的内核已经明确提示 kmem 是实验性质，我们仍然使用该特性，所以这其实不算内核的问题，是 k8s 兼容问题。</li>
</ol>
<h2 id="问题原因2">问题原因2</h2>
<p>memcg是 Linux 内核中用于管理 cgroup 内存的模块，整个生命周期应该是跟随 cgroup 的，但是在低版本内核中<code>(已知3.10)</code>，一旦给某个 memory cgroup 开启 kmem accounting 中的 memory.kmem.limit_in_bytes 就可能会导致不能彻底删除 memcg 和对应的 cssid，也就是说应用即使已经删除了 cgroup (/sys/fs/cgroup/memory 下对应的 cgroup 目录已经删除), 但在内核中没有释放 cssid，导致内核认为的 cgroup 的数量实际数量不一致，我们也无法得知内核认为的 cgroup 数量是多少。
这个问题可能会导致创建容器失败，因为创建容器为其需要创建 cgroup 来做隔离，而低版本内核有个限制：允许创建的 cgroup 最大数量写死为 65535，如果节点上经常创建和销毁大量容器导致创建很多 cgroup，删除容器但没有彻底删除 cgroup 造成泄露(真实数量我们无法得知)，到达 65535 后再创建容器就会报创建 cgroup 失败并报错 no space left on device，使用 kubernetes 最直观的感受就是 pod 创建之后无法启动成功。</p>
<h2 id="解决方案">解决方案</h2>
<p>目前官方给出的解决方案如下:</p>
<ol>
<li>kernel upgrade to 4.0+: <a class="link" href="https://github.com/kubernetes/kubernetes/issues/61937#issuecomment-377585452"  target="_blank" rel="noopener"
    >Update kernel</a></li>
<li>rebuild the kubelet with nokmem args. See <a class="link" href="https://github.com/kubernetes/kubernetes/issues/96701#issuecomment-911061574"  target="_blank" rel="noopener"
    >nokmem</a></li>
<li>Set cgroup.memory=nokmem in grub: see <a class="link" href="https://github.com/kubernetes/kubernetes/issues/61937#issuecomment-567042968"  target="_blank" rel="noopener"
    >grub</a></li>
</ol>
<h3 id="解决方案一">解决方案一</h3>
<ul>
<li>感谢提供的解决方案: <a class="link" href="https://cloud.tencent.com/developer/article/1739289"  target="_blank" rel="noopener"
    >https://cloud.tencent.com/developer/article/1739289</a></li>
<li><a class="link" href="https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672"  target="_blank" rel="noopener"
    >https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672</a></li>
<li><a class="link" href="https://support.mesosphere.com/s/article/Critical-Issue-KMEM-MSPH-2018-0006"  target="_blank" rel="noopener"
    >https://support.mesosphere.com/s/article/Critical-Issue-KMEM-MSPH-2018-0006</a></li>
</ul>
<p>这种方式的缺点是：</p>
<ul>
<li>1、要升级所有节点，节点重启的话已有 pod 肯定要漂移，如果节点规模很大，这个升级操作会很繁琐，业务部门也会有意见，要事先沟通。</li>
<li>2、这个问题归根结底是软件兼容问题，3.x 自己都说了不成熟，不建议你使用该特性，k8s、docker却 还要开启这个属性，那就不是内核的责任，因为我们是云上机器，想替换4.x 内核需要虚机团队做足够的测试和评审，因此这是个长期方案，不能立刻解决问题。</li>
<li>3、已有业务在 3.x 运行正常，不代表可以在 4.x 也运行正常，即全量升级内核之前需要做足够的测试，尤其是有些业务需求对os做过定制。</li>
</ul>
<h3 id="解决方案2">解决方案2</h3>
<p>修改虚机启动的引导项 grub 中的<code>cgroup.memory=nokmem</code>，让机器启动时直接禁用 cgroup的 kmem 属性</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/default/grub
</span></span><span class="line"><span class="cl"><span class="nv">GRUB_TIMEOUT</span><span class="o">=</span><span class="m">5</span>
</span></span><span class="line"><span class="cl"><span class="nv">GRUB_DISTRIBUTOR</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>sed <span class="s1">&#39;s, release .*$,,g&#39;</span> /etc/system-release<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">GRUB_DEFAULT</span><span class="o">=</span>saved
</span></span><span class="line"><span class="cl"><span class="nv">GRUB_DISABLE_SUBMENU</span><span class="o">=</span><span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="nv">GRUB_TERMINAL_OUTPUT</span><span class="o">=</span><span class="s2">&#34;console&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">GRUB_CMDLINE_LINUX</span><span class="o">=</span><span class="s2">&#34;crashkernel=auto spectre_v2=retpoline rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet cgroup.memory=nokmem&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">GRUB_DISABLE_RECOVERY</span><span class="o">=</span><span class="s2">&#34;true&#34;</span>
</span></span></code></pre></div><p>更改完成后你需要生成一下新的cgroup配置.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
</span></span><span class="line"><span class="cl">reboot <span class="c1"># 重启服务器</span>
</span></span></code></pre></div><h3 id="解决方案3">解决方案3</h3>
<p>如果你想在Kubernetes中禁用该属性。issue 中一般建议修改 kubelet代码并重新编译。</p>
<p>对于v1.13及其之前版本的kubelet，需要手动替换以下两个函数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">vendor</span><span class="o">/</span><span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">opencontainers</span><span class="o">/</span><span class="nx">runc</span><span class="o">/</span><span class="nx">libcontainer</span><span class="o">/</span><span class="nx">cgroups</span><span class="o">/</span><span class="nx">fs</span><span class="o">/</span><span class="nx">memory</span><span class="p">.</span><span class="k">go</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">EnableKernelMemoryAccounting</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">setKernelMemory</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">kernelMemoryLimit</span> <span class="kt">int64</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>重新编译并替换 <code>kubelet</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make <span class="nv">WHAT</span><span class="o">=</span>cmd/kubelet <span class="nv">GOFLAGS</span><span class="o">=</span>-v <span class="nv">GOGCFLAGS</span><span class="o">=</span><span class="s2">&#34;-N -l&#34;</span>
</span></span></code></pre></div><p>对于v1.14及其之后版本的kubelet,通过添加BUILDTAGS来禁止 kmem accounting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make <span class="nv">BUILDTAGS</span><span class="o">=</span><span class="s2">&#34;nokmem&#34;</span> <span class="nv">WHAT</span><span class="o">=</span>cmd/kubelet <span class="nv">GOFLAGS</span><span class="o">=</span>-v <span class="nv">GOGCFLAGS</span><span class="o">=</span><span class="s2">&#34;-N -l&#34;</span>
</span></span></code></pre></div><p>遇到1.16 版本的BUILDTAGS=”nokmem“编译出来的 let 还是有问题，还是通过修改代码的方式使其生效</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">vendor</span><span class="o">/</span><span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">opencontainers</span><span class="o">/</span><span class="nx">runc</span><span class="o">/</span><span class="nx">libcontainer</span><span class="o">/</span><span class="nx">cgroups</span><span class="o">/</span><span class="nx">fs</span><span class="o">/</span><span class="nx">kmem</span><span class="p">.</span><span class="k">go</span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">fs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;errors&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">EnableKernelMemoryAccounting</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">setKernelMemory</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">kernelMemoryLimit</span> <span class="kt">int64</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;kernel memory accounting disabled in this runc build&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>编译前，可以编辑下文件 hack/lib/version.sh，将 <code>KUBE_GIT_TREE_STATE=&quot;dirty&quot;</code> 改为 <code>KUBE_GIT_TREE_STATE=&quot;clean&quot;</code>，确保版本号干净。</p>
<h3 id="影响范围">影响范围</h3>
<p>k8s在1.9版本开启了对kmem的支持，因此1.9以后的所有版本都有该问题,但必须搭配 3.x内核的机器才会出问题。一旦出现会导致新pod无法创建,已有 pod不受影响，但pod 漂移到有问题的节点就会失败，直接影响业务稳定性。因为是内存泄露，直接重启机器可以暂时解决，但还会再次出现。</p>
<h2 id="大概得原理理解">大概得原理理解</h2>
<h3 id="keme是什么">keme是什么?</h3>
<p>kmem是Cgroup的一个扩展，全称CONFIG_MEMCG_KMEM，属于机器默认配置。</p>
<p>内核内存与用户内存：</p>
<p>内核内存：专用于Linux内核系统服务使用，是不可swap的，因而这部分内存非常宝贵的。但现实中存在很多针对内核内存资源的攻击，如不断地fork新进程从而耗尽系统资源，即所谓的“fork bomb”。</p>
<p>为了防止这种攻击，社区中提议通过linux内核限制 cgroup中的kmem 容量，从而限制恶意进程的行为，即kernel memory accounting机制。</p>
<p>使用如下命令查看KMEM是否打开：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat /boot/config-<span class="sb">`</span>uname -r<span class="sb">`</span><span class="p">|</span>grep CONFIG_MEMCG
</span></span><span class="line"><span class="cl"><span class="nv">CONFIG_MEMCG</span><span class="o">=</span>y
</span></span><span class="line"><span class="cl"><span class="nv">CONFIG_MEMCG_SWAP</span><span class="o">=</span>y
</span></span><span class="line"><span class="cl"><span class="nv">CONFIG_MEMCG_SWAP_ENABLED</span><span class="o">=</span>y
</span></span><span class="line"><span class="cl"><span class="nv">CONFIG_MEMCG_KMEM</span><span class="o">=</span>y
</span></span></code></pre></div><h3 id="cgroup与kmem机制">cgroup与kmem机制</h3>
<p>使用 cgroup 限制内存时，我们不但需要限制对用户内存的使用，也需要限制对内核内存的使用。kernel memory accounting 机制为 cgroup 的内存限制增加了 stack pages（例如新进程创建）、slab pages(SLAB/SLUB分配器使用的内存)、sockets memory pressure、tcp memory pressure等，以保证 kernel memory 不被滥用。</p>
<p>当你开启了kmem 机制，具体体现在 memory.kmem.limit_in_bytes 这个文件上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/sys/fs/cgroup/memory/kubepods/pod632f736f-5ef2-11ea-ad9e-fa163e35f5d4/memory.kmem.limit_in_bytes
</span></span></code></pre></div><p>实际使用中，我们一般将 memory.kmem.limit_in_bytes 设置成大于 memory.limit_in_bytes，从而只限制应用的总内存使用。</p>
<h3 id="docker与k8s使用kmem">docker与k8s使用kmem</h3>
<p>以上描述都是cgroup层面即机器层面，但是 runc 和 docker 发现有这个属性之后，在后来的版本中也支持了 kmem ，k8s 发现 docker支持，也在 1.9 版本开始支持。</p>
<p>1.9版本及之后，kubelet 才开启 kmem 属性</p>
<p>kubelet 的这部分代码位于：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">https://github.com/kubernetes/kubernetes/blob/release-1.12/vendor/github.com/opencontainers/runc/libcontainer/cgroups/fs/memory.go#L70-L106
</span></span></code></pre></div><p>对于k8s、docker 而言，kmem 属性属于正常迭代和优化，至于3.x的内核上存在 bug 不能兼容，不是k8s 关心的问题。但 issue 中不断有人反馈，因此在 k8s 1.14 版本的 kubelet 中，增加了一个编译选项 make BUILDTAGS=“nokmem”，就可以编译 kubelet 时就禁用 kmem，避免掉这个问题。而1.8 到1.14 中间的版本，只能选择更改 kubelet 的代码。</p>
]]></content:encoded>
    </item>
    <item>
      <title>有关于Kubernetes中影响Pod调度的问题</title>
      <link>https://blog.mletter.cn/tech/kubernetes/pod-scheduling-issues/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/pod-scheduling-issues/</guid>
      <description>此问题引出的是生产环境中所有的资源完全充足,但是会出现更新Pod、删除Pod、新建Pod无法调度的情况。</description>
      <content:encoded><![CDATA[<blockquote>
<p>此问题引出的是生产环境中所有的资源完全充足,但是会出现更新Pod、删除Pod、新建Pod无法调度的情况。</p>
</blockquote>
<h2 id="生产环境解决问题办法">生产环境解决问题办法</h2>
<p>找到问题跟原所在,默认的<code>maxPods: 110</code>,K8S默认一个节点上的pod调度数是110，当前有限制pod数的需求。
<code>vim /var/lib/kubelet/config.yaml</code></p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">maxPods: 110 # 修改为maxPods: 330
</code></pre><h2 id="影响pod调度的情况">影响Pod调度的情况</h2>
<h3 id="requests资源限制">requests资源限制</h3>
<ul>
<li><code>requests</code>：是一种硬限制,Kubernetes在进行Pod请求调度的时候,节点的可用资源必须满足<code>500m</code>的CPU才能进行调度,且使用最大限制为<code>1</code>个CPU,如果该Pod超过请求的最大限制,则Kubernetes将会把该Pod进行Kill重启。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">500m</span><span class="w">
</span></span></span></code></pre></div><p>当你设置request为<code>500m</code>以及limit为<code>1000m</code>的时候,当你使用 <code>kubectl describe node</code>查看节点资源的时候可能会与你设置的请求量不符合,这是以你Pod
的实际使用量为标准的。</p>
<h3 id="节点标签的label">节点标签的Label</h3>
<ul>
<li>标签选择器： <code>kubectl label node kubernetes-node1 env_role=dev</code> 通过此命令对相应的节点加入标签 <code>kubectl label node 节点名称 标签名称</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="nt">nodeSelector</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">env_role</span><span class="p">:</span><span class="w"> </span><span class="l">dev</span><span class="w">
</span></span></span></code></pre></div><p>当然,你也可以通过<code>kubectl get node --show-labels</code>命令查看当前节点的标签</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">NAME      STATUS                     ROLES    AGE    VERSION   LABELS
</span></span><span class="line"><span class="cl">master1   Ready,SchedulingDisabled   master   141d   v1.17.9   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>master1,kubernetes.io/os<span class="o">=</span>linux,node-role.kubernetes.io/master<span class="o">=</span>
</span></span><span class="line"><span class="cl">master2   Ready,SchedulingDisabled   master   139d   v1.17.9   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>master2,kubernetes.io/os<span class="o">=</span>linux,node-role.kubernetes.io/master<span class="o">=</span>
</span></span><span class="line"><span class="cl">master3   Ready,SchedulingDisabled   master   139d   v1.17.9   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>master3,kubernetes.io/os<span class="o">=</span>linux,node-role.kubernetes.io/master<span class="o">=</span>
</span></span><span class="line"><span class="cl">node1     Ready                      worker   141d   v1.17.9   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>node1,kubernetes.io/os<span class="o">=</span>linux,node-role.kubernetes.io/worker<span class="o">=</span>
</span></span><span class="line"><span class="cl">node2     Ready                      worker   141d   v1.17.9   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>node2,kubernetes.io/os<span class="o">=</span>linux,node-role.kubernetes.io/worker<span class="o">=</span>
</span></span><span class="line"><span class="cl">node3     Ready                      worker   141d   v1.17.9   beta.kubernetes.io/arch<span class="o">=</span>amd64,beta.kubernetes.io/os<span class="o">=</span>linux,kubernetes.io/arch<span class="o">=</span>amd64,kubernetes.io/hostname<span class="o">=</span>node3,kubernetes.io/os<span class="o">=</span>linux,node-role.kubernetes.io/worker<span class="o">=</span>
</span></span></code></pre></div><h3 id="节点亲和性">节点亲和性</h3>
<ul>
<li>节点亲和性：<code>nodeAffinity</code>和之前<code>nodeSelector</code>基本上是一样的,有的话满足进行调度,如果没有的话则依旧也可以调度。</li>
<li>硬亲和性：<code>requiredDuringSchedulingIgnoreDuringExecution</code>,当前约束的条件表示为在<code>env_role</code>这个键中有<code>dev</code>/<code>test</code> 有的话即满足的调度,如果不满足则不调度。</li>
<li>软亲和性: <code>preferredDuringSchedulingIgnoredDuringExecution</code>,进行尝试是否满足测试,如果满足则满足调度,如果不满足则依旧会进行调度。</li>
<li>支持的操作符：<code>In</code>/<code>Not In</code>/<code>Gt</code>/<code>Lt</code>/<code>DoesNotExists</code>分别为 存在、不存在、大于、小于、不存在。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">affinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nodeAffinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">requiredDuringSchedulingIgnoreDuringExecution</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">nodeSelectorTerms</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">metchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">env_role</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">preferredDuringSchedulingIgnoredDuringExecution</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">  </span><span class="c"># 表示权重 比例</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">preference</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w"> </span><span class="c"># 操作符 In </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="l">otherprod</span><span class="w">
</span></span></span></code></pre></div><h3 id="污点和污点容忍">污点和污点容忍</h3>
<ul>
<li>污点：<code>nodeSelector</code>和<code>nodeAffinity</code>Pod调度在某些节点上,是属于Pod的属性,在调度的时候进行实现,而污点是对节点做不分配调度,是节点属性。</li>
<li>污点容忍：当一个污点不允许被调度的时候,同时又想让他可能会参与调度,类似于软亲和性。</li>
<li>场景：作为专用节点、配置特定硬件节点、基于Taint驱逐</li>
<li>NoSchedule：一定不被调度</li>
<li>PreferNoSchdule: 尽量不被调度</li>
<li>NoExecute: 不调度,并且会驱逐在该节点上Pod</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 污点容忍</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tolerations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;env_role&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Equal&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;yes&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">effect</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;NoSchedule&#34;</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>使用<code>kubectl describe node kubernetes-master1 | grep Taints</code>进行查看是否为污点。
使用<code>kubectl taint node 节点名称 key=value:污点值</code></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>kubernetes-离线部署Skywallking</title>
      <link>https://blog.mletter.cn/tech/kubernetes/skywallking/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/skywallking/</guid>
      <description>离线状态的环境下如何去部署skywalking</description>
      <content:encoded><![CDATA[<blockquote>
<p>注意：请各位记住把所有离线包全拿到本地…</p>
</blockquote>
<h2 id="在线部署chartmuseum">在线部署chartmuseum</h2>
<p>直接使用最简单的 docker run 方式，使用local 本地存储方式，通过 -v 映射到宿主机 /opt/charts
更多支持安装方式见官网</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir /opt/charts
</span></span><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -p 8080:8080 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">DEBUG</span><span class="o">=</span><span class="m">1</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">STORAGE</span><span class="o">=</span><span class="nb">local</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">STORAGE_LOCAL_ROOTDIR</span><span class="o">=</span>/charts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /opt/charts:/charts <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  chartmuseum/chartmuseum:latest
</span></span></code></pre></div><h2 id="下载skywalking包">下载Skywalking包</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/apache/skywalking-kubernetes.git
</span></span><span class="line"><span class="cl"><span class="c1"># 更换仓库</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> skywalking-kubernetes-master/chart/skywalking/
</span></span><span class="line"><span class="cl">vim Chats.yaml
</span></span><span class="line"><span class="cl">dependencies:
</span></span><span class="line"><span class="cl">  - name: elasticsearch
</span></span><span class="line"><span class="cl">    version: ~7.12.1  <span class="c1"># 官网的版本号为7.5.1 最新的elastic版本为7.12.1</span>
</span></span><span class="line"><span class="cl">    repository: http://localhost:8080 <span class="c1"># 修改为你本地的Repo地址</span>
</span></span><span class="line"><span class="cl">    condition: elasticsearch.enabled
</span></span></code></pre></div><h3 id="添加elasticsearch仓库">添加elasticsearch仓库</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">helm repo add elastic https://helm.elastic.co
</span></span><span class="line"><span class="cl">helm pull elastic/elasticsearch  <span class="c1"># 把elasticsearch内容拉下来</span>
</span></span></code></pre></div><h2 id="上传本地helm">上传本地Helm</h2>
<blockquote>
<p>以防万一请先安装helmpush插件</p>
<p><a class="link" href="https://github.com/chartmuseum/helm-push"  target="_blank" rel="noopener"
    >https://github.com/chartmuseum/helm-push</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">helm repo add chartmuseum http://localhost:8080
</span></span><span class="line"><span class="cl">curl --data-binary <span class="s2">&#34;@elasticsearch-7.12.1.tgz&#34;</span> http://localhost:8080/api/charts
</span></span><span class="line"><span class="cl">helm push /root/skywalking-kubernetes-master/chart/skywalking/ chartmuseum
</span></span><span class="line"><span class="cl">helm repo update <span class="c1"># 更新仓库</span>
</span></span></code></pre></div><p><strong>你可以尝试搜索一下</strong></p>
<blockquote>
<p>保证仓库中存在elasticsarch和skywalking</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@k-master1 ~<span class="o">]</span><span class="c1"># helm search repo</span>
</span></span><span class="line"><span class="cl">NAME                            CHART VERSION   APP VERSION     DESCRIPTION                                       
</span></span><span class="line"><span class="cl">chartmuseum/elasticsearch       7.12.1          7.12.1          Official Elastic helm chart <span class="k">for</span> Elasticsearch     
</span></span><span class="line"><span class="cl">chartmuseum/skywalking          4.0.0                           Apache SkyWalking APM System
</span></span></code></pre></div><h2 id="部署skywalking">部署skywalking</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> skywalking-kubernetes/chart
</span></span><span class="line"><span class="cl">helm dep up skywalking
</span></span><span class="line"><span class="cl"><span class="c1"># change the release name according to your scenario</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">SKYWALKING_RELEASE_NAME</span><span class="o">=</span>skywalking
</span></span><span class="line"><span class="cl"><span class="c1"># change the namespace according to your scenario</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">SKYWALKING_RELEASE_NAMESPACE</span><span class="o">=</span>default
</span></span><span class="line"><span class="cl">helm install <span class="s2">&#34;</span><span class="si">${</span><span class="nv">SKYWALKING_RELEASE_NAME</span><span class="si">}</span><span class="s2">&#34;</span> skywalking -n <span class="s2">&#34;</span><span class="si">${</span><span class="nv">SKYWALKING_RELEASE_NAMESPACE</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --set oap.image.tag<span class="o">=</span>8.1.0-es7 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --set oap.storageType<span class="o">=</span>elasticsearch7 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --set ui.image.tag<span class="o">=</span>8.1.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --set elasticsearch.imageTag<span class="o">=</span>7.5.1
</span></span><span class="line"><span class="cl">helm uninstall skywalking <span class="c1"># 卸载skywalking</span>
</span></span></code></pre></div><h3 id="准备离线镜像">准备离线镜像</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">busybox:1.30
</span></span><span class="line"><span class="cl">docker.elastic.co/elasticsearch/elasticsearch:7.5.1
</span></span><span class="line"><span class="cl">apache/skywalking-oap-server:8.1.0-es7
</span></span><span class="line"><span class="cl">apache/skywalking-ui:8.1.0
</span></span><span class="line"><span class="cl">chartmuseum/chartmuseum:latest
</span></span></code></pre></div><h2 id="helm中的elasticsearch可能会存在问题">Helm中的Elasticsearch可能会存在问题</h2>
<blockquote>
<p>你们也可以用我的这个elasticsearch配置 注意修改PVC</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">StatefulSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch-master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch-master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app.kubernetes.io/managed-by</span><span class="p">:</span><span class="w"> </span><span class="l">Helm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">chart</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">heritage</span><span class="p">:</span><span class="w"> </span><span class="l">Helm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">release</span><span class="p">:</span><span class="w"> </span><span class="l">skywalking</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">esMajorVersion</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;7&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">meta.helm.sh/release-name</span><span class="p">:</span><span class="w"> </span><span class="l">skywalking</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">meta.helm.sh/release-namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch-master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch-master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">creationTimestamp</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch-master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">chart</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">heritage</span><span class="p">:</span><span class="w"> </span><span class="l">Helm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">release</span><span class="p">:</span><span class="w"> </span><span class="l">skywalking</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">initContainers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">configure-sysctl</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;docker.elastic.co/elasticsearch/elasticsearch:7.5.1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">sysctl</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="s1">&#39;-w&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">vm.max_map_count=262144</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">terminationMessagePath</span><span class="p">:</span><span class="w"> </span><span class="l">/dev/termination-log</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">terminationMessagePolicy</span><span class="p">:</span><span class="w"> </span><span class="l">File</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">privileged</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">runAsUser</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;docker.elastic.co/elasticsearch/elasticsearch:7.5.1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">transport</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">9300</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">datadir</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/usr/share/elasticsearch/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">node.name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">cluster.initial_master_nodes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">                elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,</span><span class="w">                
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">discovery.seed_hosts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch-master-headless</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">cluster.name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">network.host</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="m">0.0.0.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ES_JAVA_OPTS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;-Xmx1g -Xms1g&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">node.data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">node.ingest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">node.master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">2Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">100m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">2Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">readinessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="l">sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="s1">&#39;-c&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="p">&gt;</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">                  #!/usr/bin/env bash -e
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">                  # If the node is starting up wait for the cluster to be ready
</span></span></span><span class="line"><span class="cl"><span class="sd">                  (request params: &#39;wait_for_status=green&amp;timeout=1s&#39; )
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">                  # Once it has started only check that the node itself is
</span></span></span><span class="line"><span class="cl"><span class="sd">                  responding
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">                  START_FILE=/tmp/.es_start_file
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">                  http () {
</span></span></span><span class="line"><span class="cl"><span class="sd">                      local path=&#34;${1}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">                      if [ -n &#34;${ELASTIC_USERNAME}&#34; ] &amp;&amp; [ -n &#34;${ELASTIC_PASSWORD}&#34; ]; then
</span></span></span><span class="line"><span class="cl"><span class="sd">                        BASIC_AUTH=&#34;-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">                      else
</span></span></span><span class="line"><span class="cl"><span class="sd">                        BASIC_AUTH=&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="sd">                      fi
</span></span></span><span class="line"><span class="cl"><span class="sd">                      curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200${path}
</span></span></span><span class="line"><span class="cl"><span class="sd">                  }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">                  if [ -f &#34;${START_FILE}&#34; ]; then
</span></span></span><span class="line"><span class="cl"><span class="sd">                      echo &#39;Elasticsearch is already running, lets check the node is healthy and there are master nodes available&#39;
</span></span></span><span class="line"><span class="cl"><span class="sd">                      http &#34;/_cluster/health?timeout=0s&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">                  else
</span></span></span><span class="line"><span class="cl"><span class="sd">                      echo &#39;Waiting for elasticsearch cluster to become cluster to be ready (request params: &#34;wait_for_status=green&amp;timeout=1s&#34; )&#39;
</span></span></span><span class="line"><span class="cl"><span class="sd">                      if http &#34;/_cluster/health?wait_for_status=green&amp;timeout=1s&#34; ; then
</span></span></span><span class="line"><span class="cl"><span class="sd">                          touch ${START_FILE}
</span></span></span><span class="line"><span class="cl"><span class="sd">                          exit 0
</span></span></span><span class="line"><span class="cl"><span class="sd">                      else
</span></span></span><span class="line"><span class="cl"><span class="sd">                          echo &#39;Cluster is not yet ready (request params: &#34;wait_for_status=green&amp;timeout=1s&#34; )&#39;
</span></span></span><span class="line"><span class="cl"><span class="sd">                          exit 1
</span></span></span><span class="line"><span class="cl"><span class="sd">                      fi
</span></span></span><span class="line"><span class="cl"><span class="sd">                  fi</span><span class="w">                  
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">terminationMessagePath</span><span class="p">:</span><span class="w"> </span><span class="l">/dev/termination-log</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">terminationMessagePolicy</span><span class="p">:</span><span class="w"> </span><span class="l">File</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">capabilities</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">drop</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="l">ALL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">runAsUser</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">runAsNonRoot</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">restartPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">terminationGracePeriodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">120</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">dnsPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterFirst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">runAsUser</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">fsGroup</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">affinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">podAntiAffinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">requiredDuringSchedulingIgnoredDuringExecution</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">labelSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                      </span>- <span class="l">elasticsearch-master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">topologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes.io/hostname</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">schedulerName</span><span class="p">:</span><span class="w"> </span><span class="l">default-scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumeClaimTemplates</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">datadir</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">volume.beta.kubernetes.io/storage-class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;managed-nfs-storage-class&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">accessModes</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;ReadWriteMany&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="l">10Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">serviceName</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch-master-headless</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">podManagementPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Parallel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">updateStrategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">RollingUpdate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">revisionHistoryLimit</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>kubernetes-Service解读</title>
      <link>https://blog.mletter.cn/tech/kubernetes/kube-service-read/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/kube-service-read/</guid>
      <description>Service 是一种抽象的对象，它定义了一组 Pod 的逻辑集合和一个用于访问它们的策略，其实这个概念和微服务非常类似。一个 Serivce 下面包含的 Pod 集合是由 Label Selector 来决定的。</description>
      <content:encoded><![CDATA[<h1 id="service的简单理解">Service的简单理解</h1>
<p>Service 是一种抽象的对象，它定义了一组 Pod 的逻辑集合和一个用于访问它们的策略，其实这个概念和微服务非常类似。一个 Serivce 下面包含的 Pod 集合是由 Label Selector 来决定的。</p>
<p>假如我们后端运行了3个副本，这些副本都是可以替代的，因为前端并不关心它们使用的是哪一个后端服务。尽管由于各种原因后端的 Pod 集合会发送变化，但是前端却不需要知道这些变化，也不需要自己用一个列表来记录这些后端的服务，Service 的这种抽象就可以帮我们达到这种解耦的目的。</p>
<h2 id="三种ip">三种IP</h2>
<p>在继续往下学习 Service 之前，我们需要先弄明白 Kubernetes 系统中的三种IP，因为经常有同学混乱。</p>
<ul>
<li>NodeIP：Node 节点的 IP 地址</li>
<li>PodIP: Pod 的 IP 地址</li>
<li>ClusterIP: Service 的 IP 地址</li>
</ul>
<p>首先，NodeIP是Kubernetes集群中节点的物理网卡IP地址(一般为内网)，所有属于这个网络的服务器之间都可以直接通信，所以Kubernetes集群外要想访问Kubernetes集群内部的某个节点或者服务，肯定得通过Node P进行通信（这个时候一般是通过外网 IP 了）</p>
<p>然后PodIP是每个Pod的IP地址，它是网络插件进行分配的，前面我们已经讲解过</p>
<p>最后ClusterIP是一个虚拟的IP，仅仅作用于Kubernetes Service 这个对象，由Kubernetes自己来进行管理和分配地址。</p>
<h2 id="定义servcie">定义Servcie</h2>
<p>定义 Service 的方式和我们前面定义的各种资源对象的方式类型，例如，假定我们有一组 Pod 服务，它们对外暴露了 8080 端口，同时都被打上了 app=beijing-nginx 这样的标签，那么我们就可以像下面这样来定义一个 Service 对象</p>
<pre tabindex="0"><code>apiVersion: v1
kind: Service
metadata:
  name: public-beijing-nginx-service
spec:
  selector:
    app: beijing-nginx
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80 # 可以理解成是service的访问端口
    name: beijing-nginx-http
</code></pre><p>然后通过的使用 <code>kubectl create -f myservice.yaml</code> 就可以创建一个名为 myservice 的 Service 对象，它会将请求代理到使用 TCP 端口为 80，具有标签 <code>app=beijing-nginx-http</code> 的 Pod 上，这个 Service 会被系统分配一个我们上面说的 Cluster IP，该 Service 还会持续的监听 selector 下面的 Pod，会把这些 Pod 信息更新到一个名为 myservice 的Endpoints 对象上去，这个对象就类似于我们上面说的 Pod 集合了。</p>
<p>需要注意的是，Service 能够将一个接收端口映射到任意的 targetPort。默认情况下，targetPort 将被设置为与 port 字段相同的值。可能更有趣的是，targetPort 可以是一个字符串，引用了 backend Pod 的一个端口的名称。因实际指派给该端口名称的端口号，在每个 backend Pod 中可能并不相同，所以对于部署和设计 Service，这种方式会提供更大的灵活性。</p>
<p>另外 Service 能够支持 TCP 和 UDP 协议，默认是 TCP 协议。</p>
<h2 id="kube-proxy">kube-proxy</h2>
<p>前面我们讲到过，在 Kubernetes 集群中，每个 Node 会运行一个 kube-proxy 进程, 负责为 Service 实现一种 VIP（虚拟 IP，就是我们上面说的 clusterIP）的代理形式，现在的 Kubernetes 中默认是使用的 iptables 这种模式来代理。</p>
<h3 id="iptables">iptables</h3>
<p>这种模式，kube-proxy 会 watch apiserver 对 Service 对象和 Endpoints 对象的添加和移除。对每个 Service，它会添加上 iptables 规则，从而捕获到达该 Service 的 clusterIP（虚拟 IP）和端口的请求，进而将请求重定向到 Service 的一组 backend 中的某一个 Pod 上面。我们还可以使用 <code>Pod readiness 探针</code> 验证后端 Pod 可以正常工作，以便 iptables 模式下的 kube-proxy 仅看到测试正常的后端，这样做意味着可以避免将流量通过 <code>kube-proxy</code> 发送到已知失败的 Pod 中，所以对于线上的应用来说一定要做 readiness 探针。</p>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="img" loading="lazy" src="https://d33wubrfki0l68.cloudfront.net/86c9416a1c3e7cef4b941c250c1ec49eef19bb9a/069f9/images/docs/services-iptables-overview.svg"></p>
<p>ptables 模式的 kube-proxy 默认的策略是，随机选择一个后端 Pod。</p>
<p>比如当创建 backend Service 时，Kubernetes 会给它指派一个虚拟 IP 地址，比如 10.0.0.1。假设 Service 的端口是 1234，该 Service 会被集群中所有的 kube-proxy 实例观察到。当 kube-proxy 看到一个新的 Service，它会安装一系列的 iptables 规则，从 VIP 重定向到 <code>per-Service</code> 规则。 该 <code>per-Service</code> 规则连接到 <code>per-Endpoint</code> 规则，该 <code>per-Endpoint</code> 规则会重定向（目标 <code>NAT</code>）到后端的 Pod。</p>
<h4 id="优化iptables模式性能">优化iptables模式性能</h4>
<p>在大型集群（有数万个 Pod 和 Service）中，当 Service（或其 EndpointSlices）发生变化时 iptables 模式的 kube-proxy 在更新内核中的规则时可能要用较长时间。 你可以通过修改<code>kube-proxy</code>的<code>ConfigMap</code>中的选项来调整 kube-proxy 的同步行为：</p>
<pre tabindex="0"><code>iptables:
  minSyncPeriod: 1s
  syncPeriod: 30s
</code></pre><ul>
<li>minSyncPeriod: 参数设置尝试同步 iptables 规则与内核之间的最短时长。如果是 <code>0s</code>，那么每次有任一 Service 或 Endpoint 发生变更时，kube-proxy 都会立即同步这些规则。 这种方式在较小的集群中可以工作得很好，但如果在很短的时间内很多东西发生变更时，它会导致大量冗余工作。 例如，如果你有一个由 Deployment 支持的 Service，共有 100 个 Pod，你删除了这个 Deployment， 且设置了 <code>minSyncPeriod: 0s</code>，kube-proxy 最终会从 iptables 规则中逐个删除 Service 的 Endpoint， 总共更新 100 次。使用较大的 <code>minSyncPeriod</code> 值时，多个 Pod 删除事件将被聚合在一起， 因此 kube-proxy 最终可能会进行例如 5 次更新，每次移除 20 个端点， 这样在 CPU 利用率方面更有效率，能够更快地同步所有变更。</li>
</ul>
<blockquote>
<p>默认值 <code>1s</code> 对于中小型集群是一个很好的折衷方案。 在大型集群中，可能需要将其设置为更大的值。 （特别是，如果 kube-proxy 的 <code>sync_proxy_rules_duration_seconds</code> 指标表明平均时间远大于 1 秒， 那么提高 <code>minSyncPeriod</code> 可能会使更新更有效率。）</p>
</blockquote>
<ul>
<li><code>syncPeriod</code>: 参数控制与单次 Service 和 Endpoint 的变更没有直接关系的少数同步操作。 特别是，它控制 kube-proxy 在外部组件已干涉 kube-proxy 的 iptables 规则时通知的速度。 在大型集群中，kube-proxy 也仅在每隔 <code>syncPeriod</code> 时长执行某些清理操作，以避免不必要的工作。</li>
</ul>
<h3 id="ipvs">IPVS</h3>
<p>在 <code>ipvs</code> 模式下，kube-proxy 监视 Kubernetes Service 和 EndpointSlice， 然后调用 <code>netlink</code> 接口创建 IPVS 规则， 并定期与 Kubernetes Service 和 EndpointSlice 同步 IPVS 规则。 该控制回路确保 IPVS 状态与期望的状态保持一致。 访问 Service 时，IPVS 会将流量导向到某一个后端 Pod。</p>
<p>IPVS 代理模式基于 netfilter 回调函数，类似于 iptables 模式， 但它使用哈希表作为底层数据结构，在内核空间中生效。 这意味着 IPVS 模式下的 kube-proxy 比 iptables 模式下的 kube-proxy 重定向流量的延迟更低，同步代理规则时性能也更好。 与其他代理模式相比，IPVS 模式还支持更高的网络流量吞吐量。</p>
<p>IPVS 提供了更多选项来平衡后端 Pod 的流量，默认是 <code>rr</code>，有如下一些策略：</p>
<ul>
<li>rr: 轮询</li>
<li>lc: 最少连接（打开连接数最少）</li>
<li>dh: 目标地址哈希</li>
<li>sh: 源地址哈希</li>
<li>sed: 最短预期延迟</li>
<li>nq:最少队列</li>
</ul>
<p><img style="max-width: 100%; height: auto;" loading="lazy" alt="img" loading="lazy" src="https://d33wubrfki0l68.cloudfront.net/5cf236cbe0fecd3dfa46f6c648fc732c3ff06bf5/33f79/images/docs/services-ipvs-overview.svg"></p>
<p>不过现在只能整体修改策略，可以通过 kube-proxy 中配置 <code>–ipvs-scheduler</code> 参数来实现，暂时不支持特定的 Service 进行配置。</p>
<p>开启<code>ipvs</code>模块</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">modprobe -- ip_vs
</span></span><span class="line"><span class="cl">modprobe -- ip_vs_rr
</span></span><span class="line"><span class="cl">modprobe -- ip_vs_wrr
</span></span><span class="line"><span class="cl">modprobe -- ip_vs_sh
</span></span><span class="line"><span class="cl">modprobe -- nf_conntrack_ipv4
</span></span><span class="line"><span class="cl">yum install ipvsadm ipset -y
</span></span></code></pre></div><p>修改<code>kube-proxy</code>的<code>configMap</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl edit configmap kube-proxy -n kube-system
</span></span><span class="line"><span class="cl"><span class="c1"># 修改mode为&#34;ipvs&#34;</span>
</span></span><span class="line"><span class="cl">   minSyncPeriod: 0s
</span></span><span class="line"><span class="cl">      scheduler: <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">      syncPeriod: 30s
</span></span><span class="line"><span class="cl">    kind: KubeProxyConfiguration
</span></span><span class="line"><span class="cl">    metricsBindAddress: 127.0.0.1:10249
</span></span><span class="line"><span class="cl">    mode: <span class="s2">&#34;ipvs&#34;</span>                          <span class="c1"># 修改此处</span>
</span></span><span class="line"><span class="cl">    nodePortAddresses: null
</span></span></code></pre></div><blockquote>
<p>修改完成后记得重启<code>kube-proxy</code>，然后使用<code>ipvsadm -ln</code>校验。正常可以出现很多的规则链条。</p>
</blockquote>
<h4 id="会话亲和性">会话亲和性</h4>
<p>在这些代理模型中，绑定到 <code>Service IP:Port</code> 的流量被代理到合适的后端， 客户端不需要知道任何关于 Kubernetes、Service 或 Pod 的信息。</p>
<p>如果要确保来自特定客户端的连接每次都传递给同一个 Pod， 你可以通过设置 Service 的 <code>.spec.sessionAffinity</code> 为 <code>ClientIP</code> 来设置基于客户端 IP 地址的会话亲和性（默认为 <code>None</code>）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sessionAffinity</span><span class="p">:</span><span class="w"> </span><span class="l">ClientIP</span><span class="w">
</span></span></span></code></pre></div><h3 id="会话超时">会话超时</h3>
<p>你还可以通过设置 Service 的 <code>.spec.sessionAffinityConfig.clientIP.timeoutSeconds</code> 来设置最大会话粘性时间（默认值为 10800，即 3 小时）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sessionAffinityConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">clientIP</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">imeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">10800</span><span class="w">
</span></span></span></code></pre></div><h2 id="service">Service</h2>
<p>将运行在一组 <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/"  target="_blank" rel="noopener"
    >Pods</a> 上的应用程序公开为网络服务的抽象方法。</p>
<p>使用 Kubernetes，你无需修改应用程序去使用不熟悉的服务发现机制。 Kubernetes 为 Pod 提供自己的 IP 地址，并为一组 Pod 提供相同的 DNS 名， 并且可以在它们之间进行负载均衡。</p>
<p>Kubernetes <code>ServiceTypes</code> 允许指定你所需要的 Service 类型。</p>
<ul>
<li><code>ClusterIP</code>：通过集群的内部 IP 暴露服务，选择该值时服务只能够在集群内部访问。 这也是你没有为服务显式指定 <code>type</code> 时使用的默认值。 你可以使用 <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/"  target="_blank" rel="noopener"
    >Ingress</a> 或者 <a class="link" href="https://gateway-api.sigs.k8s.io/"  target="_blank" rel="noopener"
    >Gateway API</a> 向公众暴露服务。</li>
<li>NodePort： 通过每个节点上的 IP 和静态端口（<code>NodePort</code>）暴露服务。 为了让节点端口可用，Kubernetes 设置了集群 IP 地址，这等同于你请求 <code>type: ClusterIP</code> 的服务。</li>
<li>LoadBalancer：使用云提供商的负载均衡器向外部暴露服务。 外部负载均衡器可以将流量路由到自动创建的 <code>NodePort</code> 服务和 <code>ClusterIP</code> 服务上。</li>
<li>ExternalName：通过返回 <code>CNAME</code> 记录和对应值，可以将服务映射到 <code>externalName</code> 字段的内容（例如，<code>foo.bar.example.com</code>）。 无需创建任何类型代理。</li>
</ul>
<h3 id="nodeport">NodePort</h3>
<p>如果你将 <code>type</code> 字段设置为 <code>NodePort</code>，则 Kubernetes 控制平面将在 <code>--service-node-port-range</code> 标志指定的范围内分配端口（默认值：30000-32767）。 每个节点将那个端口（每个节点上的相同端口号）代理到你的服务中。 你的服务在其 <code>.spec.ports[*].nodePort</code> 字段中报告已分配的端口。</p>
<p>使用 NodePort 可以让你自由设置自己的负载均衡解决方案， 配置 Kubernetes 不完全支持的环境， 甚至直接暴露一个或多个节点的 IP 地址。</p>
<p>对于 NodePort 服务，Kubernetes 额外分配一个端口（TCP、UDP 或 SCTP 以匹配服务的协议）。 集群中的每个节点都将自己配置为监听分配的端口并将流量转发到与该服务关联的某个就绪端点。 通过使用适当的协议（例如 TCP）和适当的端口（分配给该服务）连接到所有节点， 你将能够从集群外部使用 <code>type: NodePort</code> 服务。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">NodePort</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">MyApp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 默认情况下，为了方便起见，`targetPort` 被设置为与 `port` 字段相同的值。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 可选字段</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 默认情况下，为了方便起见，Kubernetes 控制平面会从某个范围内分配一个端口号（默认：30000-32767）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nodePort</span><span class="p">:</span><span class="w"> </span><span class="m">30007</span><span class="w">
</span></span></span></code></pre></div><h3 id="loadbalancer">LoadBalancer</h3>
<p>在使用支持外部负载均衡器的云提供商的服务时，设置 <code>type</code> 的值为 <code>&quot;LoadBalancer&quot;</code>， 将为 Service 提供负载均衡器。 负载均衡器是异步创建的，关于被提供的负载均衡器的信息将会通过 Service 的 <code>status.loadBalancer</code> 字段发布出去。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app.kubernetes.io/name</span><span class="p">:</span><span class="w"> </span><span class="l">MyApp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">9376</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clusterIP</span><span class="p">:</span><span class="w"> </span><span class="m">10.0.171.239</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">LoadBalancer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">loadBalancer</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">ip</span><span class="p">:</span><span class="w"> </span><span class="m">192.0.2.127</span><span class="w">
</span></span></span></code></pre></div><p>自外部负载均衡器的流量将直接重定向到后端 Pod 上，不过实际它们是如何工作的，这要依赖于云提供商。</p>
<p>某些云提供商允许设置 <code>loadBalancerIP</code>。 在这些情况下，将根据用户设置的 <code>loadBalancerIP</code> 来创建负载均衡器。 如果没有设置 <code>loadBalancerIP</code> 字段，将会给负载均衡器指派一个临时 IP。 如果设置了 <code>loadBalancerIP</code>，但云提供商并不支持这种特性，那么设置的 <code>loadBalancerIP</code> 值将会被忽略掉。</p>
<p>要实现 <code>type: LoadBalancer</code> 的服务，Kubernetes 通常首先进行与请求 <code>type: NodePort</code> 服务等效的更改。 cloud-controller-manager 组件然后配置外部负载均衡器以将流量转发到已分配的节点端口。</p>
<h3 id="externalname">ExternalName</h3>
<p>类型为 ExternalName 的服务将服务映射到 DNS 名称，而不是典型的选择算符，例如 <code>my-service</code> 或者 <code>cassandra</code>。 你可以使用 <code>spec.externalName</code> 参数指定这些服务。</p>
<p>例如，以下 Service 定义将 <code>prod</code> 名称空间中的 <code>my-service</code> 服务映射到 <code>my.database.example.com</code></p>
<pre tabindex="0"><code>apiVersion: v1
kind: Service
metadata:
  name: my-service
  namespace: prod
spec:
  type: ExternalName
  externalName: my.database.example.com
</code></pre><h3 id="自定义service">自定义Service</h3>
<p>假设我们的etcd集群在外部，我们想要通过<code>Service</code>进行访问，我们可以进行自定义的<code>Service</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ClusterIP</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">etcd-port</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">2379</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Endpoints</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">custom-etcd-svc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subsets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">address</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">ip</span><span class="p">:</span><span class="w"> </span><span class="m">10.151.30.11</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">etcd-port</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">2379</span><span class="w">
</span></span></span></code></pre></div><h2 id="获取客户端ip">获取客户端IP</h2>
<p>通常，当集群内的客户端连接到服务的时候，是支持服务的 Pod 可以获取到客户端的 IP 地址的，但是，当通过节点端口接收到连接时，由于对数据包执行了源网络地址转换（SNAT），因此数据包的源 IP 地址会发生变化，后端的 Pod 无法看到实际的客户端 IP，对于某些应用来说是个问题，比如，nginx 的请求日志就无法获取准确的客户端访问 IP 了。</p>
<p>假设我们现在有一组<code>nginx</code>集群服务，当我从<code>10.1.6.48</code>进行访问的时候我们可以看一下最终呈现给我们的地址</p>
<pre tabindex="0"><code class="language-log" data-lang="log">10.10.207.192 - - [23/Feb/2023:06:09:24 +0000] &#34;GET / HTTP/1.1&#34; 200 615 &#34;-&#34; &#34;curl/7.61.1&#34; &#34;-&#34;
10.10.207.192 - - [23/Feb/2023:06:10:50 +0000] &#34;GET / HTTP/1.1&#34; 200 615 &#34;-&#34; &#34;curl/7.61.1&#34; &#34;-&#34;
10.10.207.192 - - [23/Feb/2023:06:10:52 +0000] &#34;GET / HTTP/1.1&#34; 200 615 &#34;-&#34; &#34;curl/7.61.1&#34; &#34;-&#34;
10.10.207.192 - - [23/Feb/2023:06:10:53 +0000] &#34;GET / HTTP/1.1&#34; 200 615 &#34;-&#34; &#34;curl/7.61.1&#34; &#34;-&#34;
</code></pre><p>正常来说我得到的应该是客户端的真实IP地址，而我现在得到的却是<code>tunl0@NONE</code>的IP地址</p>
<p>这个时候我们可以在 Service 设置 <code>externalTrafficPolicy</code> 来减少网络跳数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">public-beijing-nginx-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">externalTrafficPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">beijing-nginx-http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">beijing-nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sessionAffinity</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ipFamilies</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">IPv4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ipFamilyPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">SingleStack</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">internalTrafficPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Cluster</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">loadBalancer</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></div><p>但这可能导致流量分配不均。 没有针对特定 LoadBalancer 服务的任何 Pod 的节点将无法通过自动分配的 <code>.spec.healthCheckNodePort</code> 进行 NLB 目标组的运行状况检查，并且不会收到任何流量。</p>
]]></content:encoded>
    </item>
    <item>
      <title>基于kubernetes部署nacos集群</title>
      <link>https://blog.mletter.cn/tech/kubernetes/install-nacos-cluster/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/install-nacos-cluster/</guid>
      <description>kubernetes持久化部署nacos集群演示</description>
      <content:encoded><![CDATA[<h2 id="简单安装使用">简单安装使用</h2>
<blockquote>
<p>最新版本应该是1.4.1</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/nacos-group/nacos-k8s.git
</span></span></code></pre></div><ul>
<li>简单使用</li>
<li>如果你使用简单方式快速启动,请注意这是没有使用持久化卷的,可能存在数据丢失风险:!!!</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> nacos-k8s
</span></span><span class="line"><span class="cl">chmod +x quick-startup.sh
</span></span><span class="line"><span class="cl">./quick-startup.sh
</span></span></code></pre></div><ul>
<li>演示使用</li>
<li><strong>服务注册</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X PUT <span class="s1">&#39;http://cluster-ip:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&amp;ip=20.18.7.10&amp;port=8080&#39;</span>
</span></span></code></pre></div><ul>
<li><strong>服务发现</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X GET <span class="s1">&#39;http://cluster-ip:8848/nacos/v1/ns/instance/list?serviceName=nacos.naming.serviceName&#39;</span>
</span></span></code></pre></div><ul>
<li><strong>发布配置</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST <span class="s2">&#34;http://cluster-ip:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&amp;content=helloWorld&#34;</span>
</span></span></code></pre></div><ul>
<li><strong>获取配置</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X GET <span class="s2">&#34;http://cluster-ip:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&#34;</span>
</span></span></code></pre></div><h2 id="高级用法">高级用法</h2>
<blockquote>
<p>在高级使用中,Nacos在K8S拥有自动扩容缩容和数据持久特性,请注意如果需要使用这部分功能请使用PVC持久卷,Nacos的自动扩容缩容需要依赖持久卷,以及数据持久化也是一样,本例中使用的是NFS来使用PVC.</p>
</blockquote>
<h3 id="部署nfs">部署NFS</h3>
<p>nfs-client-provisioner 可动态为kubernetes提供pv卷，是Kubernetes的简易NFS的外部provisioner，本身不提供NFS，需要现有的NFS服务器提供存储。持久卷目录的命名规则为: <code>${namespace}-${pvcName}-${pvName}</code></p>
<p><strong>创建角色</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create -f deploy/nfs/rbac.yaml
</span></span></code></pre></div><p><strong>修改NFS的yaml</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">vim nacos-k8s/deploy/nfs/deployment.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nfs-client-provisioner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nfs-client-provisioner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Recreate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nfs-client-provisioner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nfs-client-provisioner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceAccount</span><span class="p">:</span><span class="w"> </span><span class="l">nfs-client-provisioner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nfs-client-provisioner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">quay.io/external_storage/nfs-client-provisioner:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nfs-client-root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/persistentvolumes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">PROVISIONER_NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">fuseim.pri/ifs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">NFS_SERVER</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="m">10.1.6.93</span><span class="w"> </span><span class="c"># 修改NFS的IP为你本地的NFSIP地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">NFS_PATH</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">/server/nacos</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nfs-client-root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">nfs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="m">10.1.6.93</span><span class="w"> </span><span class="c"># 同上</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/server/nacos</span><span class="w">
</span></span></span></code></pre></div><p><strong>部署NFS-client</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create -f deploy/nfs/deployment.yaml
</span></span></code></pre></div><p><strong>部署NFS StorageClass</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create -f deploy/nfs/class.yaml
</span></span></code></pre></div><p><strong>验证nfs-client-provisioner是否成功</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl get pod -l <span class="nv">app</span><span class="o">=</span>nfs-client-provisioner
</span></span></code></pre></div><h3 id="部署mysql">部署mysql</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create -f deploy/mysql/mysql-nfs.yaml
</span></span></code></pre></div><h3 id="部署nacos">部署Nacos</h3>
<ul>
<li>修改 <strong>deploy/nacos/nacos-pvc-nfs.yaml</strong></li>
</ul>
<blockquote>
<p>可以自行选择更改</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mysql.master.db.name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;主库名称&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mysql.master.port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;主库端口&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mysql.slave.port</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;从库端口&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mysql.master.user</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;主库用户名&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mysql.master.password</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;主库密码&#34;</span><span class="w">
</span></span></span></code></pre></div><ul>
<li><strong>创建Nacos</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl create -f nacos-k8s/deploy/nacos/nacos-pvc-nfs.yaml
</span></span></code></pre></div><h3 id="扩容测试">扩容测试</h3>
<ul>
<li>在扩容前，使用 <a class="link" href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands/#exec"  target="_blank" rel="noopener"
    ><code>kubectl exec</code></a>获取在pod中的Nacos集群配置文件信息</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">for</span> i in <span class="m">0</span> 1<span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> nacos-<span class="nv">$i</span><span class="p">;</span> kubectl <span class="nb">exec</span> nacos-<span class="nv">$i</span> cat conf/cluster.conf<span class="p">;</span> <span class="k">done</span>
</span></span></code></pre></div><p>StatefulSet控制器根据其序数索引为每个Pod提供唯一的主机名。 主机名采用 - 的形式。 因为nacos StatefulSet的副本字段设置为3，所以当前集群文件中只有三个Nacos节点地址</p>
<ul>
<li>使用kubectl scale 对Nacos动态扩容</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl scale sts nacos --replicas<span class="o">=</span><span class="m">5</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>kubernetes-Scheduler简单详解</title>
      <link>https://blog.mletter.cn/tech/kubernetes/kube-schdeduler/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/kubernetes/kube-schdeduler/</guid>
      <description>kube-scheduler 是 kubernetes 的核心组件之一</description>
      <content:encoded><![CDATA[<p><code>kube-scheduler</code> 是 kubernetes 的核心组件之一，主要负责整个集群资源的调度功能，根据特定的调度算法和策略，将 Pod 调度到最优的工作节点上面去，从而更加合理、更加充分的利用集群的资源，这也是我们选择使用 kubernetes 一个非常重要的理由。如果一门新的技术不能帮助企业节约成本、提供效率，我相信是很难推进的。</p>
<h2 id="调度流程">调度流程</h2>
<p><code>kube-scheduler</code> 提供的默认调度器能够满足我们绝大多数的要求，我们前面和大家接触的示例也基本上用的默认的策略，都可以保证我们的 Pod 可以被分配到资源充足的节点上运行。但是在实际的线上项目中，可能我们自己会比 kubernetes 更加了解我们自己的应用，比如我们希望一个 Pod 只能运行在特定的几个节点上，或者这几个节点只能用来运行特定类型的应用，这就需要我们的调度器能够可控。</p>
<ol>
<li>发起创建<code>Deployment</code>请求-&gt;<code>API Server</code>,这个时候<code>APIServer</code>会进行一系列的逻辑处理,例如: 鉴权、查看你是否有权限操作、Deployment创建是否合法等等,然后将请求存储到etcd当中并且转发给<code>Controller Manager</code></li>
<li><code>Controller Manager</code>会监听<code>API Server</code>,这个时候假设监听到的是一个创建<code>Deployment</code>的请求,则会把请求转发到<code>Deployment Controller</code></li>
<li><code>Deployment Controller</code>接受到请求后创建<code>ReplicaSet</code>,然后<code>ReplicaSet Controller</code>会根据<code>yaml</code>当中定义的<code>template</code>模板来进行创建Pod,然后返回给<code>API Server</code></li>
<li>在创建之初的Pod属性中<code>nodeName</code>为空,也就是没有被调度过的,这个时候调度器就会对它进行调度,调度去watchPod对象,然后分析那个节点最适合这个Pod,然后将节点的名字通过类似于bind的这种方法写入到<code>nodeName</code>当中。</li>
<li>然后该节点的kubelet会进行一系列的判断,然后进入Create Pod的流程,然后进行一系列的<code>CNI</code>和<code>CSI</code>的过程。</li>
</ol>
<blockquote>
<p>这也就是我们常说的往往越简单的东西,背后实现的越复杂。</p>
</blockquote>
<h3 id="调度阶段">调度阶段</h3>
<p><code>kube-scheduler</code>调度分为两个阶段</p>
<ol>
<li><code>predicate</code>: 过滤阶段，过滤不符合条件的节点。</li>
<li><code>priority</code>: 优先级排序，选择优先级最高的节点，也就是给节点打分。</li>
</ol>
<h3 id="predicates策略">Predicates策略</h3>
<ol>
<li><code>PodFitsHostPorts</code>: 检查是否有Host Ports冲突</li>
<li><code>PodFitsPorts</code>: 同上</li>
<li><code>PodFitsResources</code>: 检查Node的资源是否充足，包括允许的Pod数量、CPU、内存、GPU个数以及其他的OpaqueIntResources。</li>
<li><code>HostName</code>:检查<code>pod.Spec.NodeName</code>是否与候选节点一致</li>
<li><code>MatchNodeSelector</code>:检查候选节点的<code>pod.Spec.NodeSelector</code>是否匹配</li>
<li><code>NoVolumeZoneConflict</code>:检查<code>volume zone</code>是否冲突</li>
</ol>
<h3 id="priority策略">Priority策略</h3>
<ol>
<li><code>SelectorSpreadPriority</code>: 优先减少节点上属于同一个<code>Service</code>或<code>Replication Controller</code>的Pod数量。</li>
<li><code>InterPodAffinityPriority</code>: 优先将Pod调度到相同的拓扑上</li>
<li><code>LeastRequestedPriority</code>:优先调度到请求资源少的节点上</li>
<li><code>BalancedResourceAllocation</code>: 优先平衡各节点的资源使用</li>
<li><code>NodePreferAvoidPodsPriority</code>:权重判断</li>
</ol>
<blockquote>
<p>太多了可以自己去官网了解一下，这些策略都可以通过<code>scheduler</code>配置文件去配置，其实一般来说我们不太需要，我觉得kubernetes的调度是最让我们省心的。</p>
</blockquote>
<h2 id="资源需求">资源需求</h2>
<ul>
<li><code>requests</code>:属于调度器调度的时候所参考的指标，也就是说我这个应用最少需要<code>250m</code>的cpu和<code>256m</code>的内存才能运行。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">qa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">qa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">creationTimestamp</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">qa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">host-time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hostPath</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/localtime</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http-web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">2Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">250m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">256Mi</span><span class="w">
</span></span></span></code></pre></div><p>可以查看你节点的一些资源状态</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="p">[</span><span class="l">root@master1 ~]# kubectl get nodes -o yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">allocatable</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">15600m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ephemeral-storage</span><span class="p">:</span><span class="w"> </span><span class="l">104278276Ki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hugepages-1Gi</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hugepages-2Mi</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;38390677064&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pods</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;330&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">capacity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;16&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ephemeral-storage</span><span class="p">:</span><span class="w"> </span><span class="l">104278276Ki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hugepages-1Gi</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hugepages-2Mi</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">40003048Ki</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pods</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;330&#34;</span><span class="w">
</span></span></span></code></pre></div><p>可以看看这个<code>deployment</code>运行以后我们的<code>cgroup</code>对他做了如何的限制</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">&#34;CgroupParent&#34;: </span><span class="s2">&#34;/kubepods/burstable/pod1ceee26d-2ec2-43a8-96ef-5aa9ac99779b&#34;</span><span class="w">
</span></span></span></code></pre></div><p>进入这个目录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@node1 ~<span class="o">]</span><span class="c1"># cd /sys/fs/cgroup/cpu/kubepods/burstable/pod1ceee26d-2ec2-43a8-96ef-5aa9ac99779b</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>root@node1 pod1ceee26d-2ec2-43a8-96ef-5aa9ac99779b<span class="o">]</span><span class="c1"># cat cpu.shares </span>
</span></span><span class="line"><span class="cl"><span class="m">358</span>
</span></span></code></pre></div><blockquote>
<p>kubernetes对于不同的QOS的处理方式是不一样的。</p>
</blockquote>
<h3 id="limit-range">Limit-range</h3>
<p>一个 <strong>LimitRange（限制范围）</strong> 对象提供的限制能够做到：</p>
<ul>
<li>在一个命名空间中实施对每个 Pod 或 Container 最小和最大的资源使用量的限制。</li>
<li>在一个命名空间中实施对每个 <a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims"  target="_blank" rel="noopener"
    >PersistentVolumeClaim</a> 能申请的最小和最大的存储空间大小的限制。</li>
<li>在一个命名空间中实施对一种资源的申请值和限制值的比值的控制。</li>
<li>设置一个命名空间中对计算资源的默认申请/限制值，并且自动的在运行时注入到多个 Container 中。</li>
</ul>
<p>当某命名空间中有一个 LimitRange 对象时，将在该命名空间中实施 LimitRange 限制。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">LimitRange</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">cpu-resource-constraint</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="c"># 此处定义默认限制值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">500m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">defaultRequest</span><span class="p">:</span><span class="w"> </span><span class="c"># 此处定义默认请求值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">500m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max</span><span class="p">:</span><span class="w"> </span><span class="c"># max 和 min 定义限制范围</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">100m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Container</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>这东西其实是不太常用的</p>
</blockquote>
<h2 id="生产环境需要考虑的问题">生产环境需要考虑的问题</h2>
<ul>
<li>是否公平调度</li>
<li>资源是否高效利用</li>
<li>QOS</li>
<li><code>affinity</code>和<code>anti-affinity</code></li>
<li>数据本地化</li>
<li>内部负载干扰(inter-workload interference)</li>
<li><code>deadlines</code></li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
