<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>微服务 on Heartbeat Diary</title>
    <link>https://blog.mletter.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
    <description>Recent content in 微服务 on Heartbeat Diary</description>
    <generator>Hugo -- 0.146.5</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 08 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.mletter.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>优雅的多阶段构建微服务镜像</title>
      <link>https://blog.mletter.cn/tech/docker/review-docker/</link>
      <pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.mletter.cn/tech/docker/review-docker/</guid>
      <description>如何使用Docker的多阶段构建功能来优雅的构建服务镜像</description>
      <content:encoded><![CDATA[<h2 id="借助maven-wrapper">借助Maven Wrapper</h2>
<p>首先我们说说<code>maven wrapper</code>的使用场景</p>
<p>假设我们所在的团队同时维护多个项目，不同的项目使用的<code>JDK</code>版本不同，使用的<code>maven</code>版本也不同，那么为了支持多项目开发，为了构建运行效果一致，你可能需要在本地管理多个<code>maven</code>版本，这会非常繁琐，从而引出了<code>maven wrapper</code>来解决这个<code>maven</code>版本的管理问题。</p>
<ul>
<li>版本一致性：通过在<code>mvnw</code>配置中指定 Maven 版本，确保所有开发人员和持续集成环境使用相同的<code>maven</code>版本。</li>
<li>简化批量安装：不需要预先安装<code>maven</code>，直接运行<code>mvnw</code>命令就如安装了<code>mvn</code>一样，从而简化了项目的初始设置和配置。</li>
</ul>
<h2 id="maven-wrapper安装方式">Maven Wrapper安装方式</h2>
<ul>
<li><a href="https://maven.apache.org/wrapper/maven-wrapper/">maven-wrapper</a>: 提供<code>maven-wrapper.jar</code>下载、安装和运行目标<code>maven</code>发行版。</li>
<li><a href="https://maven.apache.org/wrapper/maven-wrapper-distribution/">maven-wrapper-distribution</a>: 提供<code>mvnw</code>/<code>mvnw.cmd</code>脚本发行版，</li>
<li><a href="https://maven.apache.org/wrapper/maven-wrapper-plugin/">maven-wrapper-plugin</a>: <code>wrapper</code>用于轻松将 Wrapper 安装到项目中的插件。</li>
</ul>
<ol>
<li>首先安装<code>maven wrapper</code>,默认情况下安装的是<code>only-script</code>版本，也就是精简版，不需要额外的<code>maven-wrapper.jar</code>。如果你需要安装<code>source</code>版本请使用<code>-Dtype=source</code>参数。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 假设你的本地已经有了一个特定版本的maven,可以直接通过如下命令进行引入</span>
</span></span><span class="line"><span class="cl">mvn -N wrapper:wrapper
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 当然也可以指定引入的maven版本信息</span>
</span></span><span class="line"><span class="cl">mvn -N wrapper:wrapper -Dmaven<span class="o">=</span>3.6.1
</span></span></code></pre></div><ol start="2">
<li>检查是否安装成功,正常来讲是会出现一个<code>mvnw</code>和<code>mvnw.cmd</code>以及<code>.mvn</code>目录</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@localhost maven-wrapper<span class="o">]</span><span class="c1"># tree -fa</span>
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── ./.mvn
</span></span><span class="line"><span class="cl">│   └── ./.mvn/wrapper
</span></span><span class="line"><span class="cl">│       └── ./.mvn/wrapper/maven-wrapper.properties
</span></span><span class="line"><span class="cl">├── ./mvnw
</span></span><span class="line"><span class="cl">└── ./mvnw.cmd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">2</span> directories, <span class="m">3</span> files
</span></span></code></pre></div><ol start="3">
<li>修改<code>maven-wrapper.properties</code>定义的路径地址，因为用的是官方地址可能由于墙的问题无法进行下载，我这边采用<code>MinioS3</code>的地址来提前下好相关版本的<code>maven</code>包进行上传。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">wrapperVersion</span><span class="o">=</span><span class="s">3.3.1</span>
</span></span><span class="line"><span class="cl"><span class="na">distributionUrl</span><span class="o">=</span><span class="s">https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.6.1/apache-maven-3.6.1-bin.zip</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 正常修改distributionUrl的地址就可以了</span>
</span></span><span class="line"><span class="cl"><span class="na">distributionUrl</span><span class="o">=</span><span class="s">http://10.1.6.15:10240/software/apache-maven-3.6.1-bin.zip</span>
</span></span></code></pre></div><p>正常能检测到相关的版本即表示成功</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@localhost maven-wrapper<span class="o">]</span><span class="c1"># ./mvnw --version</span>
</span></span><span class="line"><span class="cl">Apache Maven 3.6.1 <span class="o">(</span>d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555<span class="p">;</span> 2019-04-05T03:00:29+08:00<span class="o">)</span>
</span></span><span class="line"><span class="cl">Maven home: /root/.m2/wrapper/dists/apache-maven-3.6.1/5256b4e
</span></span><span class="line"><span class="cl">Java version: 1.8.0_391, vendor: Oracle Corporation, runtime: /usr/local/java/jre
</span></span><span class="line"><span class="cl">Default locale: en_US, platform encoding: UTF-8
</span></span><span class="line"><span class="cl">OS name: <span class="s2">&#34;linux&#34;</span>, version: <span class="s2">&#34;4.18.0-372.9.1.el8.x86_64&#34;</span>, arch: <span class="s2">&#34;amd64&#34;</span>, family: <span class="s2">&#34;unix&#34;</span>
</span></span></code></pre></div><h2 id="遇到小问题">遇到小问题</h2>
<p>如果大家在构建的过程中遇到了小问题可以看看小思路</p>
<ol>
<li>问题一：我明明指定了<code>distributionUrl</code>为我自的仓库地址，并且我上传的是<code>zip</code>的包，为什么每次我执行的的时候都会提示<code>wget: Failed to fetch http://10.1.6.15:10240/software/apache-maven-3.6.1-bin.tar.gz</code></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># select .zip or .tar.gz</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> ! <span class="nb">command</span> -v unzip &gt;/dev/null<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nv">distributionUrl</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">distributionUrl</span><span class="p">%.zip</span><span class="si">}</span><span class="s2">.tar.gz&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">distributionUrlName</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">distributionUrl</span><span class="p">##*/</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><blockquote>
<p>关于本问题的解释：由于官方的mvnw脚本当中存在select zip or tar.gz的文件类型判断，所以当服务器上没有<code>unzip</code>的命令的时候会出现如上提示。</p></blockquote>
<h2 id="官方的dockerfile">官方的Dockerfile</h2>
<ul>
<li>其实都是引用了<code>BuildKit</code>的一些特性，如果需要了解更多的话可以使用<code>docker Desktop</code>来进行初始化看一下官方写的这些脚本。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># syntax=docker/dockerfile:1</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Comments are provided throughout this file to help you get started.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># If you need more help, visit the Dockerfile reference guide at</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># https://docs.docker.com/go/dockerfile-reference/</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">################################################################################</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Create a stage for resolving and downloading dependencies.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> eclipse-temurin:17-jdk-jammy as deps</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /build</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Copy the mvnw wrapper with executable permissions.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --chmod<span class="o">=</span><span class="m">0755</span> mvnw mvnw<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> .mvn/ .mvn/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Download dependencies as a separate step to take advantage of Docker&#39;s caching.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Leverage a cache mount to /root/.m2 so that subsequent builds don&#39;t have to</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># re-download packages.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> --mount<span class="o">=</span><span class="nv">type</span><span class="o">=</span>bind,source<span class="o">=</span>pom.xml,target<span class="o">=</span>pom.xml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --mount<span class="o">=</span><span class="nv">type</span><span class="o">=</span>cache,target<span class="o">=</span>/root/.m2 ./mvnw dependency:go-offline -DskipTests<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">################################################################################</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Create a stage for building the application based on the stage with downloaded dependencies.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># This Dockerfile is optimized for Java applications that output an uber jar, which includes</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># all the dependencies needed to run your app inside a JVM. If your app doesn&#39;t output an uber</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># jar and instead relies on an application server like Apache Tomcat, you&#39;ll need to update this</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># stage with the correct filename of your package and update the base image of the &#34;final&#34; stage</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># use the relevant app server, e.g., using tomcat (https://hub.docker.com/_/tomcat/) as a base image.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> deps as package</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /build</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./src src/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> --mount<span class="o">=</span><span class="nv">type</span><span class="o">=</span>bind,source<span class="o">=</span>pom.xml,target<span class="o">=</span>pom.xml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --mount<span class="o">=</span><span class="nv">type</span><span class="o">=</span>cache,target<span class="o">=</span>/root/.m2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    ./mvnw package -DskipTests <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mv target/<span class="k">$(</span>./mvnw help:evaluate -Dexpression<span class="o">=</span>project.artifactId -q -DforceStdout<span class="k">)</span>-<span class="k">$(</span>./mvnw help:evaluate -Dexpression<span class="o">=</span>project.version -q -DforceStdout<span class="k">)</span>.jar target/app.jar<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">################################################################################</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Create a new stage for running the application that contains the minimal</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># runtime dependencies for the application. This often uses a different base</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># image from the install or build stage where the necessary files are copied</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># from the install stage.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># The example below uses eclipse-turmin&#39;s JRE image as the foundation for running the app.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># By specifying the &#34;17-jre-jammy&#34; tag, it will also use whatever happens to be the</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># most recent version of that tag when you build your Dockerfile.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># If reproducability is important, consider using a specific digest SHA, like</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># eclipse-temurin@sha256:99cede493dfd88720b610eb8077c8688d3cca50003d76d1d539b0efc8cca72b4.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> eclipse-temurin:17-jre-jammy AS final</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Create a non-privileged user that the app will run under.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># See https://docs.docker.com/go/dockerfile-user-best-practices/</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ARG</span> <span class="nv">UID</span><span class="o">=</span><span class="m">10001</span>
</span></span><span class="line"><span class="cl"><span class="k">RUN</span> adduser <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --disabled-password <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --gecos <span class="s2">&#34;&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --home <span class="s2">&#34;/nonexistent&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --shell <span class="s2">&#34;/sbin/nologin&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --no-create-home <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --uid <span class="s2">&#34;</span><span class="si">${</span><span class="nv">UID</span><span class="si">}</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    appuser<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">USER</span><span class="s"> appuser</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Copy the executable from the &#34;package&#34; stage.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>package build/target/app.jar app.jar<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 9000</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span> <span class="s2">&#34;java&#34;</span><span class="p">,</span> <span class="s2">&#34;-jar&#34;</span><span class="p">,</span> <span class="s2">&#34;app.jar&#34;</span> <span class="p">]</span><span class="err">
</span></span></span></code></pre></div><blockquote>
<p>另外说一句：我永远相信最佳实践的内容，但是大厂的东西一定适合大厂，但是不一定适合你自己，所以我觉得应该带一些辨证的眼光去看待最佳实践的这些内容。</p></blockquote>
]]></content:encoded>
    </item>
  </channel>
</rss>
